// generated by gong
import { Component, OnInit, AfterViewInit, ViewChild, Inject, Optional } from '@angular/core';
import { BehaviorSubject } from 'rxjs'
import { MatSort } from '@angular/material/sort';
import { MatPaginator } from '@angular/material/paginator';
import { MatTableDataSource } from '@angular/material/table';
import { MatButton } from '@angular/material/button'

import { MatDialogRef, MAT_DIALOG_DATA, MatDialog } from '@angular/material/dialog'
import { DialogData, FrontRepoService, FrontRepo, NullInt64, SelectionMode } from '../front-repo.service'
import { SelectionModel } from '@angular/cdk/collections';

const allowMultiSelect = true;

import { Router, RouterState } from '@angular/router';
import { GanttDB } from '../gantt-db'
import { GanttService } from '../gantt.service'

// TableComponent is initilizaed from different routes
// TableComponentMode detail different cases 
enum TableComponentMode {
  DISPLAY_MODE,
  ONE_MANY_ASSOCIATION_MODE,
  MANY_MANY_ASSOCIATION_MODE,
}

// generated table component
@Component({
  selector: 'app-ganttstable',
  templateUrl: './gantts-table.component.html',
  styleUrls: ['./gantts-table.component.css'],
})
export class GanttsTableComponent implements OnInit {

  // mode at invocation
  mode: TableComponentMode

  // used if the component is called as a selection component of Gantt instances
  selection: SelectionModel<GanttDB>;
  initialSelection = new Array<GanttDB>();

  // the data source for the table
  gantts: GanttDB[];
  matTableDataSource: MatTableDataSource<GanttDB>

  // front repo, that will be referenced by this.gantts
  frontRepo: FrontRepo

  // displayedColumns is referenced by the MatTable component for specify what columns
  // have to be displayed and in what order
  displayedColumns: string[];

  // for sorting & pagination
  @ViewChild(MatSort) sort: MatSort;
  @ViewChild(MatPaginator) paginator: MatPaginator;

  ngAfterViewInit() {

    // enable sorting on all fields (including pointers and reverse pointer)
    this.matTableDataSource.sortingDataAccessor = (ganttDB: GanttDB, property: string) => {
      switch (property) {
        // insertion point for specific sorting accessor
        case 'Name':
          return ganttDB.Name;

        case 'Start':
          return ganttDB.Start;

        case 'End':
          return ganttDB.End;

        case 'LaneHeight':
          return ganttDB.LaneHeight;

        case 'RatioBarToLaneHeight':
          return ganttDB.RatioBarToLaneHeight;

        case 'YTopMargin':
          return ganttDB.YTopMargin;

        case 'XLeftText':
          return ganttDB.XLeftText;

        case 'TextHeight':
          return ganttDB.TextHeight;

        case 'XLeftLanes':
          return ganttDB.XLeftLanes;

        case 'XRightMargin':
          return ganttDB.XRightMargin;

        case 'TimeLine_Color':
          return ganttDB.TimeLine_Color;

        case 'TimeLine_FillOpacity':
          return ganttDB.TimeLine_FillOpacity;

        case 'TimeLine_Stroke':
          return ganttDB.TimeLine_Stroke;

        case 'TimeLine_StrokeWidth':
          return ganttDB.TimeLine_StrokeWidth;

        case 'Group_Stroke':
          return ganttDB.Group_Stroke;

        case 'Group_StrokeWidth':
          return ganttDB.Group_StrokeWidth;

        case 'Group_StrokeDashArray':
          return ganttDB.Group_StrokeDashArray;

        case 'DateYOffset':
          return ganttDB.DateYOffset;

        case 'AlignOnStartEndOnYearStart':
          return ganttDB.AlignOnStartEndOnYearStart;

        default:
          return GanttDB[property];
      }
    };

    // enable filtering on all fields (including pointers and reverse pointer, which is not done by default)
    this.matTableDataSource.filterPredicate = (ganttDB: GanttDB, filter: string) => {

      // filtering is based on finding a lower case filter into a concatenated string
      // the ganttDB properties
      let mergedContent = ""

      // insertion point for merging of fields
      mergedContent += ganttDB.Name.toLowerCase()
      mergedContent += ganttDB.LaneHeight.toString()
      mergedContent += ganttDB.RatioBarToLaneHeight.toString()
      mergedContent += ganttDB.YTopMargin.toString()
      mergedContent += ganttDB.XLeftText.toString()
      mergedContent += ganttDB.TextHeight.toString()
      mergedContent += ganttDB.XLeftLanes.toString()
      mergedContent += ganttDB.XRightMargin.toString()
      mergedContent += ganttDB.TimeLine_Color.toLowerCase()
      mergedContent += ganttDB.TimeLine_FillOpacity.toString()
      mergedContent += ganttDB.TimeLine_Stroke.toLowerCase()
      mergedContent += ganttDB.TimeLine_StrokeWidth.toString()
      mergedContent += ganttDB.Group_Stroke.toLowerCase()
      mergedContent += ganttDB.Group_StrokeWidth.toString()
      mergedContent += ganttDB.Group_StrokeDashArray.toLowerCase()
      mergedContent += ganttDB.DateYOffset.toString()

      let isSelected = mergedContent.includes(filter.toLowerCase())
      return isSelected
    };

    this.matTableDataSource.sort = this.sort;
    this.matTableDataSource.paginator = this.paginator;
  }

  applyFilter(event: Event) {
    const filterValue = (event.target as HTMLInputElement).value;
    this.matTableDataSource.filter = filterValue.trim().toLowerCase();
  }

  constructor(
    private ganttService: GanttService,
    private frontRepoService: FrontRepoService,

    // not null if the component is called as a selection component of gantt instances
    public dialogRef: MatDialogRef<GanttsTableComponent>,
    @Optional() @Inject(MAT_DIALOG_DATA) public dialogData: DialogData,

    private router: Router,
  ) {

    // compute mode
    if (dialogData == undefined) {
      this.mode = TableComponentMode.DISPLAY_MODE
    } else {
      switch (dialogData.SelectionMode) {
        case SelectionMode.ONE_MANY_ASSOCIATION_MODE:
          this.mode = TableComponentMode.ONE_MANY_ASSOCIATION_MODE
          break
        case SelectionMode.MANY_MANY_ASSOCIATION_MODE:
          this.mode = TableComponentMode.MANY_MANY_ASSOCIATION_MODE
          break
        default:
      }
    }

    // observable for changes in structs
    this.ganttService.GanttServiceChanged.subscribe(
      message => {
        if (message == "post" || message == "update" || message == "delete") {
          this.getGantts()
        }
      }
    )
    if (this.mode == TableComponentMode.DISPLAY_MODE) {
      this.displayedColumns = ['ID', 'Edit', 'Delete', // insertion point for columns to display
        "Name",
        "Start",
        "End",
        "LaneHeight",
        "RatioBarToLaneHeight",
        "YTopMargin",
        "XLeftText",
        "TextHeight",
        "XLeftLanes",
        "XRightMargin",
        "TimeLine_Color",
        "TimeLine_FillOpacity",
        "TimeLine_Stroke",
        "TimeLine_StrokeWidth",
        "Group_Stroke",
        "Group_StrokeWidth",
        "Group_StrokeDashArray",
        "DateYOffset",
        "AlignOnStartEndOnYearStart",
      ]
    } else {
      this.displayedColumns = ['select', 'ID', // insertion point for columns to display
        "Name",
        "Start",
        "End",
        "LaneHeight",
        "RatioBarToLaneHeight",
        "YTopMargin",
        "XLeftText",
        "TextHeight",
        "XLeftLanes",
        "XRightMargin",
        "TimeLine_Color",
        "TimeLine_FillOpacity",
        "TimeLine_Stroke",
        "TimeLine_StrokeWidth",
        "Group_Stroke",
        "Group_StrokeWidth",
        "Group_StrokeDashArray",
        "DateYOffset",
        "AlignOnStartEndOnYearStart",
      ]
      this.selection = new SelectionModel<GanttDB>(allowMultiSelect, this.initialSelection);
    }

  }

  ngOnInit(): void {
    this.getGantts()
    this.matTableDataSource = new MatTableDataSource(this.gantts)
  }

  getGantts(): void {
    this.frontRepoService.pull().subscribe(
      frontRepo => {
        this.frontRepo = frontRepo

        this.gantts = this.frontRepo.Gantts_array;

        // insertion point for variables Recoveries

        // in case the component is called as a selection component
        if (this.mode == TableComponentMode.ONE_MANY_ASSOCIATION_MODE) {
          this.gantts.forEach(
            gantt => {
              let ID = this.dialogData.ID
              let revPointer = gantt[this.dialogData.ReversePointer]
              if (revPointer.Int64 == ID) {
                this.initialSelection.push(gantt)
              }
            }
          )
          this.selection = new SelectionModel<GanttDB>(allowMultiSelect, this.initialSelection);
        }

        if (this.mode == TableComponentMode.MANY_MANY_ASSOCIATION_MODE) {

          let mapOfSourceInstances = this.frontRepo[this.dialogData.SourceStruct + "s"]
          let sourceInstance = mapOfSourceInstances.get(this.dialogData.ID)

          if (sourceInstance[this.dialogData.SourceField]) {
            for (let associationInstance of sourceInstance[this.dialogData.SourceField]) {
              let gantt = associationInstance[this.dialogData.IntermediateStructField]
              this.initialSelection.push(gantt)
            }
          }
          this.selection = new SelectionModel<GanttDB>(allowMultiSelect, this.initialSelection);
        }

        // update the mat table data source
        this.matTableDataSource.data = this.gantts
      }
    )
  }

  // newGantt initiate a new gantt
  // create a new Gantt objet
  newGantt() {
  }

  deleteGantt(ganttID: number, gantt: GanttDB) {
    // list of gantts is truncated of gantt before the delete
    this.gantts = this.gantts.filter(h => h !== gantt);

    this.ganttService.deleteGantt(ganttID).subscribe(
      gantt => {
        this.ganttService.GanttServiceChanged.next("delete")
      }
    );
  }

  editGantt(ganttID: number, gantt: GanttDB) {

  }

  // display gantt in router
  displayGanttInRouter(ganttID: number) {
    this.router.navigate(["github_com_fullstack_lang_gonggantt_go-" + "gantt-display", ganttID])
  }

  // set editor outlet
  setEditorRouterOutlet(ganttID: number) {
    this.router.navigate([{
      outlets: {
        github_com_fullstack_lang_gonggantt_go_editor: ["github_com_fullstack_lang_gonggantt_go-" + "gantt-detail", ganttID]
      }
    }]);
  }

  // set presentation outlet
  setPresentationRouterOutlet(ganttID: number) {
    this.router.navigate([{
      outlets: {
        github_com_fullstack_lang_gonggantt_go_presentation: ["github_com_fullstack_lang_gonggantt_go-" + "gantt-presentation", ganttID]
      }
    }]);
  }

  /** Whether the number of selected elements matches the total number of rows. */
  isAllSelected() {
    const numSelected = this.selection.selected.length;
    const numRows = this.gantts.length;
    return numSelected === numRows;
  }

  /** Selects all rows if they are not all selected; otherwise clear selection. */
  masterToggle() {
    this.isAllSelected() ?
      this.selection.clear() :
      this.gantts.forEach(row => this.selection.select(row));
  }

  save() {

    if (this.mode == TableComponentMode.ONE_MANY_ASSOCIATION_MODE) {

      let toUpdate = new Set<GanttDB>()

      // reset all initial selection of gantt that belong to gantt
      this.initialSelection.forEach(
        gantt => {
          gantt[this.dialogData.ReversePointer].Int64 = 0
          gantt[this.dialogData.ReversePointer].Valid = true
          toUpdate.add(gantt)
        }
      )

      // from selection, set gantt that belong to gantt
      this.selection.selected.forEach(
        gantt => {
          let ID = +this.dialogData.ID
          gantt[this.dialogData.ReversePointer].Int64 = ID
          gantt[this.dialogData.ReversePointer].Valid = true
          toUpdate.add(gantt)
        }
      )

      // update all gantt (only update selection & initial selection)
      toUpdate.forEach(
        gantt => {
          this.ganttService.updateGantt(gantt)
            .subscribe(gantt => {
              this.ganttService.GanttServiceChanged.next("update")
            });
        }
      )
    }

    if (this.mode == TableComponentMode.MANY_MANY_ASSOCIATION_MODE) {

      let mapOfSourceInstances = this.frontRepo[this.dialogData.SourceStruct + "s"]
      let sourceInstance = mapOfSourceInstances.get(this.dialogData.ID)

      // First, parse all instance of the association struct and remove the instance
      // that have unselect
      let unselectedGantt = new Set<number>()
      for (let gantt of this.initialSelection) {
        if (this.selection.selected.includes(gantt)) {
          // console.log("gantt " + gantt.Name + " is still selected")
        } else {
          console.log("gantt " + gantt.Name + " has been unselected")
          unselectedGantt.add(gantt.ID)
          console.log("is unselected " + unselectedGantt.has(gantt.ID))
        }
      }

      // delete the association instance
      if (sourceInstance[this.dialogData.SourceField]) {
        for (let associationInstance of sourceInstance[this.dialogData.SourceField]) {
          let gantt = associationInstance[this.dialogData.IntermediateStructField]
          if (unselectedGantt.has(gantt.ID)) {

            this.frontRepoService.deleteService( this.dialogData.IntermediateStruct, associationInstance )
          }
        }
      }

      // is the source array is emptyn create it
      if (sourceInstance[this.dialogData.SourceField] == undefined) {
        sourceInstance[this.dialogData.SourceField] = new Array<any>()
      }

      // second, parse all instance of the selected
      if (sourceInstance[this.dialogData.SourceField]) {
        this.selection.selected.forEach(
          gantt => {
            if (!this.initialSelection.includes(gantt)) {
              // console.log("gantt " + gantt.Name + " has been added to the selection")

              let associationInstance = {
                Name: sourceInstance["Name"] + "-" + gantt.Name,
              }

              associationInstance[this.dialogData.IntermediateStructField+"ID"] = new NullInt64
              associationInstance[this.dialogData.IntermediateStructField+"ID"].Int64 = gantt.ID
              associationInstance[this.dialogData.IntermediateStructField+"ID"].Valid = true

              associationInstance[this.dialogData.SourceStruct + "_" + this.dialogData.SourceField + "DBID"] = new NullInt64
              associationInstance[this.dialogData.SourceStruct + "_" + this.dialogData.SourceField + "DBID"].Int64 = sourceInstance["ID"]
              associationInstance[this.dialogData.SourceStruct + "_" + this.dialogData.SourceField + "DBID"].Valid = true

              this.frontRepoService.postService( this.dialogData.IntermediateStruct, associationInstance )

            } else {
              // console.log("gantt " + gantt.Name + " is still selected")
            }
          }
        )
      }

      // this.selection = new SelectionModel<GanttDB>(allowMultiSelect, this.initialSelection);
    }

    // why pizza ?
    this.dialogRef.close('Pizza!');
  }
}
