// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"net/http"
	"time"

	"github.com/fullstack-lang/gonggantt/go/models"
	"github.com/fullstack-lang/gonggantt/go/orm"

	"github.com/gin-gonic/gin"
	"github.com/jinzhu/gorm"
)

// declaration in order to justify use of the models import
var __Group__dummysDeclaration__ models.Group
var __Group_time__dummyDeclaration time.Duration

// An GroupID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getGroup updateGroup deleteGroup
type GroupID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// GroupInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postGroup updateGroup
type GroupInput struct {
	// The Group to submit or modify
	// in: body
	Group *orm.GroupAPI
}

// GetGroups
//
// swagger:route GET /groups groups getGroups
//
// Get all groups
//
// Responses:
//    default: genericError
//        200: groupDBsResponse
func GetGroups(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	var groups []orm.GroupDB
	query := db.Find(&groups)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// for each group, update fields from the database nullable fields
	for idx := range groups {
		group := &groups[idx]
		_ = group
		// insertion point for updating fields
		if group.Name_Data.Valid {
			group.Name = group.Name_Data.String
		}

	}

	c.JSON(http.StatusOK, groups)
}

// PostGroup
//
// swagger:route POST /groups groups postGroup
//
// Creates a group
//     Consumes:
//     - application/json
//
//     Produces:
//     - application/json
//
//     Responses:
//       200: groupDBResponse
func PostGroup(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Validate input
	var input orm.GroupAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create group
	groupDB := orm.GroupDB{}
	groupDB.GroupAPI = input
	// insertion point for nullable field set
	groupDB.Name_Data.String = input.Name
	groupDB.Name_Data.Valid = true

	query := db.Create(&groupDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	c.JSON(http.StatusOK, groupDB)
}

// GetGroup
//
// swagger:route GET /groups/{ID} groups getGroup
//
// Gets the details for a group.
//
// Responses:
//    default: genericError
//        200: groupDBResponse
func GetGroup(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get group in DB
	var group orm.GroupDB
	if err := db.First(&group, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// insertion point for fields value set from nullable fields
	if group.Name_Data.Valid {
		group.Name = group.Name_Data.String
	}

	c.JSON(http.StatusOK, group)
}

// UpdateGroup
//
// swagger:route PATCH /groups/{ID} groups updateGroup
//
// Update a group
//
// Responses:
//    default: genericError
//        200: groupDBResponse
func UpdateGroup(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get model if exist
	var groupDB orm.GroupDB

	// fetch the group
	query := db.First(&groupDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.GroupAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	// insertion point for nullable field set
	input.Name_Data.String = input.Name
	input.Name_Data.Valid = true

	query = db.Model(&groupDB).Updates(input)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	// return status OK with the marshalling of the the groupDB
	c.JSON(http.StatusOK, groupDB)
}

// DeleteGroup
//
// swagger:route DELETE /groups/{ID} groups deleteGroup
//
// Delete a group
//
// Responses:
//    default: genericError
func DeleteGroup(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get model if exist
	var groupDB orm.GroupDB
	if err := db.First(&groupDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&groupDB)

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
