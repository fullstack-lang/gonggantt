// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"net/http"
	"time"

	"github.com/fullstack-lang/gonggantt/go/models"
	"github.com/fullstack-lang/gonggantt/go/orm"

	"github.com/gin-gonic/gin"
	"github.com/jinzhu/gorm"
)

// declaration in order to justify use of the models import
var __Lane__dummysDeclaration__ models.Lane
var __Lane_time__dummyDeclaration time.Duration

// An LaneID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getLane updateLane deleteLane
type LaneID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// LaneInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postLane updateLane
type LaneInput struct {
	// The Lane to submit or modify
	// in: body
	Lane *orm.LaneAPI
}

// GetLanes
//
// swagger:route GET /lanes lanes getLanes
//
// Get all lanes
//
// Responses:
//    default: genericError
//        200: laneDBsResponse
func GetLanes(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// source slice
	var laneDBs []orm.LaneDB
	query := db.Find(&laneDBs)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// slice that will be transmitted to the front
	laneAPIs := make([]orm.LaneAPI, 0)

	// for each lane, update fields from the database nullable fields
	for idx := range laneDBs {
		laneDB := &laneDBs[idx]
		_ = laneDB
		var laneAPI orm.LaneAPI

		// insertion point for updating fields
		laneAPI.ID = laneDB.ID
		laneDB.CopyBasicFieldsToLane(&laneAPI.Lane)
		laneAPI.LanePointersEnconding = laneDB.LanePointersEnconding
		laneAPIs = append(laneAPIs, laneAPI)
	}

	c.JSON(http.StatusOK, laneAPIs)
}

// PostLane
//
// swagger:route POST /lanes lanes postLane
//
// Creates a lane
//     Consumes:
//     - application/json
//
//     Produces:
//     - application/json
//
//     Responses:
//       200: laneDBResponse
func PostLane(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Validate input
	var input orm.LaneAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create lane
	laneDB := orm.LaneDB{}
	laneDB.LanePointersEnconding = input.LanePointersEnconding
	laneDB.CopyBasicFieldsFromLane(&input.Lane)

	query := db.Create(&laneDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	c.JSON(http.StatusOK, laneDB)
}

// GetLane
//
// swagger:route GET /lanes/{ID} lanes getLane
//
// Gets the details for a lane.
//
// Responses:
//    default: genericError
//        200: laneDBResponse
func GetLane(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get laneDB in DB
	var laneDB orm.LaneDB
	if err := db.First(&laneDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	var laneAPI orm.LaneAPI
	laneAPI.ID = laneDB.ID
	laneAPI.LanePointersEnconding = laneDB.LanePointersEnconding
	laneDB.CopyBasicFieldsToLane(&laneAPI.Lane)

	c.JSON(http.StatusOK, laneAPI)
}

// UpdateLane
//
// swagger:route PATCH /lanes/{ID} lanes updateLane
//
// Update a lane
//
// Responses:
//    default: genericError
//        200: laneDBResponse
func UpdateLane(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get model if exist
	var laneDB orm.LaneDB

	// fetch the lane
	query := db.First(&laneDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.LaneAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	laneDB.CopyBasicFieldsFromLane(&input.Lane)
	laneDB.LanePointersEnconding = input.LanePointersEnconding

	query = db.Model(&laneDB).Updates(laneDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	// return status OK with the marshalling of the the laneDB
	c.JSON(http.StatusOK, laneDB)
}

// DeleteLane
//
// swagger:route DELETE /lanes/{ID} lanes deleteLane
//
// Delete a lane
//
// Responses:
//    default: genericError
func DeleteLane(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get model if exist
	var laneDB orm.LaneDB
	if err := db.First(&laneDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&laneDB)

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
