// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"net/http"
	"time"

	"github.com/fullstack-lang/gonggantt/go/models"
	"github.com/fullstack-lang/gonggantt/go/orm"

	"github.com/gin-gonic/gin"
	"github.com/jinzhu/gorm"
)

// declaration in order to justify use of the models import
var __Milestone__dummysDeclaration__ models.Milestone
var __Milestone_time__dummyDeclaration time.Duration

// An MilestoneID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getMilestone updateMilestone deleteMilestone
type MilestoneID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// MilestoneInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postMilestone updateMilestone
type MilestoneInput struct {
	// The Milestone to submit or modify
	// in: body
	Milestone *orm.MilestoneAPI
}

// GetMilestones
//
// swagger:route GET /milestones milestones getMilestones
//
// Get all milestones
//
// Responses:
//    default: genericError
//        200: milestoneDBsResponse
func GetMilestones(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	var milestones []orm.MilestoneDB
	query := db.Find(&milestones)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// for each milestone, update fields from the database nullable fields
	for idx := range milestones {
		milestone := &milestones[idx]
		_ = milestone
		// insertion point for updating fields
		if milestone.Name_Data.Valid {
			milestone.Name = milestone.Name_Data.String
		}

		if milestone.Date_Data.Valid {
			milestone.Date = milestone.Date_Data.Time
		}

	}

	c.JSON(http.StatusOK, milestones)
}

// PostMilestone
//
// swagger:route POST /milestones milestones postMilestone
//
// Creates a milestone
//     Consumes:
//     - application/json
//
//     Produces:
//     - application/json
//
//     Responses:
//       200: milestoneDBResponse
func PostMilestone(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Validate input
	var input orm.MilestoneAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create milestone
	milestoneDB := orm.MilestoneDB{}
	milestoneDB.MilestoneAPI = input
	// insertion point for nullable field set
	milestoneDB.Name_Data.String = input.Name
	milestoneDB.Name_Data.Valid = true

	milestoneDB.Date_Data.Time = input.Date
	milestoneDB.Date_Data.Valid = true

	query := db.Create(&milestoneDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	c.JSON(http.StatusOK, milestoneDB)
}

// GetMilestone
//
// swagger:route GET /milestones/{ID} milestones getMilestone
//
// Gets the details for a milestone.
//
// Responses:
//    default: genericError
//        200: milestoneDBResponse
func GetMilestone(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get milestone in DB
	var milestone orm.MilestoneDB
	if err := db.First(&milestone, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// insertion point for fields value set from nullable fields
	if milestone.Name_Data.Valid {
		milestone.Name = milestone.Name_Data.String
	}

	if milestone.Date_Data.Valid {
		milestone.Date = milestone.Date_Data.Time
	}

	c.JSON(http.StatusOK, milestone)
}

// UpdateMilestone
//
// swagger:route PATCH /milestones/{ID} milestones updateMilestone
//
// Update a milestone
//
// Responses:
//    default: genericError
//        200: milestoneDBResponse
func UpdateMilestone(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get model if exist
	var milestoneDB orm.MilestoneDB

	// fetch the milestone
	query := db.First(&milestoneDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.MilestoneAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	// insertion point for nullable field set
	input.Name_Data.String = input.Name
	input.Name_Data.Valid = true

	input.Date_Data.Time = input.Date
	input.Date_Data.Valid = true

	query = db.Model(&milestoneDB).Updates(input)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	// return status OK with the marshalling of the the milestoneDB
	c.JSON(http.StatusOK, milestoneDB)
}

// DeleteMilestone
//
// swagger:route DELETE /milestones/{ID} milestones deleteMilestone
//
// Delete a milestone
//
// Responses:
//    default: genericError
func DeleteMilestone(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get model if exist
	var milestoneDB orm.MilestoneDB
	if err := db.First(&milestoneDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&milestoneDB)

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
