// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"log"
	"net/http"
	"time"

	"github.com/fullstack-lang/gonggantt/go/models"
	"github.com/fullstack-lang/gonggantt/go/orm"

	"github.com/gin-gonic/gin"
)

// declaration in order to justify use of the models import
var __Milestone__dummysDeclaration__ models.Milestone
var __Milestone_time__dummyDeclaration time.Duration

// An MilestoneID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getMilestone updateMilestone deleteMilestone
type MilestoneID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// MilestoneInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postMilestone updateMilestone
type MilestoneInput struct {
	// The Milestone to submit or modify
	// in: body
	Milestone *orm.MilestoneAPI
}

// GetMilestones
//
// swagger:route GET /milestones milestones getMilestones
//
// # Get all milestones
//
// Responses:
// default: genericError
//
//	200: milestoneDBResponse
func GetMilestones(c *gin.Context) {
	db := orm.BackRepo.BackRepoMilestone.GetDB()

	// source slice
	var milestoneDBs []orm.MilestoneDB
	query := db.Find(&milestoneDBs)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// slice that will be transmitted to the front
	milestoneAPIs := make([]orm.MilestoneAPI, 0)

	// for each milestone, update fields from the database nullable fields
	for idx := range milestoneDBs {
		milestoneDB := &milestoneDBs[idx]
		_ = milestoneDB
		var milestoneAPI orm.MilestoneAPI

		// insertion point for updating fields
		milestoneAPI.ID = milestoneDB.ID
		milestoneDB.CopyBasicFieldsToMilestone(&milestoneAPI.Milestone)
		milestoneAPI.MilestonePointersEnconding = milestoneDB.MilestonePointersEnconding
		milestoneAPIs = append(milestoneAPIs, milestoneAPI)
	}

	c.JSON(http.StatusOK, milestoneAPIs)
}

// PostMilestone
//
// swagger:route POST /milestones milestones postMilestone
//
// Creates a milestone
//
//	Consumes:
//	- application/json
//
//	Produces:
//	- application/json
//
//	Responses:
//	  200: nodeDBResponse
func PostMilestone(c *gin.Context) {
	db := orm.BackRepo.BackRepoMilestone.GetDB()

	// Validate input
	var input orm.MilestoneAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create milestone
	milestoneDB := orm.MilestoneDB{}
	milestoneDB.MilestonePointersEnconding = input.MilestonePointersEnconding
	milestoneDB.CopyBasicFieldsFromMilestone(&input.Milestone)

	query := db.Create(&milestoneDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// get an instance (not staged) from DB instance, and call callback function
	orm.BackRepo.BackRepoMilestone.CheckoutPhaseOneInstance(&milestoneDB)
	milestone := (*orm.BackRepo.BackRepoMilestone.Map_MilestoneDBID_MilestonePtr)[milestoneDB.ID]

	if milestone != nil {
		models.AfterCreateFromFront(&models.Stage, milestone)
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, milestoneDB)
}

// GetMilestone
//
// swagger:route GET /milestones/{ID} milestones getMilestone
//
// Gets the details for a milestone.
//
// Responses:
// default: genericError
//
//	200: milestoneDBResponse
func GetMilestone(c *gin.Context) {
	db := orm.BackRepo.BackRepoMilestone.GetDB()

	// Get milestoneDB in DB
	var milestoneDB orm.MilestoneDB
	if err := db.First(&milestoneDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	var milestoneAPI orm.MilestoneAPI
	milestoneAPI.ID = milestoneDB.ID
	milestoneAPI.MilestonePointersEnconding = milestoneDB.MilestonePointersEnconding
	milestoneDB.CopyBasicFieldsToMilestone(&milestoneAPI.Milestone)

	c.JSON(http.StatusOK, milestoneAPI)
}

// UpdateMilestone
//
// swagger:route PATCH /milestones/{ID} milestones updateMilestone
//
// # Update a milestone
//
// Responses:
// default: genericError
//
//	200: milestoneDBResponse
func UpdateMilestone(c *gin.Context) {
	db := orm.BackRepo.BackRepoMilestone.GetDB()

	// Get model if exist
	var milestoneDB orm.MilestoneDB

	// fetch the milestone
	query := db.First(&milestoneDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.MilestoneAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	milestoneDB.CopyBasicFieldsFromMilestone(&input.Milestone)
	milestoneDB.MilestonePointersEnconding = input.MilestonePointersEnconding

	query = db.Model(&milestoneDB).Updates(milestoneDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// get an instance (not staged) from DB instance, and call callback function
	milestoneNew := new(models.Milestone)
	milestoneDB.CopyBasicFieldsToMilestone(milestoneNew)

	// get stage instance from DB instance, and call callback function
	milestoneOld := (*orm.BackRepo.BackRepoMilestone.Map_MilestoneDBID_MilestonePtr)[milestoneDB.ID]
	if milestoneOld != nil {
		models.AfterUpdateFromFront(&models.Stage, milestoneOld, milestoneNew)
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	// in some cases, with the marshalling of the stage, this operation might
	// generates a checkout
	orm.BackRepo.IncrementPushFromFrontNb()

	// return status OK with the marshalling of the the milestoneDB
	c.JSON(http.StatusOK, milestoneDB)
}

// DeleteMilestone
//
// swagger:route DELETE /milestones/{ID} milestones deleteMilestone
//
// # Delete a milestone
//
// default: genericError
//
//	200: milestoneDBResponse
func DeleteMilestone(c *gin.Context) {
	db := orm.BackRepo.BackRepoMilestone.GetDB()

	// Get model if exist
	var milestoneDB orm.MilestoneDB
	if err := db.First(&milestoneDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&milestoneDB)

	// get an instance (not staged) from DB instance, and call callback function
	milestoneDeleted := new(models.Milestone)
	milestoneDB.CopyBasicFieldsToMilestone(milestoneDeleted)

	// get stage instance from DB instance, and call callback function
	milestoneStaged := (*orm.BackRepo.BackRepoMilestone.Map_MilestoneDBID_MilestonePtr)[milestoneDB.ID]
	if milestoneStaged != nil {
		models.AfterDeleteFromFront(&models.Stage, milestoneStaged, milestoneDeleted)
	}

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
