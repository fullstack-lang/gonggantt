// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"net/http"
	"time"

	"github.com/fullstack-lang/gonggantt/go/models"
	"github.com/fullstack-lang/gonggantt/go/orm"

	"github.com/gin-gonic/gin"
	"github.com/jinzhu/gorm"
)

// declaration in order to justify use of the models import
var __Gantt__dummysDeclaration__ models.Gantt
var __Gantt_time__dummyDeclaration time.Duration

// An GanttID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getGantt updateGantt deleteGantt
type GanttID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// GanttInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postGantt updateGantt
type GanttInput struct {
	// The Gantt to submit or modify
	// in: body
	Gantt *orm.GanttAPI
}

// GetGantts
//
// swagger:route GET /gantts gantts getGantts
//
// Get all gantts
//
// Responses:
//    default: genericError
//        200: ganttDBsResponse
func GetGantts(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	var gantts []orm.GanttDB
	query := db.Find(&gantts)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// for each gantt, update fields from the database nullable fields
	for idx := range gantts {
		gantt := &gantts[idx]
		_ = gantt
		// insertion point for updating fields
		if gantt.Name_Data.Valid {
			gantt.Name = gantt.Name_Data.String
		}

		if gantt.Start_Data.Valid {
			gantt.Start = gantt.Start_Data.Time
		}

		if gantt.End_Data.Valid {
			gantt.End = gantt.End_Data.Time
		}

		if gantt.LaneHeight_Data.Valid {
			gantt.LaneHeight = gantt.LaneHeight_Data.Float64
		}

		if gantt.RatioBarToLaneHeight_Data.Valid {
			gantt.RatioBarToLaneHeight = gantt.RatioBarToLaneHeight_Data.Float64
		}

		if gantt.YTopMargin_Data.Valid {
			gantt.YTopMargin = gantt.YTopMargin_Data.Float64
		}

		if gantt.XLeftText_Data.Valid {
			gantt.XLeftText = gantt.XLeftText_Data.Float64
		}

		if gantt.TextHeight_Data.Valid {
			gantt.TextHeight = gantt.TextHeight_Data.Float64
		}

		if gantt.XLeftLanes_Data.Valid {
			gantt.XLeftLanes = gantt.XLeftLanes_Data.Float64
		}

		if gantt.XRightMargin_Data.Valid {
			gantt.XRightMargin = gantt.XRightMargin_Data.Float64
		}

		if gantt.TimeLine_Color_Data.Valid {
			gantt.TimeLine_Color = gantt.TimeLine_Color_Data.String
		}

		if gantt.TimeLine_FillOpacity_Data.Valid {
			gantt.TimeLine_FillOpacity = gantt.TimeLine_FillOpacity_Data.Float64
		}

		if gantt.TimeLine_Stroke_Data.Valid {
			gantt.TimeLine_Stroke = gantt.TimeLine_Stroke_Data.String
		}

		if gantt.TimeLine_StrokeWidth_Data.Valid {
			gantt.TimeLine_StrokeWidth = gantt.TimeLine_StrokeWidth_Data.Float64
		}

		if gantt.Group_Stroke_Data.Valid {
			gantt.Group_Stroke = gantt.Group_Stroke_Data.String
		}

		if gantt.Group_StrokeWidth_Data.Valid {
			gantt.Group_StrokeWidth = gantt.Group_StrokeWidth_Data.Float64
		}

		if gantt.Group_StrokeDashArray_Data.Valid {
			gantt.Group_StrokeDashArray = gantt.Group_StrokeDashArray_Data.String
		}

		if gantt.DateYOffset_Data.Valid {
			gantt.DateYOffset = gantt.DateYOffset_Data.Float64
		}

		gantt.AlignOnStartEndOnYearStart = gantt.AlignOnStartEndOnYearStart_Data.Bool

	}

	c.JSON(http.StatusOK, gantts)
}

// PostGantt
//
// swagger:route POST /gantts gantts postGantt
//
// Creates a gantt
//     Consumes:
//     - application/json
//
//     Produces:
//     - application/json
//
//     Responses:
//       200: ganttDBResponse
func PostGantt(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Validate input
	var input orm.GanttAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create gantt
	ganttDB := orm.GanttDB{}
	ganttDB.GanttAPI = input
	// insertion point for nullable field set
	ganttDB.Name_Data.String = input.Name
	ganttDB.Name_Data.Valid = true

	ganttDB.Start_Data.Time = input.Start
	ganttDB.Start_Data.Valid = true

	ganttDB.End_Data.Time = input.End
	ganttDB.End_Data.Valid = true

	ganttDB.LaneHeight_Data.Float64 = input.LaneHeight
	ganttDB.LaneHeight_Data.Valid = true

	ganttDB.RatioBarToLaneHeight_Data.Float64 = input.RatioBarToLaneHeight
	ganttDB.RatioBarToLaneHeight_Data.Valid = true

	ganttDB.YTopMargin_Data.Float64 = input.YTopMargin
	ganttDB.YTopMargin_Data.Valid = true

	ganttDB.XLeftText_Data.Float64 = input.XLeftText
	ganttDB.XLeftText_Data.Valid = true

	ganttDB.TextHeight_Data.Float64 = input.TextHeight
	ganttDB.TextHeight_Data.Valid = true

	ganttDB.XLeftLanes_Data.Float64 = input.XLeftLanes
	ganttDB.XLeftLanes_Data.Valid = true

	ganttDB.XRightMargin_Data.Float64 = input.XRightMargin
	ganttDB.XRightMargin_Data.Valid = true

	ganttDB.TimeLine_Color_Data.String = input.TimeLine_Color
	ganttDB.TimeLine_Color_Data.Valid = true

	ganttDB.TimeLine_FillOpacity_Data.Float64 = input.TimeLine_FillOpacity
	ganttDB.TimeLine_FillOpacity_Data.Valid = true

	ganttDB.TimeLine_Stroke_Data.String = input.TimeLine_Stroke
	ganttDB.TimeLine_Stroke_Data.Valid = true

	ganttDB.TimeLine_StrokeWidth_Data.Float64 = input.TimeLine_StrokeWidth
	ganttDB.TimeLine_StrokeWidth_Data.Valid = true

	ganttDB.Group_Stroke_Data.String = input.Group_Stroke
	ganttDB.Group_Stroke_Data.Valid = true

	ganttDB.Group_StrokeWidth_Data.Float64 = input.Group_StrokeWidth
	ganttDB.Group_StrokeWidth_Data.Valid = true

	ganttDB.Group_StrokeDashArray_Data.String = input.Group_StrokeDashArray
	ganttDB.Group_StrokeDashArray_Data.Valid = true

	ganttDB.DateYOffset_Data.Float64 = input.DateYOffset
	ganttDB.DateYOffset_Data.Valid = true

	ganttDB.AlignOnStartEndOnYearStart_Data.Bool = input.AlignOnStartEndOnYearStart
	ganttDB.AlignOnStartEndOnYearStart_Data.Valid = true

	query := db.Create(&ganttDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	c.JSON(http.StatusOK, ganttDB)
}

// GetGantt
//
// swagger:route GET /gantts/{ID} gantts getGantt
//
// Gets the details for a gantt.
//
// Responses:
//    default: genericError
//        200: ganttDBResponse
func GetGantt(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get gantt in DB
	var gantt orm.GanttDB
	if err := db.First(&gantt, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// insertion point for fields value set from nullable fields
	if gantt.Name_Data.Valid {
		gantt.Name = gantt.Name_Data.String
	}

	if gantt.Start_Data.Valid {
		gantt.Start = gantt.Start_Data.Time
	}

	if gantt.End_Data.Valid {
		gantt.End = gantt.End_Data.Time
	}

	if gantt.LaneHeight_Data.Valid {
		gantt.LaneHeight = gantt.LaneHeight_Data.Float64
	}

	if gantt.RatioBarToLaneHeight_Data.Valid {
		gantt.RatioBarToLaneHeight = gantt.RatioBarToLaneHeight_Data.Float64
	}

	if gantt.YTopMargin_Data.Valid {
		gantt.YTopMargin = gantt.YTopMargin_Data.Float64
	}

	if gantt.XLeftText_Data.Valid {
		gantt.XLeftText = gantt.XLeftText_Data.Float64
	}

	if gantt.TextHeight_Data.Valid {
		gantt.TextHeight = gantt.TextHeight_Data.Float64
	}

	if gantt.XLeftLanes_Data.Valid {
		gantt.XLeftLanes = gantt.XLeftLanes_Data.Float64
	}

	if gantt.XRightMargin_Data.Valid {
		gantt.XRightMargin = gantt.XRightMargin_Data.Float64
	}

	if gantt.TimeLine_Color_Data.Valid {
		gantt.TimeLine_Color = gantt.TimeLine_Color_Data.String
	}

	if gantt.TimeLine_FillOpacity_Data.Valid {
		gantt.TimeLine_FillOpacity = gantt.TimeLine_FillOpacity_Data.Float64
	}

	if gantt.TimeLine_Stroke_Data.Valid {
		gantt.TimeLine_Stroke = gantt.TimeLine_Stroke_Data.String
	}

	if gantt.TimeLine_StrokeWidth_Data.Valid {
		gantt.TimeLine_StrokeWidth = gantt.TimeLine_StrokeWidth_Data.Float64
	}

	if gantt.Group_Stroke_Data.Valid {
		gantt.Group_Stroke = gantt.Group_Stroke_Data.String
	}

	if gantt.Group_StrokeWidth_Data.Valid {
		gantt.Group_StrokeWidth = gantt.Group_StrokeWidth_Data.Float64
	}

	if gantt.Group_StrokeDashArray_Data.Valid {
		gantt.Group_StrokeDashArray = gantt.Group_StrokeDashArray_Data.String
	}

	if gantt.DateYOffset_Data.Valid {
		gantt.DateYOffset = gantt.DateYOffset_Data.Float64
	}

	gantt.AlignOnStartEndOnYearStart = gantt.AlignOnStartEndOnYearStart_Data.Bool

	c.JSON(http.StatusOK, gantt)
}

// UpdateGantt
//
// swagger:route PATCH /gantts/{ID} gantts updateGantt
//
// Update a gantt
//
// Responses:
//    default: genericError
//        200: ganttDBResponse
func UpdateGantt(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get model if exist
	var ganttDB orm.GanttDB

	// fetch the gantt
	query := db.First(&ganttDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.GanttAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	// insertion point for nullable field set
	input.Name_Data.String = input.Name
	input.Name_Data.Valid = true

	input.Start_Data.Time = input.Start
	input.Start_Data.Valid = true

	input.End_Data.Time = input.End
	input.End_Data.Valid = true

	input.LaneHeight_Data.Float64 = input.LaneHeight
	input.LaneHeight_Data.Valid = true

	input.RatioBarToLaneHeight_Data.Float64 = input.RatioBarToLaneHeight
	input.RatioBarToLaneHeight_Data.Valid = true

	input.YTopMargin_Data.Float64 = input.YTopMargin
	input.YTopMargin_Data.Valid = true

	input.XLeftText_Data.Float64 = input.XLeftText
	input.XLeftText_Data.Valid = true

	input.TextHeight_Data.Float64 = input.TextHeight
	input.TextHeight_Data.Valid = true

	input.XLeftLanes_Data.Float64 = input.XLeftLanes
	input.XLeftLanes_Data.Valid = true

	input.XRightMargin_Data.Float64 = input.XRightMargin
	input.XRightMargin_Data.Valid = true

	input.TimeLine_Color_Data.String = input.TimeLine_Color
	input.TimeLine_Color_Data.Valid = true

	input.TimeLine_FillOpacity_Data.Float64 = input.TimeLine_FillOpacity
	input.TimeLine_FillOpacity_Data.Valid = true

	input.TimeLine_Stroke_Data.String = input.TimeLine_Stroke
	input.TimeLine_Stroke_Data.Valid = true

	input.TimeLine_StrokeWidth_Data.Float64 = input.TimeLine_StrokeWidth
	input.TimeLine_StrokeWidth_Data.Valid = true

	input.Group_Stroke_Data.String = input.Group_Stroke
	input.Group_Stroke_Data.Valid = true

	input.Group_StrokeWidth_Data.Float64 = input.Group_StrokeWidth
	input.Group_StrokeWidth_Data.Valid = true

	input.Group_StrokeDashArray_Data.String = input.Group_StrokeDashArray
	input.Group_StrokeDashArray_Data.Valid = true

	input.DateYOffset_Data.Float64 = input.DateYOffset
	input.DateYOffset_Data.Valid = true

	input.AlignOnStartEndOnYearStart_Data.Bool = input.AlignOnStartEndOnYearStart
	input.AlignOnStartEndOnYearStart_Data.Valid = true

	query = db.Model(&ganttDB).Updates(input)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	// return status OK with the marshalling of the the ganttDB
	c.JSON(http.StatusOK, ganttDB)
}

// DeleteGantt
//
// swagger:route DELETE /gantts/{ID} gantts deleteGantt
//
// Delete a gantt
//
// Responses:
//    default: genericError
func DeleteGantt(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get model if exist
	var ganttDB orm.GanttDB
	if err := db.First(&ganttDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&ganttDB)

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
