// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"net/http"
	"time"

	"github.com/fullstack-lang/gonggantt/go/models"
	"github.com/fullstack-lang/gonggantt/go/orm"

	"github.com/gin-gonic/gin"
)

// declaration in order to justify use of the models import
var __Gantt__dummysDeclaration__ models.Gantt
var __Gantt_time__dummyDeclaration time.Duration

// An GanttID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getGantt updateGantt deleteGantt
type GanttID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// GanttInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postGantt updateGantt
type GanttInput struct {
	// The Gantt to submit or modify
	// in: body
	Gantt *orm.GanttAPI
}

// GetGantts
//
// swagger:route GET /gantts gantts getGantts
//
// Get all gantts
//
// Responses:
//    default: genericError
//        200: ganttDBsResponse
func GetGantts(c *gin.Context) {
	db := orm.BackRepo.BackRepoGantt.GetDB()
	
	// source slice
	var ganttDBs []orm.GanttDB
	query := db.Find(&ganttDBs)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// slice that will be transmitted to the front
	ganttAPIs := make([]orm.GanttAPI, 0)

	// for each gantt, update fields from the database nullable fields
	for idx := range ganttDBs {
		ganttDB := &ganttDBs[idx]
		_ = ganttDB
		var ganttAPI orm.GanttAPI

		// insertion point for updating fields
		ganttAPI.ID = ganttDB.ID
		ganttDB.CopyBasicFieldsToGantt(&ganttAPI.Gantt)
		ganttAPI.GanttPointersEnconding = ganttDB.GanttPointersEnconding
		ganttAPIs = append(ganttAPIs, ganttAPI)
	}

	c.JSON(http.StatusOK, ganttAPIs)
}

// PostGantt
//
// swagger:route POST /gantts gantts postGantt
//
// Creates a gantt
//     Consumes:
//     - application/json
//
//     Produces:
//     - application/json
//
//     Responses:
//       200: ganttDBResponse
func PostGantt(c *gin.Context) {
	db := orm.BackRepo.BackRepoGantt.GetDB()

	// Validate input
	var input orm.GanttAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create gantt
	ganttDB := orm.GanttDB{}
	ganttDB.GanttPointersEnconding = input.GanttPointersEnconding
	ganttDB.CopyBasicFieldsFromGantt(&input.Gantt)

	query := db.Create(&ganttDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, ganttDB)
}

// GetGantt
//
// swagger:route GET /gantts/{ID} gantts getGantt
//
// Gets the details for a gantt.
//
// Responses:
//    default: genericError
//        200: ganttDBResponse
func GetGantt(c *gin.Context) {
	db := orm.BackRepo.BackRepoGantt.GetDB()

	// Get ganttDB in DB
	var ganttDB orm.GanttDB
	if err := db.First(&ganttDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	var ganttAPI orm.GanttAPI
	ganttAPI.ID = ganttDB.ID
	ganttAPI.GanttPointersEnconding = ganttDB.GanttPointersEnconding
	ganttDB.CopyBasicFieldsToGantt(&ganttAPI.Gantt)

	c.JSON(http.StatusOK, ganttAPI)
}

// UpdateGantt
//
// swagger:route PATCH /gantts/{ID} gantts updateGantt
//
// Update a gantt
//
// Responses:
//    default: genericError
//        200: ganttDBResponse
func UpdateGantt(c *gin.Context) {
	db := orm.BackRepo.BackRepoGantt.GetDB()

	// Get model if exist
	var ganttDB orm.GanttDB

	// fetch the gantt
	query := db.First(&ganttDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.GanttAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	ganttDB.CopyBasicFieldsFromGantt(&input.Gantt)
	ganttDB.GanttPointersEnconding = input.GanttPointersEnconding

	query = db.Model(&ganttDB).Updates(ganttDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	// return status OK with the marshalling of the the ganttDB
	c.JSON(http.StatusOK, ganttDB)
}

// DeleteGantt
//
// swagger:route DELETE /gantts/{ID} gantts deleteGantt
//
// Delete a gantt
//
// Responses:
//    default: genericError
func DeleteGantt(c *gin.Context) {
	db := orm.BackRepo.BackRepoGantt.GetDB()

	// Get model if exist
	var ganttDB orm.GanttDB
	if err := db.First(&ganttDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&ganttDB)

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
