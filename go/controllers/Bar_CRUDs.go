// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"net/http"
	"time"

	"github.com/fullstack-lang/gonggantt/go/models"
	"github.com/fullstack-lang/gonggantt/go/orm"

	"github.com/gin-gonic/gin"
	"github.com/jinzhu/gorm"
)

// declaration in order to justify use of the models import
var __Bar__dummysDeclaration__ models.Bar
var __Bar_time__dummyDeclaration time.Duration

// An BarID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getBar updateBar deleteBar
type BarID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// BarInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postBar updateBar
type BarInput struct {
	// The Bar to submit or modify
	// in: body
	Bar *orm.BarAPI
}

// GetBars
//
// swagger:route GET /bars bars getBars
//
// Get all bars
//
// Responses:
//    default: genericError
//        200: barDBsResponse
func GetBars(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	var bars []orm.BarDB
	query := db.Find(&bars)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// for each bar, update fields from the database nullable fields
	for idx := range bars {
		bar := &bars[idx]
		_ = bar
		// insertion point for updating fields
		if bar.Name_Data.Valid {
			bar.Name = bar.Name_Data.String
		}

		if bar.Start_Data.Valid {
			bar.Start = bar.Start_Data.Time
		}

		if bar.End_Data.Valid {
			bar.End = bar.End_Data.Time
		}

		if bar.OptionnalColor_Data.Valid {
			bar.OptionnalColor = bar.OptionnalColor_Data.String
		}

		if bar.OptionnalStroke_Data.Valid {
			bar.OptionnalStroke = bar.OptionnalStroke_Data.String
		}

	}

	c.JSON(http.StatusOK, bars)
}

// PostBar
//
// swagger:route POST /bars bars postBar
//
// Creates a bar
//     Consumes:
//     - application/json
//
//     Produces:
//     - application/json
//
//     Responses:
//       200: barDBResponse
func PostBar(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Validate input
	var input orm.BarAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create bar
	barDB := orm.BarDB{}
	barDB.BarAPI = input
	// insertion point for nullable field set
	barDB.Name_Data.String = input.Name
	barDB.Name_Data.Valid = true

	barDB.Start_Data.Time = input.Start
	barDB.Start_Data.Valid = true

	barDB.End_Data.Time = input.End
	barDB.End_Data.Valid = true

	barDB.OptionnalColor_Data.String = input.OptionnalColor
	barDB.OptionnalColor_Data.Valid = true

	barDB.OptionnalStroke_Data.String = input.OptionnalStroke
	barDB.OptionnalStroke_Data.Valid = true

	query := db.Create(&barDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	c.JSON(http.StatusOK, barDB)
}

// GetBar
//
// swagger:route GET /bars/{ID} bars getBar
//
// Gets the details for a bar.
//
// Responses:
//    default: genericError
//        200: barDBResponse
func GetBar(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get bar in DB
	var bar orm.BarDB
	if err := db.First(&bar, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// insertion point for fields value set from nullable fields
	if bar.Name_Data.Valid {
		bar.Name = bar.Name_Data.String
	}

	if bar.Start_Data.Valid {
		bar.Start = bar.Start_Data.Time
	}

	if bar.End_Data.Valid {
		bar.End = bar.End_Data.Time
	}

	if bar.OptionnalColor_Data.Valid {
		bar.OptionnalColor = bar.OptionnalColor_Data.String
	}

	if bar.OptionnalStroke_Data.Valid {
		bar.OptionnalStroke = bar.OptionnalStroke_Data.String
	}

	c.JSON(http.StatusOK, bar)
}

// UpdateBar
//
// swagger:route PATCH /bars/{ID} bars updateBar
//
// Update a bar
//
// Responses:
//    default: genericError
//        200: barDBResponse
func UpdateBar(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get model if exist
	var barDB orm.BarDB

	// fetch the bar
	query := db.First(&barDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.BarAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	// insertion point for nullable field set
	input.Name_Data.String = input.Name
	input.Name_Data.Valid = true

	input.Start_Data.Time = input.Start
	input.Start_Data.Valid = true

	input.End_Data.Time = input.End
	input.End_Data.Valid = true

	input.OptionnalColor_Data.String = input.OptionnalColor
	input.OptionnalColor_Data.Valid = true

	input.OptionnalStroke_Data.String = input.OptionnalStroke
	input.OptionnalStroke_Data.Valid = true

	query = db.Model(&barDB).Updates(input)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	// return status OK with the marshalling of the the barDB
	c.JSON(http.StatusOK, barDB)
}

// DeleteBar
//
// swagger:route DELETE /bars/{ID} bars deleteBar
//
// Delete a bar
//
// Responses:
//    default: genericError
func DeleteBar(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get model if exist
	var barDB orm.BarDB
	if err := db.First(&barDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&barDB)

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
