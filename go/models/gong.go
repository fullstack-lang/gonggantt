// generated by ModelGongFileTemplate
package models

import (
	"fmt"
	"log"
	"os"
	"sort"
	"strings"
)

// swagger:ignore
type __void struct{}

// needed for creating set of instances in the stage
var __member __void

// StageStruct enables storage of staged instances
// swagger:ignore
type StageStruct struct { // insertion point for definition of arrays registering instances
	Arrows           map[*Arrow]struct{}
	Arrows_mapString map[string]*Arrow

	Bars           map[*Bar]struct{}
	Bars_mapString map[string]*Bar

	Gantts           map[*Gantt]struct{}
	Gantts_mapString map[string]*Gantt

	Groups           map[*Group]struct{}
	Groups_mapString map[string]*Group

	Lanes           map[*Lane]struct{}
	Lanes_mapString map[string]*Lane

	Milestones           map[*Milestone]struct{}
	Milestones_mapString map[string]*Milestone

	AllModelsStructCreateCallback AllModelsStructCreateInterface

	AllModelsStructDeleteCallback AllModelsStructDeleteInterface

	BackRepo BackRepoInterface

	// if set will be called before each commit to the back repo
	OnInitCommitCallback OnInitCommitInterface
}

type OnInitCommitInterface interface {
	BeforeCommit(stage *StageStruct)
}

type BackRepoInterface interface {
	Commit(stage *StageStruct)
	Checkout(stage *StageStruct)
	Backup(stage *StageStruct, dirPath string)
	Restore(stage *StageStruct, dirPath string)
	BackupXL(stage *StageStruct, dirPath string)
	RestoreXL(stage *StageStruct, dirPath string)
	// insertion point for Commit and Checkout signatures
	CommitArrow(arrow *Arrow)
	CheckoutArrow(arrow *Arrow)
	CommitBar(bar *Bar)
	CheckoutBar(bar *Bar)
	CommitGantt(gantt *Gantt)
	CheckoutGantt(gantt *Gantt)
	CommitGroup(group *Group)
	CheckoutGroup(group *Group)
	CommitLane(lane *Lane)
	CheckoutLane(lane *Lane)
	CommitMilestone(milestone *Milestone)
	CheckoutMilestone(milestone *Milestone)
	GetLastCommitNb() uint
	GetLastPushFromFrontNb() uint
}

// swagger:ignore instructs the gong compiler (gongc) to avoid this particular struct
var Stage StageStruct = StageStruct{ // insertion point for array initiatialisation
	Arrows:           make(map[*Arrow]struct{}),
	Arrows_mapString: make(map[string]*Arrow),

	Bars:           make(map[*Bar]struct{}),
	Bars_mapString: make(map[string]*Bar),

	Gantts:           make(map[*Gantt]struct{}),
	Gantts_mapString: make(map[string]*Gantt),

	Groups:           make(map[*Group]struct{}),
	Groups_mapString: make(map[string]*Group),

	Lanes:           make(map[*Lane]struct{}),
	Lanes_mapString: make(map[string]*Lane),

	Milestones:           make(map[*Milestone]struct{}),
	Milestones_mapString: make(map[string]*Milestone),

	// end of insertion point
}

func (stage *StageStruct) Commit() {
	if stage.BackRepo != nil {
		stage.BackRepo.Commit(stage)
	}
}

func (stage *StageStruct) Checkout() {
	if stage.BackRepo != nil {
		stage.BackRepo.Checkout(stage)
	}
}

// backup generates backup files in the dirPath
func (stage *StageStruct) Backup(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.Backup(stage, dirPath)
	}
}

// Restore resets Stage & BackRepo and restores their content from the restore files in dirPath
func (stage *StageStruct) Restore(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.Restore(stage, dirPath)
	}
}

// backup generates backup files in the dirPath
func (stage *StageStruct) BackupXL(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.BackupXL(stage, dirPath)
	}
}

// Restore resets Stage & BackRepo and restores their content from the restore files in dirPath
func (stage *StageStruct) RestoreXL(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.RestoreXL(stage, dirPath)
	}
}

// insertion point for cumulative sub template with model space calls
func (stage *StageStruct) getArrowOrderedStructWithNameField() []*Arrow {
	// have alphabetical order generation
	arrowOrdered := []*Arrow{}
	for arrow := range stage.Arrows {
		arrowOrdered = append(arrowOrdered, arrow)
	}
	sort.Slice(arrowOrdered[:], func(i, j int) bool {
		return arrowOrdered[i].Name < arrowOrdered[j].Name
	})
	return arrowOrdered
}

// Stage puts arrow to the model stage
func (arrow *Arrow) Stage() *Arrow {
	Stage.Arrows[arrow] = __member
	Stage.Arrows_mapString[arrow.Name] = arrow

	return arrow
}

// Unstage removes arrow off the model stage
func (arrow *Arrow) Unstage() *Arrow {
	delete(Stage.Arrows, arrow)
	delete(Stage.Arrows_mapString, arrow.Name)
	return arrow
}

// commit arrow to the back repo (if it is already staged)
func (arrow *Arrow) Commit() *Arrow {
	if _, ok := Stage.Arrows[arrow]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitArrow(arrow)
		}
	}
	return arrow
}

// Checkout arrow to the back repo (if it is already staged)
func (arrow *Arrow) Checkout() *Arrow {
	if _, ok := Stage.Arrows[arrow]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutArrow(arrow)
		}
	}
	return arrow
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of arrow to the model stage
func (arrow *Arrow) StageCopy() *Arrow {
	_arrow := new(Arrow)
	*_arrow = *arrow
	_arrow.Stage()
	return _arrow
}

// StageAndCommit appends arrow to the model stage and commit to the orm repo
func (arrow *Arrow) StageAndCommit() *Arrow {
	arrow.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMArrow(arrow)
	}
	return arrow
}

// DeleteStageAndCommit appends arrow to the model stage and commit to the orm repo
func (arrow *Arrow) DeleteStageAndCommit() *Arrow {
	arrow.Unstage()
	DeleteORMArrow(arrow)
	return arrow
}

// StageCopyAndCommit appends a copy of arrow to the model stage and commit to the orm repo
func (arrow *Arrow) StageCopyAndCommit() *Arrow {
	_arrow := new(Arrow)
	*_arrow = *arrow
	_arrow.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMArrow(arrow)
	}
	return _arrow
}

// CreateORMArrow enables dynamic staging of a Arrow instance
func CreateORMArrow(arrow *Arrow) {
	arrow.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMArrow(arrow)
	}
}

// DeleteORMArrow enables dynamic staging of a Arrow instance
func DeleteORMArrow(arrow *Arrow) {
	arrow.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMArrow(arrow)
	}
}

func (stage *StageStruct) getBarOrderedStructWithNameField() []*Bar {
	// have alphabetical order generation
	barOrdered := []*Bar{}
	for bar := range stage.Bars {
		barOrdered = append(barOrdered, bar)
	}
	sort.Slice(barOrdered[:], func(i, j int) bool {
		return barOrdered[i].Name < barOrdered[j].Name
	})
	return barOrdered
}

// Stage puts bar to the model stage
func (bar *Bar) Stage() *Bar {
	Stage.Bars[bar] = __member
	Stage.Bars_mapString[bar.Name] = bar

	return bar
}

// Unstage removes bar off the model stage
func (bar *Bar) Unstage() *Bar {
	delete(Stage.Bars, bar)
	delete(Stage.Bars_mapString, bar.Name)
	return bar
}

// commit bar to the back repo (if it is already staged)
func (bar *Bar) Commit() *Bar {
	if _, ok := Stage.Bars[bar]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitBar(bar)
		}
	}
	return bar
}

// Checkout bar to the back repo (if it is already staged)
func (bar *Bar) Checkout() *Bar {
	if _, ok := Stage.Bars[bar]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutBar(bar)
		}
	}
	return bar
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of bar to the model stage
func (bar *Bar) StageCopy() *Bar {
	_bar := new(Bar)
	*_bar = *bar
	_bar.Stage()
	return _bar
}

// StageAndCommit appends bar to the model stage and commit to the orm repo
func (bar *Bar) StageAndCommit() *Bar {
	bar.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMBar(bar)
	}
	return bar
}

// DeleteStageAndCommit appends bar to the model stage and commit to the orm repo
func (bar *Bar) DeleteStageAndCommit() *Bar {
	bar.Unstage()
	DeleteORMBar(bar)
	return bar
}

// StageCopyAndCommit appends a copy of bar to the model stage and commit to the orm repo
func (bar *Bar) StageCopyAndCommit() *Bar {
	_bar := new(Bar)
	*_bar = *bar
	_bar.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMBar(bar)
	}
	return _bar
}

// CreateORMBar enables dynamic staging of a Bar instance
func CreateORMBar(bar *Bar) {
	bar.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMBar(bar)
	}
}

// DeleteORMBar enables dynamic staging of a Bar instance
func DeleteORMBar(bar *Bar) {
	bar.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMBar(bar)
	}
}

func (stage *StageStruct) getGanttOrderedStructWithNameField() []*Gantt {
	// have alphabetical order generation
	ganttOrdered := []*Gantt{}
	for gantt := range stage.Gantts {
		ganttOrdered = append(ganttOrdered, gantt)
	}
	sort.Slice(ganttOrdered[:], func(i, j int) bool {
		return ganttOrdered[i].Name < ganttOrdered[j].Name
	})
	return ganttOrdered
}

// Stage puts gantt to the model stage
func (gantt *Gantt) Stage() *Gantt {
	Stage.Gantts[gantt] = __member
	Stage.Gantts_mapString[gantt.Name] = gantt

	return gantt
}

// Unstage removes gantt off the model stage
func (gantt *Gantt) Unstage() *Gantt {
	delete(Stage.Gantts, gantt)
	delete(Stage.Gantts_mapString, gantt.Name)
	return gantt
}

// commit gantt to the back repo (if it is already staged)
func (gantt *Gantt) Commit() *Gantt {
	if _, ok := Stage.Gantts[gantt]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitGantt(gantt)
		}
	}
	return gantt
}

// Checkout gantt to the back repo (if it is already staged)
func (gantt *Gantt) Checkout() *Gantt {
	if _, ok := Stage.Gantts[gantt]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutGantt(gantt)
		}
	}
	return gantt
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of gantt to the model stage
func (gantt *Gantt) StageCopy() *Gantt {
	_gantt := new(Gantt)
	*_gantt = *gantt
	_gantt.Stage()
	return _gantt
}

// StageAndCommit appends gantt to the model stage and commit to the orm repo
func (gantt *Gantt) StageAndCommit() *Gantt {
	gantt.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMGantt(gantt)
	}
	return gantt
}

// DeleteStageAndCommit appends gantt to the model stage and commit to the orm repo
func (gantt *Gantt) DeleteStageAndCommit() *Gantt {
	gantt.Unstage()
	DeleteORMGantt(gantt)
	return gantt
}

// StageCopyAndCommit appends a copy of gantt to the model stage and commit to the orm repo
func (gantt *Gantt) StageCopyAndCommit() *Gantt {
	_gantt := new(Gantt)
	*_gantt = *gantt
	_gantt.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMGantt(gantt)
	}
	return _gantt
}

// CreateORMGantt enables dynamic staging of a Gantt instance
func CreateORMGantt(gantt *Gantt) {
	gantt.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMGantt(gantt)
	}
}

// DeleteORMGantt enables dynamic staging of a Gantt instance
func DeleteORMGantt(gantt *Gantt) {
	gantt.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMGantt(gantt)
	}
}

func (stage *StageStruct) getGroupOrderedStructWithNameField() []*Group {
	// have alphabetical order generation
	groupOrdered := []*Group{}
	for group := range stage.Groups {
		groupOrdered = append(groupOrdered, group)
	}
	sort.Slice(groupOrdered[:], func(i, j int) bool {
		return groupOrdered[i].Name < groupOrdered[j].Name
	})
	return groupOrdered
}

// Stage puts group to the model stage
func (group *Group) Stage() *Group {
	Stage.Groups[group] = __member
	Stage.Groups_mapString[group.Name] = group

	return group
}

// Unstage removes group off the model stage
func (group *Group) Unstage() *Group {
	delete(Stage.Groups, group)
	delete(Stage.Groups_mapString, group.Name)
	return group
}

// commit group to the back repo (if it is already staged)
func (group *Group) Commit() *Group {
	if _, ok := Stage.Groups[group]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitGroup(group)
		}
	}
	return group
}

// Checkout group to the back repo (if it is already staged)
func (group *Group) Checkout() *Group {
	if _, ok := Stage.Groups[group]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutGroup(group)
		}
	}
	return group
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of group to the model stage
func (group *Group) StageCopy() *Group {
	_group := new(Group)
	*_group = *group
	_group.Stage()
	return _group
}

// StageAndCommit appends group to the model stage and commit to the orm repo
func (group *Group) StageAndCommit() *Group {
	group.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMGroup(group)
	}
	return group
}

// DeleteStageAndCommit appends group to the model stage and commit to the orm repo
func (group *Group) DeleteStageAndCommit() *Group {
	group.Unstage()
	DeleteORMGroup(group)
	return group
}

// StageCopyAndCommit appends a copy of group to the model stage and commit to the orm repo
func (group *Group) StageCopyAndCommit() *Group {
	_group := new(Group)
	*_group = *group
	_group.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMGroup(group)
	}
	return _group
}

// CreateORMGroup enables dynamic staging of a Group instance
func CreateORMGroup(group *Group) {
	group.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMGroup(group)
	}
}

// DeleteORMGroup enables dynamic staging of a Group instance
func DeleteORMGroup(group *Group) {
	group.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMGroup(group)
	}
}

func (stage *StageStruct) getLaneOrderedStructWithNameField() []*Lane {
	// have alphabetical order generation
	laneOrdered := []*Lane{}
	for lane := range stage.Lanes {
		laneOrdered = append(laneOrdered, lane)
	}
	sort.Slice(laneOrdered[:], func(i, j int) bool {
		return laneOrdered[i].Name < laneOrdered[j].Name
	})
	return laneOrdered
}

// Stage puts lane to the model stage
func (lane *Lane) Stage() *Lane {
	Stage.Lanes[lane] = __member
	Stage.Lanes_mapString[lane.Name] = lane

	return lane
}

// Unstage removes lane off the model stage
func (lane *Lane) Unstage() *Lane {
	delete(Stage.Lanes, lane)
	delete(Stage.Lanes_mapString, lane.Name)
	return lane
}

// commit lane to the back repo (if it is already staged)
func (lane *Lane) Commit() *Lane {
	if _, ok := Stage.Lanes[lane]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitLane(lane)
		}
	}
	return lane
}

// Checkout lane to the back repo (if it is already staged)
func (lane *Lane) Checkout() *Lane {
	if _, ok := Stage.Lanes[lane]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutLane(lane)
		}
	}
	return lane
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of lane to the model stage
func (lane *Lane) StageCopy() *Lane {
	_lane := new(Lane)
	*_lane = *lane
	_lane.Stage()
	return _lane
}

// StageAndCommit appends lane to the model stage and commit to the orm repo
func (lane *Lane) StageAndCommit() *Lane {
	lane.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMLane(lane)
	}
	return lane
}

// DeleteStageAndCommit appends lane to the model stage and commit to the orm repo
func (lane *Lane) DeleteStageAndCommit() *Lane {
	lane.Unstage()
	DeleteORMLane(lane)
	return lane
}

// StageCopyAndCommit appends a copy of lane to the model stage and commit to the orm repo
func (lane *Lane) StageCopyAndCommit() *Lane {
	_lane := new(Lane)
	*_lane = *lane
	_lane.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMLane(lane)
	}
	return _lane
}

// CreateORMLane enables dynamic staging of a Lane instance
func CreateORMLane(lane *Lane) {
	lane.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMLane(lane)
	}
}

// DeleteORMLane enables dynamic staging of a Lane instance
func DeleteORMLane(lane *Lane) {
	lane.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMLane(lane)
	}
}

func (stage *StageStruct) getMilestoneOrderedStructWithNameField() []*Milestone {
	// have alphabetical order generation
	milestoneOrdered := []*Milestone{}
	for milestone := range stage.Milestones {
		milestoneOrdered = append(milestoneOrdered, milestone)
	}
	sort.Slice(milestoneOrdered[:], func(i, j int) bool {
		return milestoneOrdered[i].Name < milestoneOrdered[j].Name
	})
	return milestoneOrdered
}

// Stage puts milestone to the model stage
func (milestone *Milestone) Stage() *Milestone {
	Stage.Milestones[milestone] = __member
	Stage.Milestones_mapString[milestone.Name] = milestone

	return milestone
}

// Unstage removes milestone off the model stage
func (milestone *Milestone) Unstage() *Milestone {
	delete(Stage.Milestones, milestone)
	delete(Stage.Milestones_mapString, milestone.Name)
	return milestone
}

// commit milestone to the back repo (if it is already staged)
func (milestone *Milestone) Commit() *Milestone {
	if _, ok := Stage.Milestones[milestone]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitMilestone(milestone)
		}
	}
	return milestone
}

// Checkout milestone to the back repo (if it is already staged)
func (milestone *Milestone) Checkout() *Milestone {
	if _, ok := Stage.Milestones[milestone]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutMilestone(milestone)
		}
	}
	return milestone
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of milestone to the model stage
func (milestone *Milestone) StageCopy() *Milestone {
	_milestone := new(Milestone)
	*_milestone = *milestone
	_milestone.Stage()
	return _milestone
}

// StageAndCommit appends milestone to the model stage and commit to the orm repo
func (milestone *Milestone) StageAndCommit() *Milestone {
	milestone.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMMilestone(milestone)
	}
	return milestone
}

// DeleteStageAndCommit appends milestone to the model stage and commit to the orm repo
func (milestone *Milestone) DeleteStageAndCommit() *Milestone {
	milestone.Unstage()
	DeleteORMMilestone(milestone)
	return milestone
}

// StageCopyAndCommit appends a copy of milestone to the model stage and commit to the orm repo
func (milestone *Milestone) StageCopyAndCommit() *Milestone {
	_milestone := new(Milestone)
	*_milestone = *milestone
	_milestone.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMMilestone(milestone)
	}
	return _milestone
}

// CreateORMMilestone enables dynamic staging of a Milestone instance
func CreateORMMilestone(milestone *Milestone) {
	milestone.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMMilestone(milestone)
	}
}

// DeleteORMMilestone enables dynamic staging of a Milestone instance
func DeleteORMMilestone(milestone *Milestone) {
	milestone.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMMilestone(milestone)
	}
}

// swagger:ignore
type AllModelsStructCreateInterface interface { // insertion point for Callbacks on creation
	CreateORMArrow(Arrow *Arrow)
	CreateORMBar(Bar *Bar)
	CreateORMGantt(Gantt *Gantt)
	CreateORMGroup(Group *Group)
	CreateORMLane(Lane *Lane)
	CreateORMMilestone(Milestone *Milestone)
}

type AllModelsStructDeleteInterface interface { // insertion point for Callbacks on deletion
	DeleteORMArrow(Arrow *Arrow)
	DeleteORMBar(Bar *Bar)
	DeleteORMGantt(Gantt *Gantt)
	DeleteORMGroup(Group *Group)
	DeleteORMLane(Lane *Lane)
	DeleteORMMilestone(Milestone *Milestone)
}

func (stage *StageStruct) Reset() { // insertion point for array reset
	stage.Arrows = make(map[*Arrow]struct{})
	stage.Arrows_mapString = make(map[string]*Arrow)

	stage.Bars = make(map[*Bar]struct{})
	stage.Bars_mapString = make(map[string]*Bar)

	stage.Gantts = make(map[*Gantt]struct{})
	stage.Gantts_mapString = make(map[string]*Gantt)

	stage.Groups = make(map[*Group]struct{})
	stage.Groups_mapString = make(map[string]*Group)

	stage.Lanes = make(map[*Lane]struct{})
	stage.Lanes_mapString = make(map[string]*Lane)

	stage.Milestones = make(map[*Milestone]struct{})
	stage.Milestones_mapString = make(map[string]*Milestone)

}

func (stage *StageStruct) Nil() { // insertion point for array nil
	stage.Arrows = nil
	stage.Arrows_mapString = nil

	stage.Bars = nil
	stage.Bars_mapString = nil

	stage.Gantts = nil
	stage.Gantts_mapString = nil

	stage.Groups = nil
	stage.Groups_mapString = nil

	stage.Lanes = nil
	stage.Lanes_mapString = nil

	stage.Milestones = nil
	stage.Milestones_mapString = nil

}

const marshallRes = `package {{PackageName}}

import (
	"time"

	"{{ModelsPackageName}}"
)

var __Dummy_time_variable time.Time

func Unmarshall(stage *models.StageStruct) {

	// map of identifiers{{Identifiers}}

	// initializers of values{{ValueInitializers}}

	// initializers of pointers{{PointersInitializers}}
}

`

const IdentifiersDecls = `
	{{Identifier}} := (&models.{{GeneratedStructName}}{ Name : "{{GeneratedFieldNameValue}}"}).Stage()`

const StringInitStatement = `
	{{Identifier}}.{{GeneratedFieldName}} = "{{GeneratedFieldNameValue}}"`

const NumberInitStatement = `
	{{Identifier}}.{{GeneratedFieldName}} = {{GeneratedFieldNameValue}}`

const PointerFieldInitStatement = `
	{{Identifier}}.{{GeneratedFieldName}} = {{GeneratedFieldNameValue}}`

const SliceOfPointersFieldInitStatement = `
	{{Identifier}}.{{GeneratedFieldName}} = append({{Identifier}}.{{GeneratedFieldName}}, {{GeneratedFieldNameValue}})`

const TimeInitStatement = `
	{{Identifier}}.{{GeneratedFieldName}}, _ = time.Parse("2006-01-02 15:04:05.999999999 -0700 MST", "{{GeneratedFieldNameValue}}")`

// Marshall marshall the stage content into the file as an instanciation into a stage
func (stage *StageStruct) Marshall(file *os.File, modelsPackageName, packageName string) {

	name := file.Name()

	log.Println("filename of marshall output  is " + name)

	res := marshallRes
	res = strings.ReplaceAll(res, "{{PackageName}}", packageName)
	res = strings.ReplaceAll(res, "{{ModelsPackageName}}", modelsPackageName)

	// map of identifiers
	// var StageMapDstructIds map[*Dstruct]string
	identifiersDecl := ""
	initializerStatements := ""
	pointersInitializesStatements := ""

	id := ""
	decl := ""
	setValueField := ""

	// insertion initialization of objects to stage
	map_Arrow_Identifiers := make(map[*Arrow]string)
	_ = map_Arrow_Identifiers

	arrowOrdered := []*Arrow{}
	for arrow := range stage.Arrows {
		arrowOrdered = append(arrowOrdered, arrow)
	}
	sort.Slice(arrowOrdered[:], func(i, j int) bool {
		return arrowOrdered[i].Name < arrowOrdered[j].Name
	})
	identifiersDecl += fmt.Sprintf("\n\n	// Declarations of staged instances of Arrow")
	for idx, arrow := range arrowOrdered {

		id = generatesIdentifier("Arrow", idx, arrow.Name)
		map_Arrow_Identifiers[arrow] = id

		decl = IdentifiersDecls
		decl = strings.ReplaceAll(decl, "{{Identifier}}", id)
		decl = strings.ReplaceAll(decl, "{{GeneratedStructName}}", "Arrow")
		decl = strings.ReplaceAll(decl, "{{GeneratedFieldNameValue}}", arrow.Name)
		identifiersDecl += decl

		initializerStatements += fmt.Sprintf("\n\n	// Init Arrow values %s", arrow.Name)
		// Initialisation of values
		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Name")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(arrow.Name))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "OptionnalColor")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(arrow.OptionnalColor))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "OptionnalStroke")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(arrow.OptionnalStroke))
		initializerStatements += setValueField

	}

	map_Bar_Identifiers := make(map[*Bar]string)
	_ = map_Bar_Identifiers

	barOrdered := []*Bar{}
	for bar := range stage.Bars {
		barOrdered = append(barOrdered, bar)
	}
	sort.Slice(barOrdered[:], func(i, j int) bool {
		return barOrdered[i].Name < barOrdered[j].Name
	})
	identifiersDecl += fmt.Sprintf("\n\n	// Declarations of staged instances of Bar")
	for idx, bar := range barOrdered {

		id = generatesIdentifier("Bar", idx, bar.Name)
		map_Bar_Identifiers[bar] = id

		decl = IdentifiersDecls
		decl = strings.ReplaceAll(decl, "{{Identifier}}", id)
		decl = strings.ReplaceAll(decl, "{{GeneratedStructName}}", "Bar")
		decl = strings.ReplaceAll(decl, "{{GeneratedFieldNameValue}}", bar.Name)
		identifiersDecl += decl

		initializerStatements += fmt.Sprintf("\n\n	// Init Bar values %s", bar.Name)
		// Initialisation of values
		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Name")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(bar.Name))
		initializerStatements += setValueField

		setValueField = TimeInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Start")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", bar.Start.String())
		initializerStatements += setValueField


		setValueField = TimeInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "End")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", bar.End.String())
		initializerStatements += setValueField


		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "OptionnalColor")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(bar.OptionnalColor))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "OptionnalStroke")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(bar.OptionnalStroke))
		initializerStatements += setValueField

	}

	map_Gantt_Identifiers := make(map[*Gantt]string)
	_ = map_Gantt_Identifiers

	ganttOrdered := []*Gantt{}
	for gantt := range stage.Gantts {
		ganttOrdered = append(ganttOrdered, gantt)
	}
	sort.Slice(ganttOrdered[:], func(i, j int) bool {
		return ganttOrdered[i].Name < ganttOrdered[j].Name
	})
	identifiersDecl += fmt.Sprintf("\n\n	// Declarations of staged instances of Gantt")
	for idx, gantt := range ganttOrdered {

		id = generatesIdentifier("Gantt", idx, gantt.Name)
		map_Gantt_Identifiers[gantt] = id

		decl = IdentifiersDecls
		decl = strings.ReplaceAll(decl, "{{Identifier}}", id)
		decl = strings.ReplaceAll(decl, "{{GeneratedStructName}}", "Gantt")
		decl = strings.ReplaceAll(decl, "{{GeneratedFieldNameValue}}", gantt.Name)
		identifiersDecl += decl

		initializerStatements += fmt.Sprintf("\n\n	// Init Gantt values %s", gantt.Name)
		// Initialisation of values
		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Name")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(gantt.Name))
		initializerStatements += setValueField

		setValueField = TimeInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Start")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", gantt.Start.String())
		initializerStatements += setValueField


		setValueField = TimeInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "End")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", gantt.End.String())
		initializerStatements += setValueField


		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "LaneHeight")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", gantt.LaneHeight))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "RatioBarToLaneHeight")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", gantt.RatioBarToLaneHeight))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "YTopMargin")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", gantt.YTopMargin))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "XLeftText")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", gantt.XLeftText))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "TextHeight")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", gantt.TextHeight))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "XLeftLanes")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", gantt.XLeftLanes))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "XRightMargin")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", gantt.XRightMargin))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "ArrowLengthToTheRightOfStartBar")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", gantt.ArrowLengthToTheRightOfStartBar))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "ArrowTipLenght")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", gantt.ArrowTipLenght))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "TimeLine_Color")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(gantt.TimeLine_Color))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "TimeLine_FillOpacity")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", gantt.TimeLine_FillOpacity))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "TimeLine_Stroke")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(gantt.TimeLine_Stroke))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "TimeLine_StrokeWidth")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", gantt.TimeLine_StrokeWidth))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Group_Stroke")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(gantt.Group_Stroke))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Group_StrokeWidth")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", gantt.Group_StrokeWidth))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Group_StrokeDashArray")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(gantt.Group_StrokeDashArray))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "DateYOffset")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", gantt.DateYOffset))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "AlignOnStartEndOnYearStart")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%t", gantt.AlignOnStartEndOnYearStart))
		initializerStatements += setValueField

	}

	map_Group_Identifiers := make(map[*Group]string)
	_ = map_Group_Identifiers

	groupOrdered := []*Group{}
	for group := range stage.Groups {
		groupOrdered = append(groupOrdered, group)
	}
	sort.Slice(groupOrdered[:], func(i, j int) bool {
		return groupOrdered[i].Name < groupOrdered[j].Name
	})
	identifiersDecl += fmt.Sprintf("\n\n	// Declarations of staged instances of Group")
	for idx, group := range groupOrdered {

		id = generatesIdentifier("Group", idx, group.Name)
		map_Group_Identifiers[group] = id

		decl = IdentifiersDecls
		decl = strings.ReplaceAll(decl, "{{Identifier}}", id)
		decl = strings.ReplaceAll(decl, "{{GeneratedStructName}}", "Group")
		decl = strings.ReplaceAll(decl, "{{GeneratedFieldNameValue}}", group.Name)
		identifiersDecl += decl

		initializerStatements += fmt.Sprintf("\n\n	// Init Group values %s", group.Name)
		// Initialisation of values
		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Name")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(group.Name))
		initializerStatements += setValueField

	}

	map_Lane_Identifiers := make(map[*Lane]string)
	_ = map_Lane_Identifiers

	laneOrdered := []*Lane{}
	for lane := range stage.Lanes {
		laneOrdered = append(laneOrdered, lane)
	}
	sort.Slice(laneOrdered[:], func(i, j int) bool {
		return laneOrdered[i].Name < laneOrdered[j].Name
	})
	identifiersDecl += fmt.Sprintf("\n\n	// Declarations of staged instances of Lane")
	for idx, lane := range laneOrdered {

		id = generatesIdentifier("Lane", idx, lane.Name)
		map_Lane_Identifiers[lane] = id

		decl = IdentifiersDecls
		decl = strings.ReplaceAll(decl, "{{Identifier}}", id)
		decl = strings.ReplaceAll(decl, "{{GeneratedStructName}}", "Lane")
		decl = strings.ReplaceAll(decl, "{{GeneratedFieldNameValue}}", lane.Name)
		identifiersDecl += decl

		initializerStatements += fmt.Sprintf("\n\n	// Init Lane values %s", lane.Name)
		// Initialisation of values
		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Name")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(lane.Name))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Order")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%d", lane.Order))
		initializerStatements += setValueField

	}

	map_Milestone_Identifiers := make(map[*Milestone]string)
	_ = map_Milestone_Identifiers

	milestoneOrdered := []*Milestone{}
	for milestone := range stage.Milestones {
		milestoneOrdered = append(milestoneOrdered, milestone)
	}
	sort.Slice(milestoneOrdered[:], func(i, j int) bool {
		return milestoneOrdered[i].Name < milestoneOrdered[j].Name
	})
	identifiersDecl += fmt.Sprintf("\n\n	// Declarations of staged instances of Milestone")
	for idx, milestone := range milestoneOrdered {

		id = generatesIdentifier("Milestone", idx, milestone.Name)
		map_Milestone_Identifiers[milestone] = id

		decl = IdentifiersDecls
		decl = strings.ReplaceAll(decl, "{{Identifier}}", id)
		decl = strings.ReplaceAll(decl, "{{GeneratedStructName}}", "Milestone")
		decl = strings.ReplaceAll(decl, "{{GeneratedFieldNameValue}}", milestone.Name)
		identifiersDecl += decl

		initializerStatements += fmt.Sprintf("\n\n	// Init Milestone values %s", milestone.Name)
		// Initialisation of values
		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Name")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(milestone.Name))
		initializerStatements += setValueField

		setValueField = TimeInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Date")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", milestone.Date.String())
		initializerStatements += setValueField


	}


	// insertion initialization of objects to stage
	for idx, arrow := range arrowOrdered {
		var setPointerField string
		_ = setPointerField

		id = generatesIdentifier("Arrow", idx, arrow.Name)
		map_Arrow_Identifiers[arrow] = id

		// Initialisation of values
		if arrow.From != nil {
			setPointerField = PointerFieldInitStatement
			setPointerField = strings.ReplaceAll(setPointerField, "{{Identifier}}", id)
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldName}}", "From")
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldNameValue}}", map_Bar_Identifiers[arrow.From])
			pointersInitializesStatements += setPointerField
		}

		if arrow.To != nil {
			setPointerField = PointerFieldInitStatement
			setPointerField = strings.ReplaceAll(setPointerField, "{{Identifier}}", id)
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldName}}", "To")
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldNameValue}}", map_Bar_Identifiers[arrow.To])
			pointersInitializesStatements += setPointerField
		}

	}

	for idx, bar := range barOrdered {
		var setPointerField string
		_ = setPointerField

		id = generatesIdentifier("Bar", idx, bar.Name)
		map_Bar_Identifiers[bar] = id

		// Initialisation of values
	}

	for idx, gantt := range ganttOrdered {
		var setPointerField string
		_ = setPointerField

		id = generatesIdentifier("Gantt", idx, gantt.Name)
		map_Gantt_Identifiers[gantt] = id

		// Initialisation of values
		for _, _lane := range gantt.Lanes {
			setPointerField = SliceOfPointersFieldInitStatement
			setPointerField = strings.ReplaceAll(setPointerField, "{{Identifier}}", id)
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldName}}", "Lanes")
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldNameValue}}", map_Lane_Identifiers[_lane])
			pointersInitializesStatements += setPointerField
		}

		for _, _milestone := range gantt.Milestones {
			setPointerField = SliceOfPointersFieldInitStatement
			setPointerField = strings.ReplaceAll(setPointerField, "{{Identifier}}", id)
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldName}}", "Milestones")
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldNameValue}}", map_Milestone_Identifiers[_milestone])
			pointersInitializesStatements += setPointerField
		}

		for _, _group := range gantt.Groups {
			setPointerField = SliceOfPointersFieldInitStatement
			setPointerField = strings.ReplaceAll(setPointerField, "{{Identifier}}", id)
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldName}}", "Groups")
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldNameValue}}", map_Group_Identifiers[_group])
			pointersInitializesStatements += setPointerField
		}

		for _, _arrow := range gantt.Arrows {
			setPointerField = SliceOfPointersFieldInitStatement
			setPointerField = strings.ReplaceAll(setPointerField, "{{Identifier}}", id)
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldName}}", "Arrows")
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldNameValue}}", map_Arrow_Identifiers[_arrow])
			pointersInitializesStatements += setPointerField
		}

	}

	for idx, group := range groupOrdered {
		var setPointerField string
		_ = setPointerField

		id = generatesIdentifier("Group", idx, group.Name)
		map_Group_Identifiers[group] = id

		// Initialisation of values
		for _, _lane := range group.GroupLanes {
			setPointerField = SliceOfPointersFieldInitStatement
			setPointerField = strings.ReplaceAll(setPointerField, "{{Identifier}}", id)
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldName}}", "GroupLanes")
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldNameValue}}", map_Lane_Identifiers[_lane])
			pointersInitializesStatements += setPointerField
		}

	}

	for idx, lane := range laneOrdered {
		var setPointerField string
		_ = setPointerField

		id = generatesIdentifier("Lane", idx, lane.Name)
		map_Lane_Identifiers[lane] = id

		// Initialisation of values
		for _, _bar := range lane.Bars {
			setPointerField = SliceOfPointersFieldInitStatement
			setPointerField = strings.ReplaceAll(setPointerField, "{{Identifier}}", id)
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldName}}", "Bars")
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldNameValue}}", map_Bar_Identifiers[_bar])
			pointersInitializesStatements += setPointerField
		}

	}

	for idx, milestone := range milestoneOrdered {
		var setPointerField string
		_ = setPointerField

		id = generatesIdentifier("Milestone", idx, milestone.Name)
		map_Milestone_Identifiers[milestone] = id

		// Initialisation of values
		for _, _lane := range milestone.DiamonfAndTextAnchors {
			setPointerField = SliceOfPointersFieldInitStatement
			setPointerField = strings.ReplaceAll(setPointerField, "{{Identifier}}", id)
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldName}}", "DiamonfAndTextAnchors")
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldNameValue}}", map_Lane_Identifiers[_lane])
			pointersInitializesStatements += setPointerField
		}

	}


	res = strings.ReplaceAll(res, "{{Identifiers}}", identifiersDecl)
	res = strings.ReplaceAll(res, "{{ValueInitializers}}", initializerStatements)
	res = strings.ReplaceAll(res, "{{PointersInitializers}}", pointersInitializesStatements)

	fmt.Fprintln(file, res)
}

// unique identifier per struct
func generatesIdentifier(gongStructName string, idx int, instanceName string) (identifier string) {

	identifier = fmt.Sprintf("__%s__%06d_%s",
		gongStructName,
		idx,
		strings.ReplaceAll(instanceName, " ", "_"))

	return
}
