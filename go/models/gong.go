// generated by ModelGongFileTemplate
package models

import (
	"fmt"
	"log"
	"os"
	"path"
	"regexp"
	"sort"
	"strings"
)

// swagger:ignore
type __void any

// needed for creating set of instances in the stage
var __member __void

// GongStructInterface is the interface met by GongStructs
// It allows runtime reflexion of instances (without the hassle of the "reflect" package)
type GongStructInterface interface {
	GetName() (res string)
	GetFields() (res []string)
	GetFieldStringValue(fieldName string) (res string)
}

// StageStruct enables storage of staged instances
// swagger:ignore
type StageStruct struct { // insertion point for definition of arrays registering instances
	Arrows           map[*Arrow]any
	Arrows_mapString map[string]*Arrow

	Bars           map[*Bar]any
	Bars_mapString map[string]*Bar

	Gantts           map[*Gantt]any
	Gantts_mapString map[string]*Gantt

	Groups           map[*Group]any
	Groups_mapString map[string]*Group

	Lanes           map[*Lane]any
	Lanes_mapString map[string]*Lane

	LaneUses           map[*LaneUse]any
	LaneUses_mapString map[string]*LaneUse

	Milestones           map[*Milestone]any
	Milestones_mapString map[string]*Milestone

	AllModelsStructCreateCallback AllModelsStructCreateInterface

	AllModelsStructDeleteCallback AllModelsStructDeleteInterface

	BackRepo BackRepoInterface

	// if set will be called before each commit to the back repo
	OnInitCommitCallback          OnInitCommitInterface
	OnInitCommitFromFrontCallback OnInitCommitInterface
	OnInitCommitFromBackCallback  OnInitCommitInterface

	// store the number of instance per gongstruct
	Map_GongStructName_InstancesNb map[string]int
}

type OnInitCommitInterface interface {
	BeforeCommit(stage *StageStruct)
}

type BackRepoInterface interface {
	Commit(stage *StageStruct)
	Checkout(stage *StageStruct)
	Backup(stage *StageStruct, dirPath string)
	Restore(stage *StageStruct, dirPath string)
	BackupXL(stage *StageStruct, dirPath string)
	RestoreXL(stage *StageStruct, dirPath string)
	// insertion point for Commit and Checkout signatures
	CommitArrow(arrow *Arrow)
	CheckoutArrow(arrow *Arrow)
	CommitBar(bar *Bar)
	CheckoutBar(bar *Bar)
	CommitGantt(gantt *Gantt)
	CheckoutGantt(gantt *Gantt)
	CommitGroup(group *Group)
	CheckoutGroup(group *Group)
	CommitLane(lane *Lane)
	CheckoutLane(lane *Lane)
	CommitLaneUse(laneuse *LaneUse)
	CheckoutLaneUse(laneuse *LaneUse)
	CommitMilestone(milestone *Milestone)
	CheckoutMilestone(milestone *Milestone)
	GetLastCommitFromBackNb() uint
	GetLastPushFromFrontNb() uint
}

// swagger:ignore instructs the gong compiler (gongc) to avoid this particular struct
var Stage StageStruct = StageStruct{ // insertion point for array initiatialisation
	Arrows:           make(map[*Arrow]any),
	Arrows_mapString: make(map[string]*Arrow),

	Bars:           make(map[*Bar]any),
	Bars_mapString: make(map[string]*Bar),

	Gantts:           make(map[*Gantt]any),
	Gantts_mapString: make(map[string]*Gantt),

	Groups:           make(map[*Group]any),
	Groups_mapString: make(map[string]*Group),

	Lanes:           make(map[*Lane]any),
	Lanes_mapString: make(map[string]*Lane),

	LaneUses:           make(map[*LaneUse]any),
	LaneUses_mapString: make(map[string]*LaneUse),

	Milestones:           make(map[*Milestone]any),
	Milestones_mapString: make(map[string]*Milestone),

	// end of insertion point
	Map_GongStructName_InstancesNb: make(map[string]int),
}

func (stage *StageStruct) Commit() {
	if stage.BackRepo != nil {
		stage.BackRepo.Commit(stage)
	}

	// insertion point for computing the map of number of instances per gongstruct
	stage.Map_GongStructName_InstancesNb["Arrow"] = len(stage.Arrows)
	stage.Map_GongStructName_InstancesNb["Bar"] = len(stage.Bars)
	stage.Map_GongStructName_InstancesNb["Gantt"] = len(stage.Gantts)
	stage.Map_GongStructName_InstancesNb["Group"] = len(stage.Groups)
	stage.Map_GongStructName_InstancesNb["Lane"] = len(stage.Lanes)
	stage.Map_GongStructName_InstancesNb["LaneUse"] = len(stage.LaneUses)
	stage.Map_GongStructName_InstancesNb["Milestone"] = len(stage.Milestones)

}

func (stage *StageStruct) Checkout() {
	if stage.BackRepo != nil {
		stage.BackRepo.Checkout(stage)
	}
}

// backup generates backup files in the dirPath
func (stage *StageStruct) Backup(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.Backup(stage, dirPath)
	}
}

// Restore resets Stage & BackRepo and restores their content from the restore files in dirPath
func (stage *StageStruct) Restore(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.Restore(stage, dirPath)
	}
}

// backup generates backup files in the dirPath
func (stage *StageStruct) BackupXL(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.BackupXL(stage, dirPath)
	}
}

// Restore resets Stage & BackRepo and restores their content from the restore files in dirPath
func (stage *StageStruct) RestoreXL(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.RestoreXL(stage, dirPath)
	}
}

// insertion point for cumulative sub template with model space calls
func (stage *StageStruct) getArrowOrderedStructWithNameField() []*Arrow {
	// have alphabetical order generation
	arrowOrdered := []*Arrow{}
	for arrow := range stage.Arrows {
		arrowOrdered = append(arrowOrdered, arrow)
	}
	sort.Slice(arrowOrdered[:], func(i, j int) bool {
		return arrowOrdered[i].Name < arrowOrdered[j].Name
	})
	return arrowOrdered
}

// Stage puts arrow to the model stage
func (arrow *Arrow) Stage() *Arrow {
	Stage.Arrows[arrow] = __member
	Stage.Arrows_mapString[arrow.Name] = arrow

	return arrow
}

// Unstage removes arrow off the model stage
func (arrow *Arrow) Unstage() *Arrow {
	delete(Stage.Arrows, arrow)
	delete(Stage.Arrows_mapString, arrow.Name)
	return arrow
}

// commit arrow to the back repo (if it is already staged)
func (arrow *Arrow) Commit() *Arrow {
	if _, ok := Stage.Arrows[arrow]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitArrow(arrow)
		}
	}
	return arrow
}

// Checkout arrow to the back repo (if it is already staged)
func (arrow *Arrow) Checkout() *Arrow {
	if _, ok := Stage.Arrows[arrow]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutArrow(arrow)
		}
	}
	return arrow
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of arrow to the model stage
func (arrow *Arrow) StageCopy() *Arrow {
	_arrow := new(Arrow)
	*_arrow = *arrow
	_arrow.Stage()
	return _arrow
}

// StageAndCommit appends arrow to the model stage and commit to the orm repo
func (arrow *Arrow) StageAndCommit() *Arrow {
	arrow.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMArrow(arrow)
	}
	return arrow
}

// DeleteStageAndCommit appends arrow to the model stage and commit to the orm repo
func (arrow *Arrow) DeleteStageAndCommit() *Arrow {
	arrow.Unstage()
	DeleteORMArrow(arrow)
	return arrow
}

// StageCopyAndCommit appends a copy of arrow to the model stage and commit to the orm repo
func (arrow *Arrow) StageCopyAndCommit() *Arrow {
	_arrow := new(Arrow)
	*_arrow = *arrow
	_arrow.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMArrow(arrow)
	}
	return _arrow
}

// CreateORMArrow enables dynamic staging of a Arrow instance
func CreateORMArrow(arrow *Arrow) {
	arrow.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMArrow(arrow)
	}
}

// DeleteORMArrow enables dynamic staging of a Arrow instance
func DeleteORMArrow(arrow *Arrow) {
	arrow.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMArrow(arrow)
	}
}

// for satisfaction of GongStruct interface
func (arrow *Arrow) GetName() (res string) {
	return arrow.Name
}

func (stage *StageStruct) getBarOrderedStructWithNameField() []*Bar {
	// have alphabetical order generation
	barOrdered := []*Bar{}
	for bar := range stage.Bars {
		barOrdered = append(barOrdered, bar)
	}
	sort.Slice(barOrdered[:], func(i, j int) bool {
		return barOrdered[i].Name < barOrdered[j].Name
	})
	return barOrdered
}

// Stage puts bar to the model stage
func (bar *Bar) Stage() *Bar {
	Stage.Bars[bar] = __member
	Stage.Bars_mapString[bar.Name] = bar

	return bar
}

// Unstage removes bar off the model stage
func (bar *Bar) Unstage() *Bar {
	delete(Stage.Bars, bar)
	delete(Stage.Bars_mapString, bar.Name)
	return bar
}

// commit bar to the back repo (if it is already staged)
func (bar *Bar) Commit() *Bar {
	if _, ok := Stage.Bars[bar]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitBar(bar)
		}
	}
	return bar
}

// Checkout bar to the back repo (if it is already staged)
func (bar *Bar) Checkout() *Bar {
	if _, ok := Stage.Bars[bar]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutBar(bar)
		}
	}
	return bar
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of bar to the model stage
func (bar *Bar) StageCopy() *Bar {
	_bar := new(Bar)
	*_bar = *bar
	_bar.Stage()
	return _bar
}

// StageAndCommit appends bar to the model stage and commit to the orm repo
func (bar *Bar) StageAndCommit() *Bar {
	bar.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMBar(bar)
	}
	return bar
}

// DeleteStageAndCommit appends bar to the model stage and commit to the orm repo
func (bar *Bar) DeleteStageAndCommit() *Bar {
	bar.Unstage()
	DeleteORMBar(bar)
	return bar
}

// StageCopyAndCommit appends a copy of bar to the model stage and commit to the orm repo
func (bar *Bar) StageCopyAndCommit() *Bar {
	_bar := new(Bar)
	*_bar = *bar
	_bar.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMBar(bar)
	}
	return _bar
}

// CreateORMBar enables dynamic staging of a Bar instance
func CreateORMBar(bar *Bar) {
	bar.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMBar(bar)
	}
}

// DeleteORMBar enables dynamic staging of a Bar instance
func DeleteORMBar(bar *Bar) {
	bar.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMBar(bar)
	}
}

// for satisfaction of GongStruct interface
func (bar *Bar) GetName() (res string) {
	return bar.Name
}

func (stage *StageStruct) getGanttOrderedStructWithNameField() []*Gantt {
	// have alphabetical order generation
	ganttOrdered := []*Gantt{}
	for gantt := range stage.Gantts {
		ganttOrdered = append(ganttOrdered, gantt)
	}
	sort.Slice(ganttOrdered[:], func(i, j int) bool {
		return ganttOrdered[i].Name < ganttOrdered[j].Name
	})
	return ganttOrdered
}

// Stage puts gantt to the model stage
func (gantt *Gantt) Stage() *Gantt {
	Stage.Gantts[gantt] = __member
	Stage.Gantts_mapString[gantt.Name] = gantt

	return gantt
}

// Unstage removes gantt off the model stage
func (gantt *Gantt) Unstage() *Gantt {
	delete(Stage.Gantts, gantt)
	delete(Stage.Gantts_mapString, gantt.Name)
	return gantt
}

// commit gantt to the back repo (if it is already staged)
func (gantt *Gantt) Commit() *Gantt {
	if _, ok := Stage.Gantts[gantt]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitGantt(gantt)
		}
	}
	return gantt
}

// Checkout gantt to the back repo (if it is already staged)
func (gantt *Gantt) Checkout() *Gantt {
	if _, ok := Stage.Gantts[gantt]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutGantt(gantt)
		}
	}
	return gantt
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of gantt to the model stage
func (gantt *Gantt) StageCopy() *Gantt {
	_gantt := new(Gantt)
	*_gantt = *gantt
	_gantt.Stage()
	return _gantt
}

// StageAndCommit appends gantt to the model stage and commit to the orm repo
func (gantt *Gantt) StageAndCommit() *Gantt {
	gantt.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMGantt(gantt)
	}
	return gantt
}

// DeleteStageAndCommit appends gantt to the model stage and commit to the orm repo
func (gantt *Gantt) DeleteStageAndCommit() *Gantt {
	gantt.Unstage()
	DeleteORMGantt(gantt)
	return gantt
}

// StageCopyAndCommit appends a copy of gantt to the model stage and commit to the orm repo
func (gantt *Gantt) StageCopyAndCommit() *Gantt {
	_gantt := new(Gantt)
	*_gantt = *gantt
	_gantt.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMGantt(gantt)
	}
	return _gantt
}

// CreateORMGantt enables dynamic staging of a Gantt instance
func CreateORMGantt(gantt *Gantt) {
	gantt.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMGantt(gantt)
	}
}

// DeleteORMGantt enables dynamic staging of a Gantt instance
func DeleteORMGantt(gantt *Gantt) {
	gantt.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMGantt(gantt)
	}
}

// for satisfaction of GongStruct interface
func (gantt *Gantt) GetName() (res string) {
	return gantt.Name
}

func (stage *StageStruct) getGroupOrderedStructWithNameField() []*Group {
	// have alphabetical order generation
	groupOrdered := []*Group{}
	for group := range stage.Groups {
		groupOrdered = append(groupOrdered, group)
	}
	sort.Slice(groupOrdered[:], func(i, j int) bool {
		return groupOrdered[i].Name < groupOrdered[j].Name
	})
	return groupOrdered
}

// Stage puts group to the model stage
func (group *Group) Stage() *Group {
	Stage.Groups[group] = __member
	Stage.Groups_mapString[group.Name] = group

	return group
}

// Unstage removes group off the model stage
func (group *Group) Unstage() *Group {
	delete(Stage.Groups, group)
	delete(Stage.Groups_mapString, group.Name)
	return group
}

// commit group to the back repo (if it is already staged)
func (group *Group) Commit() *Group {
	if _, ok := Stage.Groups[group]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitGroup(group)
		}
	}
	return group
}

// Checkout group to the back repo (if it is already staged)
func (group *Group) Checkout() *Group {
	if _, ok := Stage.Groups[group]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutGroup(group)
		}
	}
	return group
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of group to the model stage
func (group *Group) StageCopy() *Group {
	_group := new(Group)
	*_group = *group
	_group.Stage()
	return _group
}

// StageAndCommit appends group to the model stage and commit to the orm repo
func (group *Group) StageAndCommit() *Group {
	group.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMGroup(group)
	}
	return group
}

// DeleteStageAndCommit appends group to the model stage and commit to the orm repo
func (group *Group) DeleteStageAndCommit() *Group {
	group.Unstage()
	DeleteORMGroup(group)
	return group
}

// StageCopyAndCommit appends a copy of group to the model stage and commit to the orm repo
func (group *Group) StageCopyAndCommit() *Group {
	_group := new(Group)
	*_group = *group
	_group.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMGroup(group)
	}
	return _group
}

// CreateORMGroup enables dynamic staging of a Group instance
func CreateORMGroup(group *Group) {
	group.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMGroup(group)
	}
}

// DeleteORMGroup enables dynamic staging of a Group instance
func DeleteORMGroup(group *Group) {
	group.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMGroup(group)
	}
}

// for satisfaction of GongStruct interface
func (group *Group) GetName() (res string) {
	return group.Name
}

func (stage *StageStruct) getLaneOrderedStructWithNameField() []*Lane {
	// have alphabetical order generation
	laneOrdered := []*Lane{}
	for lane := range stage.Lanes {
		laneOrdered = append(laneOrdered, lane)
	}
	sort.Slice(laneOrdered[:], func(i, j int) bool {
		return laneOrdered[i].Name < laneOrdered[j].Name
	})
	return laneOrdered
}

// Stage puts lane to the model stage
func (lane *Lane) Stage() *Lane {
	Stage.Lanes[lane] = __member
	Stage.Lanes_mapString[lane.Name] = lane

	return lane
}

// Unstage removes lane off the model stage
func (lane *Lane) Unstage() *Lane {
	delete(Stage.Lanes, lane)
	delete(Stage.Lanes_mapString, lane.Name)
	return lane
}

// commit lane to the back repo (if it is already staged)
func (lane *Lane) Commit() *Lane {
	if _, ok := Stage.Lanes[lane]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitLane(lane)
		}
	}
	return lane
}

// Checkout lane to the back repo (if it is already staged)
func (lane *Lane) Checkout() *Lane {
	if _, ok := Stage.Lanes[lane]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutLane(lane)
		}
	}
	return lane
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of lane to the model stage
func (lane *Lane) StageCopy() *Lane {
	_lane := new(Lane)
	*_lane = *lane
	_lane.Stage()
	return _lane
}

// StageAndCommit appends lane to the model stage and commit to the orm repo
func (lane *Lane) StageAndCommit() *Lane {
	lane.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMLane(lane)
	}
	return lane
}

// DeleteStageAndCommit appends lane to the model stage and commit to the orm repo
func (lane *Lane) DeleteStageAndCommit() *Lane {
	lane.Unstage()
	DeleteORMLane(lane)
	return lane
}

// StageCopyAndCommit appends a copy of lane to the model stage and commit to the orm repo
func (lane *Lane) StageCopyAndCommit() *Lane {
	_lane := new(Lane)
	*_lane = *lane
	_lane.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMLane(lane)
	}
	return _lane
}

// CreateORMLane enables dynamic staging of a Lane instance
func CreateORMLane(lane *Lane) {
	lane.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMLane(lane)
	}
}

// DeleteORMLane enables dynamic staging of a Lane instance
func DeleteORMLane(lane *Lane) {
	lane.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMLane(lane)
	}
}

// for satisfaction of GongStruct interface
func (lane *Lane) GetName() (res string) {
	return lane.Name
}

func (stage *StageStruct) getLaneUseOrderedStructWithNameField() []*LaneUse {
	// have alphabetical order generation
	laneuseOrdered := []*LaneUse{}
	for laneuse := range stage.LaneUses {
		laneuseOrdered = append(laneuseOrdered, laneuse)
	}
	sort.Slice(laneuseOrdered[:], func(i, j int) bool {
		return laneuseOrdered[i].Name < laneuseOrdered[j].Name
	})
	return laneuseOrdered
}

// Stage puts laneuse to the model stage
func (laneuse *LaneUse) Stage() *LaneUse {
	Stage.LaneUses[laneuse] = __member
	Stage.LaneUses_mapString[laneuse.Name] = laneuse

	return laneuse
}

// Unstage removes laneuse off the model stage
func (laneuse *LaneUse) Unstage() *LaneUse {
	delete(Stage.LaneUses, laneuse)
	delete(Stage.LaneUses_mapString, laneuse.Name)
	return laneuse
}

// commit laneuse to the back repo (if it is already staged)
func (laneuse *LaneUse) Commit() *LaneUse {
	if _, ok := Stage.LaneUses[laneuse]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitLaneUse(laneuse)
		}
	}
	return laneuse
}

// Checkout laneuse to the back repo (if it is already staged)
func (laneuse *LaneUse) Checkout() *LaneUse {
	if _, ok := Stage.LaneUses[laneuse]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutLaneUse(laneuse)
		}
	}
	return laneuse
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of laneuse to the model stage
func (laneuse *LaneUse) StageCopy() *LaneUse {
	_laneuse := new(LaneUse)
	*_laneuse = *laneuse
	_laneuse.Stage()
	return _laneuse
}

// StageAndCommit appends laneuse to the model stage and commit to the orm repo
func (laneuse *LaneUse) StageAndCommit() *LaneUse {
	laneuse.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMLaneUse(laneuse)
	}
	return laneuse
}

// DeleteStageAndCommit appends laneuse to the model stage and commit to the orm repo
func (laneuse *LaneUse) DeleteStageAndCommit() *LaneUse {
	laneuse.Unstage()
	DeleteORMLaneUse(laneuse)
	return laneuse
}

// StageCopyAndCommit appends a copy of laneuse to the model stage and commit to the orm repo
func (laneuse *LaneUse) StageCopyAndCommit() *LaneUse {
	_laneuse := new(LaneUse)
	*_laneuse = *laneuse
	_laneuse.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMLaneUse(laneuse)
	}
	return _laneuse
}

// CreateORMLaneUse enables dynamic staging of a LaneUse instance
func CreateORMLaneUse(laneuse *LaneUse) {
	laneuse.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMLaneUse(laneuse)
	}
}

// DeleteORMLaneUse enables dynamic staging of a LaneUse instance
func DeleteORMLaneUse(laneuse *LaneUse) {
	laneuse.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMLaneUse(laneuse)
	}
}

// for satisfaction of GongStruct interface
func (laneuse *LaneUse) GetName() (res string) {
	return laneuse.Name
}

func (stage *StageStruct) getMilestoneOrderedStructWithNameField() []*Milestone {
	// have alphabetical order generation
	milestoneOrdered := []*Milestone{}
	for milestone := range stage.Milestones {
		milestoneOrdered = append(milestoneOrdered, milestone)
	}
	sort.Slice(milestoneOrdered[:], func(i, j int) bool {
		return milestoneOrdered[i].Name < milestoneOrdered[j].Name
	})
	return milestoneOrdered
}

// Stage puts milestone to the model stage
func (milestone *Milestone) Stage() *Milestone {
	Stage.Milestones[milestone] = __member
	Stage.Milestones_mapString[milestone.Name] = milestone

	return milestone
}

// Unstage removes milestone off the model stage
func (milestone *Milestone) Unstage() *Milestone {
	delete(Stage.Milestones, milestone)
	delete(Stage.Milestones_mapString, milestone.Name)
	return milestone
}

// commit milestone to the back repo (if it is already staged)
func (milestone *Milestone) Commit() *Milestone {
	if _, ok := Stage.Milestones[milestone]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitMilestone(milestone)
		}
	}
	return milestone
}

// Checkout milestone to the back repo (if it is already staged)
func (milestone *Milestone) Checkout() *Milestone {
	if _, ok := Stage.Milestones[milestone]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutMilestone(milestone)
		}
	}
	return milestone
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of milestone to the model stage
func (milestone *Milestone) StageCopy() *Milestone {
	_milestone := new(Milestone)
	*_milestone = *milestone
	_milestone.Stage()
	return _milestone
}

// StageAndCommit appends milestone to the model stage and commit to the orm repo
func (milestone *Milestone) StageAndCommit() *Milestone {
	milestone.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMMilestone(milestone)
	}
	return milestone
}

// DeleteStageAndCommit appends milestone to the model stage and commit to the orm repo
func (milestone *Milestone) DeleteStageAndCommit() *Milestone {
	milestone.Unstage()
	DeleteORMMilestone(milestone)
	return milestone
}

// StageCopyAndCommit appends a copy of milestone to the model stage and commit to the orm repo
func (milestone *Milestone) StageCopyAndCommit() *Milestone {
	_milestone := new(Milestone)
	*_milestone = *milestone
	_milestone.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMMilestone(milestone)
	}
	return _milestone
}

// CreateORMMilestone enables dynamic staging of a Milestone instance
func CreateORMMilestone(milestone *Milestone) {
	milestone.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMMilestone(milestone)
	}
}

// DeleteORMMilestone enables dynamic staging of a Milestone instance
func DeleteORMMilestone(milestone *Milestone) {
	milestone.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMMilestone(milestone)
	}
}

// for satisfaction of GongStruct interface
func (milestone *Milestone) GetName() (res string) {
	return milestone.Name
}

// swagger:ignore
type AllModelsStructCreateInterface interface { // insertion point for Callbacks on creation
	CreateORMArrow(Arrow *Arrow)
	CreateORMBar(Bar *Bar)
	CreateORMGantt(Gantt *Gantt)
	CreateORMGroup(Group *Group)
	CreateORMLane(Lane *Lane)
	CreateORMLaneUse(LaneUse *LaneUse)
	CreateORMMilestone(Milestone *Milestone)
}

type AllModelsStructDeleteInterface interface { // insertion point for Callbacks on deletion
	DeleteORMArrow(Arrow *Arrow)
	DeleteORMBar(Bar *Bar)
	DeleteORMGantt(Gantt *Gantt)
	DeleteORMGroup(Group *Group)
	DeleteORMLane(Lane *Lane)
	DeleteORMLaneUse(LaneUse *LaneUse)
	DeleteORMMilestone(Milestone *Milestone)
}

func (stage *StageStruct) Reset() { // insertion point for array reset
	stage.Arrows = make(map[*Arrow]any)
	stage.Arrows_mapString = make(map[string]*Arrow)

	stage.Bars = make(map[*Bar]any)
	stage.Bars_mapString = make(map[string]*Bar)

	stage.Gantts = make(map[*Gantt]any)
	stage.Gantts_mapString = make(map[string]*Gantt)

	stage.Groups = make(map[*Group]any)
	stage.Groups_mapString = make(map[string]*Group)

	stage.Lanes = make(map[*Lane]any)
	stage.Lanes_mapString = make(map[string]*Lane)

	stage.LaneUses = make(map[*LaneUse]any)
	stage.LaneUses_mapString = make(map[string]*LaneUse)

	stage.Milestones = make(map[*Milestone]any)
	stage.Milestones_mapString = make(map[string]*Milestone)

}

func (stage *StageStruct) Nil() { // insertion point for array nil
	stage.Arrows = nil
	stage.Arrows_mapString = nil

	stage.Bars = nil
	stage.Bars_mapString = nil

	stage.Gantts = nil
	stage.Gantts_mapString = nil

	stage.Groups = nil
	stage.Groups_mapString = nil

	stage.Lanes = nil
	stage.Lanes_mapString = nil

	stage.LaneUses = nil
	stage.LaneUses_mapString = nil

	stage.Milestones = nil
	stage.Milestones_mapString = nil

}

const marshallRes = `package {{PackageName}}

import (
	"time"

	"{{ModelsPackageName}}"
)

func init() {
	var __Dummy_time_variable time.Time
	_ = __Dummy_time_variable
	InjectionGateway["{{databaseName}}"] = {{databaseName}}Injection
}

// {{databaseName}}Injection will stage objects of database "{{databaseName}}"
func {{databaseName}}Injection() {

	// Declaration of instances to stage{{Identifiers}}

	// Setup of values{{ValueInitializers}}

	// Setup of pointers{{PointersInitializers}}
}

`

const IdentifiersDecls = `
	{{Identifier}} := (&models.{{GeneratedStructName}}{Name: "{{GeneratedFieldNameValue}}"}).Stage()`

const StringInitStatement = `
	{{Identifier}}.{{GeneratedFieldName}} = ` + "`" + `{{GeneratedFieldNameValue}}` + "`"

const StringEnumInitStatement = `
	{{Identifier}}.{{GeneratedFieldName}} = {{GeneratedFieldNameValue}}`

const NumberInitStatement = `
	{{Identifier}}.{{GeneratedFieldName}} = {{GeneratedFieldNameValue}}`

const PointerFieldInitStatement = `
	{{Identifier}}.{{GeneratedFieldName}} = {{GeneratedFieldNameValue}}`

const SliceOfPointersFieldInitStatement = `
	{{Identifier}}.{{GeneratedFieldName}} = append({{Identifier}}.{{GeneratedFieldName}}, {{GeneratedFieldNameValue}})`

const TimeInitStatement = `
	{{Identifier}}.{{GeneratedFieldName}}, _ = time.Parse("2006-01-02 15:04:05.999999999 -0700 MST", "{{GeneratedFieldNameValue}}")`

// Marshall marshall the stage content into the file as an instanciation into a stage
func (stage *StageStruct) Marshall(file *os.File, modelsPackageName, packageName string) {

	name := file.Name()

	if !strings.HasSuffix(name, ".go") {
		log.Fatalln(name + " is not a go filename")
	}

	log.Println("filename of marshall output  is " + name)

	res := marshallRes
	res = strings.ReplaceAll(res, "{{databaseName}}", strings.ReplaceAll(path.Base(name), ".go", ""))
	res = strings.ReplaceAll(res, "{{PackageName}}", packageName)
	res = strings.ReplaceAll(res, "{{ModelsPackageName}}", modelsPackageName)

	// map of identifiers
	// var StageMapDstructIds map[*Dstruct]string
	identifiersDecl := ""
	initializerStatements := ""
	pointersInitializesStatements := ""

	id := ""
	decl := ""
	setValueField := ""

	// insertion initialization of objects to stage
	map_Arrow_Identifiers := make(map[*Arrow]string)
	_ = map_Arrow_Identifiers

	arrowOrdered := []*Arrow{}
	for arrow := range stage.Arrows {
		arrowOrdered = append(arrowOrdered, arrow)
	}
	sort.Slice(arrowOrdered[:], func(i, j int) bool {
		return arrowOrdered[i].Name < arrowOrdered[j].Name
	})
	identifiersDecl += "\n\n	// Declarations of staged instances of Arrow"
	for idx, arrow := range arrowOrdered {

		id = generatesIdentifier("Arrow", idx, arrow.Name)
		map_Arrow_Identifiers[arrow] = id

		decl = IdentifiersDecls
		decl = strings.ReplaceAll(decl, "{{Identifier}}", id)
		decl = strings.ReplaceAll(decl, "{{GeneratedStructName}}", "Arrow")
		decl = strings.ReplaceAll(decl, "{{GeneratedFieldNameValue}}", arrow.Name)
		identifiersDecl += decl

		initializerStatements += fmt.Sprintf("\n\n	// Arrow %s values setup", arrow.Name)
		// Initialisation of values
		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Name")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(arrow.Name))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "OptionnalColor")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(arrow.OptionnalColor))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "OptionnalStroke")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(arrow.OptionnalStroke))
		initializerStatements += setValueField

	}

	map_Bar_Identifiers := make(map[*Bar]string)
	_ = map_Bar_Identifiers

	barOrdered := []*Bar{}
	for bar := range stage.Bars {
		barOrdered = append(barOrdered, bar)
	}
	sort.Slice(barOrdered[:], func(i, j int) bool {
		return barOrdered[i].Name < barOrdered[j].Name
	})
	identifiersDecl += "\n\n	// Declarations of staged instances of Bar"
	for idx, bar := range barOrdered {

		id = generatesIdentifier("Bar", idx, bar.Name)
		map_Bar_Identifiers[bar] = id

		decl = IdentifiersDecls
		decl = strings.ReplaceAll(decl, "{{Identifier}}", id)
		decl = strings.ReplaceAll(decl, "{{GeneratedStructName}}", "Bar")
		decl = strings.ReplaceAll(decl, "{{GeneratedFieldNameValue}}", bar.Name)
		identifiersDecl += decl

		initializerStatements += fmt.Sprintf("\n\n	// Bar %s values setup", bar.Name)
		// Initialisation of values
		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Name")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(bar.Name))
		initializerStatements += setValueField

		setValueField = TimeInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Start")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", bar.Start.String())
		initializerStatements += setValueField

		setValueField = TimeInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "End")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", bar.End.String())
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "OptionnalColor")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(bar.OptionnalColor))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "OptionnalStroke")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(bar.OptionnalStroke))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "FillOpacity")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", bar.FillOpacity))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "StrokeWidth")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", bar.StrokeWidth))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "StrokeDashArray")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(bar.StrokeDashArray))
		initializerStatements += setValueField

	}

	map_Gantt_Identifiers := make(map[*Gantt]string)
	_ = map_Gantt_Identifiers

	ganttOrdered := []*Gantt{}
	for gantt := range stage.Gantts {
		ganttOrdered = append(ganttOrdered, gantt)
	}
	sort.Slice(ganttOrdered[:], func(i, j int) bool {
		return ganttOrdered[i].Name < ganttOrdered[j].Name
	})
	identifiersDecl += "\n\n	// Declarations of staged instances of Gantt"
	for idx, gantt := range ganttOrdered {

		id = generatesIdentifier("Gantt", idx, gantt.Name)
		map_Gantt_Identifiers[gantt] = id

		decl = IdentifiersDecls
		decl = strings.ReplaceAll(decl, "{{Identifier}}", id)
		decl = strings.ReplaceAll(decl, "{{GeneratedStructName}}", "Gantt")
		decl = strings.ReplaceAll(decl, "{{GeneratedFieldNameValue}}", gantt.Name)
		identifiersDecl += decl

		initializerStatements += fmt.Sprintf("\n\n	// Gantt %s values setup", gantt.Name)
		// Initialisation of values
		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Name")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(gantt.Name))
		initializerStatements += setValueField

		setValueField = TimeInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "ComputedStart")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", gantt.ComputedStart.String())
		initializerStatements += setValueField

		setValueField = TimeInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "ComputedEnd")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", gantt.ComputedEnd.String())
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "UseManualStartAndEndDates")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%t", gantt.UseManualStartAndEndDates))
		initializerStatements += setValueField

		setValueField = TimeInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "ManualStart")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", gantt.ManualStart.String())
		initializerStatements += setValueField

		setValueField = TimeInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "ManualEnd")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", gantt.ManualEnd.String())
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "LaneHeight")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", gantt.LaneHeight))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "RatioBarToLaneHeight")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", gantt.RatioBarToLaneHeight))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "YTopMargin")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", gantt.YTopMargin))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "XLeftText")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", gantt.XLeftText))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "TextHeight")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", gantt.TextHeight))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "XLeftLanes")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", gantt.XLeftLanes))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "XRightMargin")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", gantt.XRightMargin))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "ArrowLengthToTheRightOfStartBar")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", gantt.ArrowLengthToTheRightOfStartBar))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "ArrowTipLenght")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", gantt.ArrowTipLenght))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "TimeLine_Color")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(gantt.TimeLine_Color))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "TimeLine_FillOpacity")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", gantt.TimeLine_FillOpacity))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "TimeLine_Stroke")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(gantt.TimeLine_Stroke))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "TimeLine_StrokeWidth")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", gantt.TimeLine_StrokeWidth))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Group_Stroke")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(gantt.Group_Stroke))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Group_StrokeWidth")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", gantt.Group_StrokeWidth))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Group_StrokeDashArray")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(gantt.Group_StrokeDashArray))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "DateYOffset")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", gantt.DateYOffset))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "AlignOnStartEndOnYearStart")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%t", gantt.AlignOnStartEndOnYearStart))
		initializerStatements += setValueField

	}

	map_Group_Identifiers := make(map[*Group]string)
	_ = map_Group_Identifiers

	groupOrdered := []*Group{}
	for group := range stage.Groups {
		groupOrdered = append(groupOrdered, group)
	}
	sort.Slice(groupOrdered[:], func(i, j int) bool {
		return groupOrdered[i].Name < groupOrdered[j].Name
	})
	identifiersDecl += "\n\n	// Declarations of staged instances of Group"
	for idx, group := range groupOrdered {

		id = generatesIdentifier("Group", idx, group.Name)
		map_Group_Identifiers[group] = id

		decl = IdentifiersDecls
		decl = strings.ReplaceAll(decl, "{{Identifier}}", id)
		decl = strings.ReplaceAll(decl, "{{GeneratedStructName}}", "Group")
		decl = strings.ReplaceAll(decl, "{{GeneratedFieldNameValue}}", group.Name)
		identifiersDecl += decl

		initializerStatements += fmt.Sprintf("\n\n	// Group %s values setup", group.Name)
		// Initialisation of values
		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Name")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(group.Name))
		initializerStatements += setValueField

	}

	map_Lane_Identifiers := make(map[*Lane]string)
	_ = map_Lane_Identifiers

	laneOrdered := []*Lane{}
	for lane := range stage.Lanes {
		laneOrdered = append(laneOrdered, lane)
	}
	sort.Slice(laneOrdered[:], func(i, j int) bool {
		return laneOrdered[i].Name < laneOrdered[j].Name
	})
	identifiersDecl += "\n\n	// Declarations of staged instances of Lane"
	for idx, lane := range laneOrdered {

		id = generatesIdentifier("Lane", idx, lane.Name)
		map_Lane_Identifiers[lane] = id

		decl = IdentifiersDecls
		decl = strings.ReplaceAll(decl, "{{Identifier}}", id)
		decl = strings.ReplaceAll(decl, "{{GeneratedStructName}}", "Lane")
		decl = strings.ReplaceAll(decl, "{{GeneratedFieldNameValue}}", lane.Name)
		identifiersDecl += decl

		initializerStatements += fmt.Sprintf("\n\n	// Lane %s values setup", lane.Name)
		// Initialisation of values
		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Name")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(lane.Name))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Order")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%d", lane.Order))
		initializerStatements += setValueField

	}

	map_LaneUse_Identifiers := make(map[*LaneUse]string)
	_ = map_LaneUse_Identifiers

	laneuseOrdered := []*LaneUse{}
	for laneuse := range stage.LaneUses {
		laneuseOrdered = append(laneuseOrdered, laneuse)
	}
	sort.Slice(laneuseOrdered[:], func(i, j int) bool {
		return laneuseOrdered[i].Name < laneuseOrdered[j].Name
	})
	identifiersDecl += "\n\n	// Declarations of staged instances of LaneUse"
	for idx, laneuse := range laneuseOrdered {

		id = generatesIdentifier("LaneUse", idx, laneuse.Name)
		map_LaneUse_Identifiers[laneuse] = id

		decl = IdentifiersDecls
		decl = strings.ReplaceAll(decl, "{{Identifier}}", id)
		decl = strings.ReplaceAll(decl, "{{GeneratedStructName}}", "LaneUse")
		decl = strings.ReplaceAll(decl, "{{GeneratedFieldNameValue}}", laneuse.Name)
		identifiersDecl += decl

		initializerStatements += fmt.Sprintf("\n\n	// LaneUse %s values setup", laneuse.Name)
		// Initialisation of values
		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Name")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(laneuse.Name))
		initializerStatements += setValueField

	}

	map_Milestone_Identifiers := make(map[*Milestone]string)
	_ = map_Milestone_Identifiers

	milestoneOrdered := []*Milestone{}
	for milestone := range stage.Milestones {
		milestoneOrdered = append(milestoneOrdered, milestone)
	}
	sort.Slice(milestoneOrdered[:], func(i, j int) bool {
		return milestoneOrdered[i].Name < milestoneOrdered[j].Name
	})
	identifiersDecl += "\n\n	// Declarations of staged instances of Milestone"
	for idx, milestone := range milestoneOrdered {

		id = generatesIdentifier("Milestone", idx, milestone.Name)
		map_Milestone_Identifiers[milestone] = id

		decl = IdentifiersDecls
		decl = strings.ReplaceAll(decl, "{{Identifier}}", id)
		decl = strings.ReplaceAll(decl, "{{GeneratedStructName}}", "Milestone")
		decl = strings.ReplaceAll(decl, "{{GeneratedFieldNameValue}}", milestone.Name)
		identifiersDecl += decl

		initializerStatements += fmt.Sprintf("\n\n	// Milestone %s values setup", milestone.Name)
		// Initialisation of values
		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Name")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(milestone.Name))
		initializerStatements += setValueField

		setValueField = TimeInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Date")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", milestone.Date.String())
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "DisplayVerticalBar")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%t", milestone.DisplayVerticalBar))
		initializerStatements += setValueField

	}

	// insertion initialization of objects to stage
	for idx, arrow := range arrowOrdered {
		var setPointerField string
		_ = setPointerField

		id = generatesIdentifier("Arrow", idx, arrow.Name)
		map_Arrow_Identifiers[arrow] = id

		// Initialisation of values
		if arrow.From != nil {
			setPointerField = PointerFieldInitStatement
			setPointerField = strings.ReplaceAll(setPointerField, "{{Identifier}}", id)
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldName}}", "From")
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldNameValue}}", map_Bar_Identifiers[arrow.From])
			pointersInitializesStatements += setPointerField
		}

		if arrow.To != nil {
			setPointerField = PointerFieldInitStatement
			setPointerField = strings.ReplaceAll(setPointerField, "{{Identifier}}", id)
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldName}}", "To")
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldNameValue}}", map_Bar_Identifiers[arrow.To])
			pointersInitializesStatements += setPointerField
		}

	}

	for idx, bar := range barOrdered {
		var setPointerField string
		_ = setPointerField

		id = generatesIdentifier("Bar", idx, bar.Name)
		map_Bar_Identifiers[bar] = id

		// Initialisation of values
	}

	for idx, gantt := range ganttOrdered {
		var setPointerField string
		_ = setPointerField

		id = generatesIdentifier("Gantt", idx, gantt.Name)
		map_Gantt_Identifiers[gantt] = id

		// Initialisation of values
		for _, _lane := range gantt.Lanes {
			setPointerField = SliceOfPointersFieldInitStatement
			setPointerField = strings.ReplaceAll(setPointerField, "{{Identifier}}", id)
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldName}}", "Lanes")
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldNameValue}}", map_Lane_Identifiers[_lane])
			pointersInitializesStatements += setPointerField
		}

		for _, _milestone := range gantt.Milestones {
			setPointerField = SliceOfPointersFieldInitStatement
			setPointerField = strings.ReplaceAll(setPointerField, "{{Identifier}}", id)
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldName}}", "Milestones")
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldNameValue}}", map_Milestone_Identifiers[_milestone])
			pointersInitializesStatements += setPointerField
		}

		for _, _group := range gantt.Groups {
			setPointerField = SliceOfPointersFieldInitStatement
			setPointerField = strings.ReplaceAll(setPointerField, "{{Identifier}}", id)
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldName}}", "Groups")
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldNameValue}}", map_Group_Identifiers[_group])
			pointersInitializesStatements += setPointerField
		}

		for _, _arrow := range gantt.Arrows {
			setPointerField = SliceOfPointersFieldInitStatement
			setPointerField = strings.ReplaceAll(setPointerField, "{{Identifier}}", id)
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldName}}", "Arrows")
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldNameValue}}", map_Arrow_Identifiers[_arrow])
			pointersInitializesStatements += setPointerField
		}

	}

	for idx, group := range groupOrdered {
		var setPointerField string
		_ = setPointerField

		id = generatesIdentifier("Group", idx, group.Name)
		map_Group_Identifiers[group] = id

		// Initialisation of values
		for _, _lane := range group.GroupLanes {
			setPointerField = SliceOfPointersFieldInitStatement
			setPointerField = strings.ReplaceAll(setPointerField, "{{Identifier}}", id)
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldName}}", "GroupLanes")
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldNameValue}}", map_Lane_Identifiers[_lane])
			pointersInitializesStatements += setPointerField
		}

	}

	for idx, lane := range laneOrdered {
		var setPointerField string
		_ = setPointerField

		id = generatesIdentifier("Lane", idx, lane.Name)
		map_Lane_Identifiers[lane] = id

		// Initialisation of values
		for _, _bar := range lane.Bars {
			setPointerField = SliceOfPointersFieldInitStatement
			setPointerField = strings.ReplaceAll(setPointerField, "{{Identifier}}", id)
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldName}}", "Bars")
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldNameValue}}", map_Bar_Identifiers[_bar])
			pointersInitializesStatements += setPointerField
		}

	}

	for idx, laneuse := range laneuseOrdered {
		var setPointerField string
		_ = setPointerField

		id = generatesIdentifier("LaneUse", idx, laneuse.Name)
		map_LaneUse_Identifiers[laneuse] = id

		// Initialisation of values
		if laneuse.Lane != nil {
			setPointerField = PointerFieldInitStatement
			setPointerField = strings.ReplaceAll(setPointerField, "{{Identifier}}", id)
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldName}}", "Lane")
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldNameValue}}", map_Lane_Identifiers[laneuse.Lane])
			pointersInitializesStatements += setPointerField
		}

	}

	for idx, milestone := range milestoneOrdered {
		var setPointerField string
		_ = setPointerField

		id = generatesIdentifier("Milestone", idx, milestone.Name)
		map_Milestone_Identifiers[milestone] = id

		// Initialisation of values
		for _, _laneuse := range milestone.LanesToDisplayMilestoneUse {
			setPointerField = SliceOfPointersFieldInitStatement
			setPointerField = strings.ReplaceAll(setPointerField, "{{Identifier}}", id)
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldName}}", "LanesToDisplayMilestoneUse")
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldNameValue}}", map_LaneUse_Identifiers[_laneuse])
			pointersInitializesStatements += setPointerField
		}

	}

	res = strings.ReplaceAll(res, "{{Identifiers}}", identifiersDecl)
	res = strings.ReplaceAll(res, "{{ValueInitializers}}", initializerStatements)
	res = strings.ReplaceAll(res, "{{PointersInitializers}}", pointersInitializesStatements)

	fmt.Fprintln(file, res)
}

// unique identifier per struct
func generatesIdentifier(gongStructName string, idx int, instanceName string) (identifier string) {

	identifier = instanceName
	// Make a Regex to say we only want letters and numbers
	reg, err := regexp.Compile("[^a-zA-Z0-9]+")
	if err != nil {
		log.Fatal(err)
	}
	processedString := reg.ReplaceAllString(instanceName, "_")

	identifier = fmt.Sprintf("__%s__%06d_%s", gongStructName, idx, processedString)

	return
}

// insertion point of functions that provide maps for reverse associations

// generate function for reverse association maps of Arrow
func (stageStruct *StageStruct) CreateReverseMap_Arrow_From() (res map[*Bar][]*Arrow) {
	res = make(map[*Bar][]*Arrow)

	for arrow := range stageStruct.Arrows {
		if arrow.From != nil {
			bar_ := arrow.From
			var arrows []*Arrow
			_, ok := res[bar_]
			if ok {
				arrows = res[bar_]
			} else {
				arrows = make([]*Arrow, 0)
			}
			arrows = append(arrows, arrow)
			res[bar_] = arrows
		}
	}

	return
}
func (stageStruct *StageStruct) CreateReverseMap_Arrow_To() (res map[*Bar][]*Arrow) {
	res = make(map[*Bar][]*Arrow)

	for arrow := range stageStruct.Arrows {
		if arrow.To != nil {
			bar_ := arrow.To
			var arrows []*Arrow
			_, ok := res[bar_]
			if ok {
				arrows = res[bar_]
			} else {
				arrows = make([]*Arrow, 0)
			}
			arrows = append(arrows, arrow)
			res[bar_] = arrows
		}
	}

	return
}

// generate function for reverse association maps of Bar

// generate function for reverse association maps of Gantt
func (stageStruct *StageStruct) CreateReverseMap_Gantt_Lanes() (res map[*Lane]*Gantt) {
	res = make(map[*Lane]*Gantt)

	for gantt := range stageStruct.Gantts {
		for _, lane_ := range gantt.Lanes {
			res[lane_] = gantt
		}
	}

	return
}

func (stageStruct *StageStruct) CreateReverseMap_Gantt_Milestones() (res map[*Milestone]*Gantt) {
	res = make(map[*Milestone]*Gantt)

	for gantt := range stageStruct.Gantts {
		for _, milestone_ := range gantt.Milestones {
			res[milestone_] = gantt
		}
	}

	return
}

func (stageStruct *StageStruct) CreateReverseMap_Gantt_Groups() (res map[*Group]*Gantt) {
	res = make(map[*Group]*Gantt)

	for gantt := range stageStruct.Gantts {
		for _, group_ := range gantt.Groups {
			res[group_] = gantt
		}
	}

	return
}

func (stageStruct *StageStruct) CreateReverseMap_Gantt_Arrows() (res map[*Arrow]*Gantt) {
	res = make(map[*Arrow]*Gantt)

	for gantt := range stageStruct.Gantts {
		for _, arrow_ := range gantt.Arrows {
			res[arrow_] = gantt
		}
	}

	return
}


// generate function for reverse association maps of Group
func (stageStruct *StageStruct) CreateReverseMap_Group_GroupLanes() (res map[*Lane]*Group) {
	res = make(map[*Lane]*Group)

	for group := range stageStruct.Groups {
		for _, lane_ := range group.GroupLanes {
			res[lane_] = group
		}
	}

	return
}


// generate function for reverse association maps of Lane
func (stageStruct *StageStruct) CreateReverseMap_Lane_Bars() (res map[*Bar]*Lane) {
	res = make(map[*Bar]*Lane)

	for lane := range stageStruct.Lanes {
		for _, bar_ := range lane.Bars {
			res[bar_] = lane
		}
	}

	return
}


// generate function for reverse association maps of LaneUse
func (stageStruct *StageStruct) CreateReverseMap_LaneUse_Lane() (res map[*Lane][]*LaneUse) {
	res = make(map[*Lane][]*LaneUse)

	for laneuse := range stageStruct.LaneUses {
		if laneuse.Lane != nil {
			lane_ := laneuse.Lane
			var laneuses []*LaneUse
			_, ok := res[lane_]
			if ok {
				laneuses = res[lane_]
			} else {
				laneuses = make([]*LaneUse, 0)
			}
			laneuses = append(laneuses, laneuse)
			res[lane_] = laneuses
		}
	}

	return
}

// generate function for reverse association maps of Milestone
func (stageStruct *StageStruct) CreateReverseMap_Milestone_LanesToDisplayMilestoneUse() (res map[*LaneUse]*Milestone) {
	res = make(map[*LaneUse]*Milestone)

	for milestone := range stageStruct.Milestones {
		for _, laneuse_ := range milestone.LanesToDisplayMilestoneUse {
			res[laneuse_] = milestone
		}
	}

	return
}


// Gongstruct is the type paramter for generated generic function that allows
// - access to staged instances
// - navigation between staged instances by going backward association links between gongstruct
// - full refactoring of Gongstruct identifiers / fields
type Gongstruct interface {
	// insertion point for generic types
	Arrow | Bar | Gantt | Group | Lane | LaneUse | Milestone
}

type GongstructSet interface {
	map[any]any |
		// insertion point for generic types
		map[*Arrow]any |
		map[*Bar]any |
		map[*Gantt]any |
		map[*Group]any |
		map[*Lane]any |
		map[*LaneUse]any |
		map[*Milestone]any |
		map[*any]any // because go does not support an extra "|" at the end of type specifications
}

type GongstructMapString interface {
	map[any]any |
		// insertion point for generic types
		map[string]*Arrow |
		map[string]*Bar |
		map[string]*Gantt |
		map[string]*Group |
		map[string]*Lane |
		map[string]*LaneUse |
		map[string]*Milestone |
		map[*any]any // because go does not support an extra "|" at the end of type specifications
}

// GongGetSet returns the set staged GongstructType instances
// it is usefull because it allows refactoring of gong struct identifier
func GongGetSet[Type GongstructSet]() *Type {
	var ret Type

	switch any(ret).(type) {
	// insertion point for generic get functions
	case map[*Arrow]any:
		return any(&Stage.Arrows).(*Type)
	case map[*Bar]any:
		return any(&Stage.Bars).(*Type)
	case map[*Gantt]any:
		return any(&Stage.Gantts).(*Type)
	case map[*Group]any:
		return any(&Stage.Groups).(*Type)
	case map[*Lane]any:
		return any(&Stage.Lanes).(*Type)
	case map[*LaneUse]any:
		return any(&Stage.LaneUses).(*Type)
	case map[*Milestone]any:
		return any(&Stage.Milestones).(*Type)
	default:
		return nil
	}
}

// GongGetMap returns the map of staged GongstructType instances
// it is usefull because it allows refactoring of gong struct identifier
func GongGetMap[Type GongstructMapString]() *Type {
	var ret Type

	switch any(ret).(type) {
	// insertion point for generic get functions
	case map[string]*Arrow:
		return any(&Stage.Arrows_mapString).(*Type)
	case map[string]*Bar:
		return any(&Stage.Bars_mapString).(*Type)
	case map[string]*Gantt:
		return any(&Stage.Gantts_mapString).(*Type)
	case map[string]*Group:
		return any(&Stage.Groups_mapString).(*Type)
	case map[string]*Lane:
		return any(&Stage.Lanes_mapString).(*Type)
	case map[string]*LaneUse:
		return any(&Stage.LaneUses_mapString).(*Type)
	case map[string]*Milestone:
		return any(&Stage.Milestones_mapString).(*Type)
	default:
		return nil
	}
}

// GetGongstructInstancesSet returns the set staged GongstructType instances
// it is usefull because it allows refactoring of gongstruct identifier
func GetGongstructInstancesSet[Type Gongstruct]() *map[*Type]any {
	var ret Type

	switch any(ret).(type) {
	// insertion point for generic get functions
	case Arrow:
		return any(&Stage.Arrows).(*map[*Type]any)
	case Bar:
		return any(&Stage.Bars).(*map[*Type]any)
	case Gantt:
		return any(&Stage.Gantts).(*map[*Type]any)
	case Group:
		return any(&Stage.Groups).(*map[*Type]any)
	case Lane:
		return any(&Stage.Lanes).(*map[*Type]any)
	case LaneUse:
		return any(&Stage.LaneUses).(*map[*Type]any)
	case Milestone:
		return any(&Stage.Milestones).(*map[*Type]any)
	default:
		return nil
	}
}

// GetGongstructInstancesMap returns the map of staged GongstructType instances
// it is usefull because it allows refactoring of gong struct identifier
func GetGongstructInstancesMap[Type Gongstruct]() *map[string]*Type {
	var ret Type

	switch any(ret).(type) {
	// insertion point for generic get functions
	case Arrow:
		return any(&Stage.Arrows_mapString).(*map[string]*Type)
	case Bar:
		return any(&Stage.Bars_mapString).(*map[string]*Type)
	case Gantt:
		return any(&Stage.Gantts_mapString).(*map[string]*Type)
	case Group:
		return any(&Stage.Groups_mapString).(*map[string]*Type)
	case Lane:
		return any(&Stage.Lanes_mapString).(*map[string]*Type)
	case LaneUse:
		return any(&Stage.LaneUses_mapString).(*map[string]*Type)
	case Milestone:
		return any(&Stage.Milestones_mapString).(*map[string]*Type)
	default:
		return nil
	}
}

// GetAssociationName is a generic function that returns an instance of Type
// where each association is filled with an instance whose name is the name of the association
//
// This function can be handy for generating navigation function that are refactorable
func GetAssociationName[Type Gongstruct]() *Type {
	var ret Type

	switch any(ret).(type) {
	// insertion point for instance with special fields
	case Arrow:
		return any(&Arrow{
			// Initialisation of associations
			// field is initialized with an instance of Bar with the name of the field
			From: &Bar{Name: "From"},
			// field is initialized with an instance of Bar with the name of the field
			To: &Bar{Name: "To"},
		}).(*Type)
	case Bar:
		return any(&Bar{
			// Initialisation of associations
		}).(*Type)
	case Gantt:
		return any(&Gantt{
			// Initialisation of associations
			// field is initialized with an instance of Lane with the name of the field
			Lanes: []*Lane{{Name: "Lanes"}},
			// field is initialized with an instance of Milestone with the name of the field
			Milestones: []*Milestone{{Name: "Milestones"}},
			// field is initialized with an instance of Group with the name of the field
			Groups: []*Group{{Name: "Groups"}},
			// field is initialized with an instance of Arrow with the name of the field
			Arrows: []*Arrow{{Name: "Arrows"}},
		}).(*Type)
	case Group:
		return any(&Group{
			// Initialisation of associations
			// field is initialized with an instance of Lane with the name of the field
			GroupLanes: []*Lane{{Name: "GroupLanes"}},
		}).(*Type)
	case Lane:
		return any(&Lane{
			// Initialisation of associations
			// field is initialized with an instance of Bar with the name of the field
			Bars: []*Bar{{Name: "Bars"}},
		}).(*Type)
	case LaneUse:
		return any(&LaneUse{
			// Initialisation of associations
			// field is initialized with an instance of Lane with the name of the field
			Lane: &Lane{Name: "Lane"},
		}).(*Type)
	case Milestone:
		return any(&Milestone{
			// Initialisation of associations
			// field is initialized with an instance of LaneUse with the name of the field
			LanesToDisplayMilestoneUse: []*LaneUse{{Name: "LanesToDisplayMilestoneUse"}},
		}).(*Type)
	default:
		return nil
	}
}

// GetPointerReverseMap allows backtrack navigation of any Start.Fieldname
// associations (0..1) that is a pointer from one staged Gongstruct (type Start)
// instances to another (type End)
//
// The function provides a map with keys as instances of End and values to arrays of *Start
// the map is construed by iterating over all Start instances and populationg keys with End instances
// and values with slice of Start instances
func GetPointerReverseMap[Start, End Gongstruct](fieldname string) map[*End][]*Start {
	var ret Start

	switch any(ret).(type) {
	// insertion point of functions that provide maps for reverse associations
	// reverse maps of direct associations of Arrow
	case Arrow:
		switch fieldname {
		// insertion point for per direct association field
		case "From":
			res := make(map[*Bar][]*Arrow)
			for arrow := range Stage.Arrows {
				if arrow.From != nil {
					bar_ := arrow.From
					var arrows []*Arrow
					_, ok := res[bar_]
					if ok {
						arrows = res[bar_]
					} else {
						arrows = make([]*Arrow, 0)
					}
					arrows = append(arrows, arrow)
					res[bar_] = arrows
				}
			}
			return any(res).(map[*End][]*Start)
		case "To":
			res := make(map[*Bar][]*Arrow)
			for arrow := range Stage.Arrows {
				if arrow.To != nil {
					bar_ := arrow.To
					var arrows []*Arrow
					_, ok := res[bar_]
					if ok {
						arrows = res[bar_]
					} else {
						arrows = make([]*Arrow, 0)
					}
					arrows = append(arrows, arrow)
					res[bar_] = arrows
				}
			}
			return any(res).(map[*End][]*Start)
		}
	// reverse maps of direct associations of Bar
	case Bar:
		switch fieldname {
		// insertion point for per direct association field
		}
	// reverse maps of direct associations of Gantt
	case Gantt:
		switch fieldname {
		// insertion point for per direct association field
		}
	// reverse maps of direct associations of Group
	case Group:
		switch fieldname {
		// insertion point for per direct association field
		}
	// reverse maps of direct associations of Lane
	case Lane:
		switch fieldname {
		// insertion point for per direct association field
		}
	// reverse maps of direct associations of LaneUse
	case LaneUse:
		switch fieldname {
		// insertion point for per direct association field
		case "Lane":
			res := make(map[*Lane][]*LaneUse)
			for laneuse := range Stage.LaneUses {
				if laneuse.Lane != nil {
					lane_ := laneuse.Lane
					var laneuses []*LaneUse
					_, ok := res[lane_]
					if ok {
						laneuses = res[lane_]
					} else {
						laneuses = make([]*LaneUse, 0)
					}
					laneuses = append(laneuses, laneuse)
					res[lane_] = laneuses
				}
			}
			return any(res).(map[*End][]*Start)
		}
	// reverse maps of direct associations of Milestone
	case Milestone:
		switch fieldname {
		// insertion point for per direct association field
		}
	}
	return nil
}

// GetSliceOfPointersReverseMap allows backtrack navigation of any Start.Fieldname
// associations (0..N) between one staged Gongstruct instances and many others
//
// The function provides a map with keys as instances of End and values to *Start instances
// the map is construed by iterating over all Start instances and populating keys with End instances
// and values with the Start instances
func GetSliceOfPointersReverseMap[Start, End Gongstruct](fieldname string) map[*End]*Start {
	var ret Start

	switch any(ret).(type) {
	// insertion point of functions that provide maps for reverse associations
	// reverse maps of direct associations of Arrow
	case Arrow:
		switch fieldname {
		// insertion point for per direct association field
		}
	// reverse maps of direct associations of Bar
	case Bar:
		switch fieldname {
		// insertion point for per direct association field
		}
	// reverse maps of direct associations of Gantt
	case Gantt:
		switch fieldname {
		// insertion point for per direct association field
		case "Lanes":
			res := make(map[*Lane]*Gantt)
			for gantt := range Stage.Gantts {
				for _, lane_ := range gantt.Lanes {
					res[lane_] = gantt
				}
			}
			return any(res).(map[*End]*Start)
		case "Milestones":
			res := make(map[*Milestone]*Gantt)
			for gantt := range Stage.Gantts {
				for _, milestone_ := range gantt.Milestones {
					res[milestone_] = gantt
				}
			}
			return any(res).(map[*End]*Start)
		case "Groups":
			res := make(map[*Group]*Gantt)
			for gantt := range Stage.Gantts {
				for _, group_ := range gantt.Groups {
					res[group_] = gantt
				}
			}
			return any(res).(map[*End]*Start)
		case "Arrows":
			res := make(map[*Arrow]*Gantt)
			for gantt := range Stage.Gantts {
				for _, arrow_ := range gantt.Arrows {
					res[arrow_] = gantt
				}
			}
			return any(res).(map[*End]*Start)
		}
	// reverse maps of direct associations of Group
	case Group:
		switch fieldname {
		// insertion point for per direct association field
		case "GroupLanes":
			res := make(map[*Lane]*Group)
			for group := range Stage.Groups {
				for _, lane_ := range group.GroupLanes {
					res[lane_] = group
				}
			}
			return any(res).(map[*End]*Start)
		}
	// reverse maps of direct associations of Lane
	case Lane:
		switch fieldname {
		// insertion point for per direct association field
		case "Bars":
			res := make(map[*Bar]*Lane)
			for lane := range Stage.Lanes {
				for _, bar_ := range lane.Bars {
					res[bar_] = lane
				}
			}
			return any(res).(map[*End]*Start)
		}
	// reverse maps of direct associations of LaneUse
	case LaneUse:
		switch fieldname {
		// insertion point for per direct association field
		}
	// reverse maps of direct associations of Milestone
	case Milestone:
		switch fieldname {
		// insertion point for per direct association field
		case "LanesToDisplayMilestoneUse":
			res := make(map[*LaneUse]*Milestone)
			for milestone := range Stage.Milestones {
				for _, laneuse_ := range milestone.LanesToDisplayMilestoneUse {
					res[laneuse_] = milestone
				}
			}
			return any(res).(map[*End]*Start)
		}
	}
	return nil
}

// GetGongstructName returns the name of the Gongstruct
// this can be usefull if one want program robust to refactoring
func GetGongstructName[Type Gongstruct]() (res string) {

	var ret Type

	switch any(ret).(type) {
	// insertion point for generic get gongstruct name
	case Arrow:
		res = "Arrow"
	case Bar:
		res = "Bar"
	case Gantt:
		res = "Gantt"
	case Group:
		res = "Group"
	case Lane:
		res = "Lane"
	case LaneUse:
		res = "LaneUse"
	case Milestone:
		res = "Milestone"
	}
	return res
}

// GetFields return the array of the fields
func GetFields[Type Gongstruct]() (res []string) {

	var ret Type

	switch any(ret).(type) {
	// insertion point for generic get gongstruct name
	case Arrow:
		res = []string{"Name", "From", "To", "OptionnalColor", "OptionnalStroke"}
	case Bar:
		res = []string{"Name", "Start", "End", "OptionnalColor", "OptionnalStroke", "FillOpacity", "StrokeWidth", "StrokeDashArray"}
	case Gantt:
		res = []string{"Name", "ComputedStart", "ComputedEnd", "UseManualStartAndEndDates", "ManualStart", "ManualEnd", "LaneHeight", "RatioBarToLaneHeight", "YTopMargin", "XLeftText", "TextHeight", "XLeftLanes", "XRightMargin", "ArrowLengthToTheRightOfStartBar", "ArrowTipLenght", "TimeLine_Color", "TimeLine_FillOpacity", "TimeLine_Stroke", "TimeLine_StrokeWidth", "Group_Stroke", "Group_StrokeWidth", "Group_StrokeDashArray", "DateYOffset", "AlignOnStartEndOnYearStart", "Lanes", "Milestones", "Groups", "Arrows"}
	case Group:
		res = []string{"Name", "GroupLanes"}
	case Lane:
		res = []string{"Name", "Order", "Bars"}
	case LaneUse:
		res = []string{"Name", "Lane"}
	case Milestone:
		res = []string{"Name", "Date", "DisplayVerticalBar", "LanesToDisplayMilestoneUse"}
	}
	return
}

func GetFieldStringValue[Type Gongstruct](instance Type, fieldName string) (res string) {
	var ret Type

	switch any(ret).(type) {
	// insertion point for generic get gongstruct field value
	case Arrow:
		switch fieldName {
		// string value of fields
		case "Name":
			res = any(instance).(Arrow).Name
		case "From":
			if any(instance).(Arrow).From != nil {
				res = any(instance).(Arrow).From.Name
			}
		case "To":
			if any(instance).(Arrow).To != nil {
				res = any(instance).(Arrow).To.Name
			}
		case "OptionnalColor":
			res = any(instance).(Arrow).OptionnalColor
		case "OptionnalStroke":
			res = any(instance).(Arrow).OptionnalStroke
		}
	case Bar:
		switch fieldName {
		// string value of fields
		case "Name":
			res = any(instance).(Bar).Name
		case "Start":
			res = any(instance).(Bar).Start.String()
		case "End":
			res = any(instance).(Bar).End.String()
		case "OptionnalColor":
			res = any(instance).(Bar).OptionnalColor
		case "OptionnalStroke":
			res = any(instance).(Bar).OptionnalStroke
		case "FillOpacity":
			res = fmt.Sprintf("%f", any(instance).(Bar).FillOpacity)
		case "StrokeWidth":
			res = fmt.Sprintf("%f", any(instance).(Bar).StrokeWidth)
		case "StrokeDashArray":
			res = any(instance).(Bar).StrokeDashArray
		}
	case Gantt:
		switch fieldName {
		// string value of fields
		case "Name":
			res = any(instance).(Gantt).Name
		case "ComputedStart":
			res = any(instance).(Gantt).ComputedStart.String()
		case "ComputedEnd":
			res = any(instance).(Gantt).ComputedEnd.String()
		case "UseManualStartAndEndDates":
			res = fmt.Sprintf("%t", any(instance).(Gantt).UseManualStartAndEndDates)
		case "ManualStart":
			res = any(instance).(Gantt).ManualStart.String()
		case "ManualEnd":
			res = any(instance).(Gantt).ManualEnd.String()
		case "LaneHeight":
			res = fmt.Sprintf("%f", any(instance).(Gantt).LaneHeight)
		case "RatioBarToLaneHeight":
			res = fmt.Sprintf("%f", any(instance).(Gantt).RatioBarToLaneHeight)
		case "YTopMargin":
			res = fmt.Sprintf("%f", any(instance).(Gantt).YTopMargin)
		case "XLeftText":
			res = fmt.Sprintf("%f", any(instance).(Gantt).XLeftText)
		case "TextHeight":
			res = fmt.Sprintf("%f", any(instance).(Gantt).TextHeight)
		case "XLeftLanes":
			res = fmt.Sprintf("%f", any(instance).(Gantt).XLeftLanes)
		case "XRightMargin":
			res = fmt.Sprintf("%f", any(instance).(Gantt).XRightMargin)
		case "ArrowLengthToTheRightOfStartBar":
			res = fmt.Sprintf("%f", any(instance).(Gantt).ArrowLengthToTheRightOfStartBar)
		case "ArrowTipLenght":
			res = fmt.Sprintf("%f", any(instance).(Gantt).ArrowTipLenght)
		case "TimeLine_Color":
			res = any(instance).(Gantt).TimeLine_Color
		case "TimeLine_FillOpacity":
			res = fmt.Sprintf("%f", any(instance).(Gantt).TimeLine_FillOpacity)
		case "TimeLine_Stroke":
			res = any(instance).(Gantt).TimeLine_Stroke
		case "TimeLine_StrokeWidth":
			res = fmt.Sprintf("%f", any(instance).(Gantt).TimeLine_StrokeWidth)
		case "Group_Stroke":
			res = any(instance).(Gantt).Group_Stroke
		case "Group_StrokeWidth":
			res = fmt.Sprintf("%f", any(instance).(Gantt).Group_StrokeWidth)
		case "Group_StrokeDashArray":
			res = any(instance).(Gantt).Group_StrokeDashArray
		case "DateYOffset":
			res = fmt.Sprintf("%f", any(instance).(Gantt).DateYOffset)
		case "AlignOnStartEndOnYearStart":
			res = fmt.Sprintf("%t", any(instance).(Gantt).AlignOnStartEndOnYearStart)
		case "Lanes":
			for idx, __instance__ := range any(instance).(Gantt).Lanes {
				if idx > 0 {
					res += "\n"
				}
				res += __instance__.Name
			}
		case "Milestones":
			for idx, __instance__ := range any(instance).(Gantt).Milestones {
				if idx > 0 {
					res += "\n"
				}
				res += __instance__.Name
			}
		case "Groups":
			for idx, __instance__ := range any(instance).(Gantt).Groups {
				if idx > 0 {
					res += "\n"
				}
				res += __instance__.Name
			}
		case "Arrows":
			for idx, __instance__ := range any(instance).(Gantt).Arrows {
				if idx > 0 {
					res += "\n"
				}
				res += __instance__.Name
			}
		}
	case Group:
		switch fieldName {
		// string value of fields
		case "Name":
			res = any(instance).(Group).Name
		case "GroupLanes":
			for idx, __instance__ := range any(instance).(Group).GroupLanes {
				if idx > 0 {
					res += "\n"
				}
				res += __instance__.Name
			}
		}
	case Lane:
		switch fieldName {
		// string value of fields
		case "Name":
			res = any(instance).(Lane).Name
		case "Order":
			res = fmt.Sprintf("%d", any(instance).(Lane).Order)
		case "Bars":
			for idx, __instance__ := range any(instance).(Lane).Bars {
				if idx > 0 {
					res += "\n"
				}
				res += __instance__.Name
			}
		}
	case LaneUse:
		switch fieldName {
		// string value of fields
		case "Name":
			res = any(instance).(LaneUse).Name
		case "Lane":
			if any(instance).(LaneUse).Lane != nil {
				res = any(instance).(LaneUse).Lane.Name
			}
		}
	case Milestone:
		switch fieldName {
		// string value of fields
		case "Name":
			res = any(instance).(Milestone).Name
		case "Date":
			res = any(instance).(Milestone).Date.String()
		case "DisplayVerticalBar":
			res = fmt.Sprintf("%t", any(instance).(Milestone).DisplayVerticalBar)
		case "LanesToDisplayMilestoneUse":
			for idx, __instance__ := range any(instance).(Milestone).LanesToDisplayMilestoneUse {
				if idx > 0 {
					res += "\n"
				}
				res += __instance__.Name
			}
		}
	}
	return
}

// insertion point of enum utility functions
