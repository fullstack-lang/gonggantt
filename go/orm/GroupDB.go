// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"errors"
	"fmt"
	"log"
	"sort"
	"time"

	"github.com/jinzhu/gorm"

	"github.com/fullstack-lang/gonggantt/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Group sql.NullBool
var __Group_time__dummyDeclaration time.Duration
var dummy_Group_sort sort.Float64Slice

// GroupAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model groupAPI
type GroupAPI struct {
	models.Group

	// insertion for fields declaration
	// Declation for basic field groupDB.Name {{BasicKind}} (to be completed)
	Name_Data sql.NullString

	// Implementation of a reverse ID for field Gantt{}.Groups []*Group
	Gantt_GroupsDBID sql.NullInt64
	Gantt_GroupsDBID_Index sql.NullInt64

	// end of insertion
}

// GroupDB describes a group in the database
//
// It incorporates all fields : from the model, from the generated field for the API and the GORM ID
//
// swagger:model groupDB
type GroupDB struct {
	gorm.Model

	GroupAPI
}

// GroupDBs arrays groupDBs
// swagger:response groupDBsResponse
type GroupDBs []GroupDB

// GroupDBResponse provides response
// swagger:response groupDBResponse
type GroupDBResponse struct {
	GroupDB
}

type BackRepoGroupStruct struct {
	// stores GroupDB according to their gorm ID
	Map_GroupDBID_GroupDB *map[uint]*GroupDB

	// stores GroupDB ID according to Group address
	Map_GroupPtr_GroupDBID *map[*models.Group]uint

	// stores Group according to their gorm ID
	Map_GroupDBID_GroupPtr *map[uint]*models.Group

	db *gorm.DB
}

// BackRepoGroup.Init set up the BackRepo of the Group
func (backRepoGroup *BackRepoGroupStruct) Init(db *gorm.DB) (Error error) {

	if backRepoGroup.Map_GroupDBID_GroupPtr != nil {
		err := errors.New("In Init, backRepoGroup.Map_GroupDBID_GroupPtr should be nil")
		return err
	}

	if backRepoGroup.Map_GroupDBID_GroupDB != nil {
		err := errors.New("In Init, backRepoGroup.Map_GroupDBID_GroupDB should be nil")
		return err
	}

	if backRepoGroup.Map_GroupPtr_GroupDBID != nil {
		err := errors.New("In Init, backRepoGroup.Map_GroupPtr_GroupDBID should be nil")
		return err
	}

	tmp := make(map[uint]*models.Group, 0)
	backRepoGroup.Map_GroupDBID_GroupPtr = &tmp

	tmpDB := make(map[uint]*GroupDB, 0)
	backRepoGroup.Map_GroupDBID_GroupDB = &tmpDB

	tmpID := make(map[*models.Group]uint, 0)
	backRepoGroup.Map_GroupPtr_GroupDBID = &tmpID

	backRepoGroup.db = db
	return
}

// BackRepoGroup.CommitPhaseOne commits all staged instances of Group to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoGroup *BackRepoGroupStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for group := range stage.Groups {
		backRepoGroup.CommitPhaseOneInstance(group)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, group := range *backRepoGroup.Map_GroupDBID_GroupPtr {
		if _, ok := stage.Groups[group]; !ok {
			backRepoGroup.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoGroup.CommitDeleteInstance commits deletion of Group to the BackRepo
func (backRepoGroup *BackRepoGroupStruct) CommitDeleteInstance(id uint) (Error error) {

	group := (*backRepoGroup.Map_GroupDBID_GroupPtr)[id]

	// group is not staged anymore, remove groupDB
	groupDB := (*backRepoGroup.Map_GroupDBID_GroupDB)[id]
	query := backRepoGroup.db.Unscoped().Delete(&groupDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete((*backRepoGroup.Map_GroupPtr_GroupDBID), group)
	delete((*backRepoGroup.Map_GroupDBID_GroupPtr), id)
	delete((*backRepoGroup.Map_GroupDBID_GroupDB), id)

	return
}

// BackRepoGroup.CommitPhaseOneInstance commits group staged instances of Group to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoGroup *BackRepoGroupStruct) CommitPhaseOneInstance(group *models.Group) (Error error) {

	// check if the group is not commited yet
	if _, ok := (*backRepoGroup.Map_GroupPtr_GroupDBID)[group]; ok {
		return
	}

	// initiate group
	var groupDB GroupDB
	groupDB.Group = *group

	query := backRepoGroup.db.Create(&groupDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	(*backRepoGroup.Map_GroupPtr_GroupDBID)[group] = groupDB.ID
	(*backRepoGroup.Map_GroupDBID_GroupPtr)[groupDB.ID] = group
	(*backRepoGroup.Map_GroupDBID_GroupDB)[groupDB.ID] = &groupDB

	return
}

// BackRepoGroup.CommitPhaseTwo commits all staged instances of Group to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGroup *BackRepoGroupStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, group := range *backRepoGroup.Map_GroupDBID_GroupPtr {
		backRepoGroup.CommitPhaseTwoInstance(backRepo, idx, group)
	}

	return
}

// BackRepoGroup.CommitPhaseTwoInstance commits {{structname }} of models.Group to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGroup *BackRepoGroupStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, group *models.Group) (Error error) {

	// fetch matching groupDB
	if groupDB, ok := (*backRepoGroup.Map_GroupDBID_GroupDB)[idx]; ok {

		{
			{
				// insertion point for fields commit
				groupDB.Name_Data.String = group.Name
				groupDB.Name_Data.Valid = true

				// commit a slice of pointer translates to update reverse pointer to Lane, i.e.
				for _, lane := range group.GroupLanes {
					index := 0
					if laneDBID, ok := (*backRepo.BackRepoLane.Map_LanePtr_LaneDBID)[lane]; ok {
						if laneDB, ok := (*backRepo.BackRepoLane.Map_LaneDBID_LaneDB)[laneDBID]; ok {
							laneDB.Group_GroupLanesDBID.Int64 = int64(groupDB.ID)
							laneDB.Group_GroupLanesDBID.Valid = true
							laneDB.Group_GroupLanesDBID_Index.Int64 = int64(index)
							index = index + 1
							laneDB.Group_GroupLanesDBID_Index.Valid = true
							if q := backRepoGroup.db.Save(&laneDB); q.Error != nil {
								return q.Error
							}
						}
					}
				}

			}
		}
		query := backRepoGroup.db.Save(&groupDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Group intance %s", group.Name))
		return err
	}

	return
}

// BackRepoGroup.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One is the creation of instance in the stage
//
// NOTE: the is supposed to have been reset before
//
func (backRepoGroup *BackRepoGroupStruct) CheckoutPhaseOne() (Error error) {

	groupDBArray := make([]GroupDB, 0)
	query := backRepoGroup.db.Find(&groupDBArray)
	if query.Error != nil {
		return query.Error
	}

	// copy orm objects to the the map
	for _, groupDB := range groupDBArray {
		backRepoGroup.CheckoutPhaseOneInstance(&groupDB)
	}

	return
}

// CheckoutPhaseOneInstance takes a groupDB that has been found in the DB, updates the backRepo and stages the
// models version of the groupDB
func (backRepoGroup *BackRepoGroupStruct) CheckoutPhaseOneInstance(groupDB *GroupDB) (Error error) {

	// if absent, create entries in the backRepoGroup maps.
	groupWithNewFieldValues := groupDB.Group
	if _, ok := (*backRepoGroup.Map_GroupDBID_GroupPtr)[groupDB.ID]; !ok {

		(*backRepoGroup.Map_GroupDBID_GroupPtr)[groupDB.ID] = &groupWithNewFieldValues
		(*backRepoGroup.Map_GroupPtr_GroupDBID)[&groupWithNewFieldValues] = groupDB.ID

		// append model store with the new element
		groupWithNewFieldValues.Stage()
	}
	groupDBWithNewFieldValues := *groupDB
	(*backRepoGroup.Map_GroupDBID_GroupDB)[groupDB.ID] = &groupDBWithNewFieldValues

	return
}

// BackRepoGroup.CheckoutPhaseTwo Checkouts all staged instances of Group to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGroup *BackRepoGroupStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, groupDB := range *backRepoGroup.Map_GroupDBID_GroupDB {
		backRepoGroup.CheckoutPhaseTwoInstance(backRepo, groupDB)
	}
	return
}

// BackRepoGroup.CheckoutPhaseTwoInstance Checkouts staged instances of Group to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGroup *BackRepoGroupStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, groupDB *GroupDB) (Error error) {

	group := (*backRepoGroup.Map_GroupDBID_GroupPtr)[groupDB.ID]
	_ = group // sometimes, there is no code generated. This lines voids the "unused variable" compilation error
	{
		{
			// insertion point for checkout, i.e. update of fields of stage instance from fields of back repo instances
			//
			group.Name = groupDB.Name_Data.String

			// parse all LaneDB and redeem the array of poiners to Group
			// first reset the slice
			group.GroupLanes = group.GroupLanes[:0]
			for _, LaneDB := range *backRepo.BackRepoLane.Map_LaneDBID_LaneDB {
				if LaneDB.Group_GroupLanesDBID.Int64 == int64(groupDB.ID) {
					Lane := (*backRepo.BackRepoLane.Map_LaneDBID_LanePtr)[LaneDB.ID]
					group.GroupLanes = append(group.GroupLanes, Lane)
				}
			}
			
			// sort the array according to the order
			sort.Slice(group.GroupLanes, func(i, j int) bool {
				laneDB_i_ID := (*backRepo.BackRepoLane.Map_LanePtr_LaneDBID)[group.GroupLanes[i]]
				laneDB_j_ID := (*backRepo.BackRepoLane.Map_LanePtr_LaneDBID)[group.GroupLanes[j]]

				laneDB_i := (*backRepo.BackRepoLane.Map_LaneDBID_LaneDB)[laneDB_i_ID]
				laneDB_j := (*backRepo.BackRepoLane.Map_LaneDBID_LaneDB)[laneDB_j_ID]

				return laneDB_i.Group_GroupLanesDBID_Index.Int64 < laneDB_j.Group_GroupLanesDBID_Index.Int64
			})

		}
	}
	return
}

// CommitGroup allows commit of a single group (if already staged)
func (backRepo *BackRepoStruct) CommitGroup(group *models.Group) {
	backRepo.BackRepoGroup.CommitPhaseOneInstance(group)
	if id, ok := (*backRepo.BackRepoGroup.Map_GroupPtr_GroupDBID)[group]; ok {
		backRepo.BackRepoGroup.CommitPhaseTwoInstance(backRepo, id, group)
	}
}

// CommitGroup allows checkout of a single group (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutGroup(group *models.Group) {
	// check if the group is staged
	if _, ok := (*backRepo.BackRepoGroup.Map_GroupPtr_GroupDBID)[group]; ok {

		if id, ok := (*backRepo.BackRepoGroup.Map_GroupPtr_GroupDBID)[group]; ok {
			var groupDB GroupDB
			groupDB.ID = id

			if err := backRepo.BackRepoGroup.db.First(&groupDB, id).Error; err != nil {
				log.Panicln("CheckoutGroup : Problem with getting object with id:", id)
			}
			backRepo.BackRepoGroup.CheckoutPhaseOneInstance(&groupDB)
			backRepo.BackRepoGroup.CheckoutPhaseTwoInstance(backRepo, &groupDB)
		}
	}
}
