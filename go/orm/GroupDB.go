// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"github.com/jinzhu/gorm"

	"github.com/fullstack-lang/gonggantt/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Group sql.NullBool
var __Group_time__dummyDeclaration time.Duration
var dummy_Group_sort sort.Float64Slice

// GroupAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model groupAPI
type GroupAPI struct {
	gorm.Model

	models.Group

	// encoding of pointers
	GroupPointersEnconding
}

// GroupPointersEnconding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type GroupPointersEnconding struct {
	// insertion for pointer fields encoding declaration
	// Implementation of a reverse ID for field Gantt{}.Groups []*Group
	Gantt_GroupsDBID sql.NullInt64

	// implementation of the index of the withing the slice
	Gantt_GroupsDBID_Index sql.NullInt64
}

// GroupDB describes a group in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model groupDB
type GroupDB struct {
	gorm.Model

	// insertion for basic fields declaration
	// Declation for basic field groupDB.Name {{BasicKind}} (to be completed)
	Name_Data sql.NullString

	// encoding of pointers
	GroupPointersEnconding
}

// GroupDBs arrays groupDBs
// swagger:response groupDBsResponse
type GroupDBs []GroupDB

// GroupDBResponse provides response
// swagger:response groupDBResponse
type GroupDBResponse struct {
	GroupDB
}

type BackRepoGroupStruct struct {
	// stores GroupDB according to their gorm ID
	Map_GroupDBID_GroupDB *map[uint]*GroupDB

	// stores GroupDB ID according to Group address
	Map_GroupPtr_GroupDBID *map[*models.Group]uint

	// stores Group according to their gorm ID
	Map_GroupDBID_GroupPtr *map[uint]*models.Group

	db *gorm.DB
}

func (backRepoGroup *BackRepoGroupStruct) GetDB() *gorm.DB {
	return backRepoGroup.db
}

// GetGroupDBFromGroupPtr is a handy function to access the back repo instance from the stage instance
func (backRepoGroup *BackRepoGroupStruct) GetGroupDBFromGroupPtr(group *models.Group) (groupDB *GroupDB) {
	id := (*backRepoGroup.Map_GroupPtr_GroupDBID)[group]
	groupDB = (*backRepoGroup.Map_GroupDBID_GroupDB)[id]
	return
}

// BackRepoGroup.Init set up the BackRepo of the Group
func (backRepoGroup *BackRepoGroupStruct) Init(db *gorm.DB) (Error error) {

	if backRepoGroup.Map_GroupDBID_GroupPtr != nil {
		err := errors.New("In Init, backRepoGroup.Map_GroupDBID_GroupPtr should be nil")
		return err
	}

	if backRepoGroup.Map_GroupDBID_GroupDB != nil {
		err := errors.New("In Init, backRepoGroup.Map_GroupDBID_GroupDB should be nil")
		return err
	}

	if backRepoGroup.Map_GroupPtr_GroupDBID != nil {
		err := errors.New("In Init, backRepoGroup.Map_GroupPtr_GroupDBID should be nil")
		return err
	}

	tmp := make(map[uint]*models.Group, 0)
	backRepoGroup.Map_GroupDBID_GroupPtr = &tmp

	tmpDB := make(map[uint]*GroupDB, 0)
	backRepoGroup.Map_GroupDBID_GroupDB = &tmpDB

	tmpID := make(map[*models.Group]uint, 0)
	backRepoGroup.Map_GroupPtr_GroupDBID = &tmpID

	backRepoGroup.db = db
	return
}

// BackRepoGroup.CommitPhaseOne commits all staged instances of Group to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoGroup *BackRepoGroupStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for group := range stage.Groups {
		backRepoGroup.CommitPhaseOneInstance(group)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, group := range *backRepoGroup.Map_GroupDBID_GroupPtr {
		if _, ok := stage.Groups[group]; !ok {
			backRepoGroup.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoGroup.CommitDeleteInstance commits deletion of Group to the BackRepo
func (backRepoGroup *BackRepoGroupStruct) CommitDeleteInstance(id uint) (Error error) {

	group := (*backRepoGroup.Map_GroupDBID_GroupPtr)[id]

	// group is not staged anymore, remove groupDB
	groupDB := (*backRepoGroup.Map_GroupDBID_GroupDB)[id]
	query := backRepoGroup.db.Unscoped().Delete(&groupDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete((*backRepoGroup.Map_GroupPtr_GroupDBID), group)
	delete((*backRepoGroup.Map_GroupDBID_GroupPtr), id)
	delete((*backRepoGroup.Map_GroupDBID_GroupDB), id)

	return
}

// BackRepoGroup.CommitPhaseOneInstance commits group staged instances of Group to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoGroup *BackRepoGroupStruct) CommitPhaseOneInstance(group *models.Group) (Error error) {

	// check if the group is not commited yet
	if _, ok := (*backRepoGroup.Map_GroupPtr_GroupDBID)[group]; ok {
		return
	}

	// initiate group
	var groupDB GroupDB
	groupDB.CopyBasicFieldsFromGroup(group)

	query := backRepoGroup.db.Create(&groupDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	(*backRepoGroup.Map_GroupPtr_GroupDBID)[group] = groupDB.ID
	(*backRepoGroup.Map_GroupDBID_GroupPtr)[groupDB.ID] = group
	(*backRepoGroup.Map_GroupDBID_GroupDB)[groupDB.ID] = &groupDB

	return
}

// BackRepoGroup.CommitPhaseTwo commits all staged instances of Group to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGroup *BackRepoGroupStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, group := range *backRepoGroup.Map_GroupDBID_GroupPtr {
		backRepoGroup.CommitPhaseTwoInstance(backRepo, idx, group)
	}

	return
}

// BackRepoGroup.CommitPhaseTwoInstance commits {{structname }} of models.Group to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGroup *BackRepoGroupStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, group *models.Group) (Error error) {

	// fetch matching groupDB
	if groupDB, ok := (*backRepoGroup.Map_GroupDBID_GroupDB)[idx]; ok {

		groupDB.CopyBasicFieldsFromGroup(group)

		// insertion point for translating pointers encodings into actual pointers
		// This loop encodes the slice of pointers group.GroupLanes into the back repo.
		// Each back repo instance at the end of the association encode the ID of the association start
		// into a dedicated field for coding the association. The back repo instance is then saved to the db
		for idx, laneAssocEnd := range group.GroupLanes {

			// get the back repo instance at the association end
			laneAssocEnd_DB :=
				backRepo.BackRepoLane.GetLaneDBFromLanePtr( laneAssocEnd)

			// encode reverse pointer in the association end back repo instance
			laneAssocEnd_DB.Group_GroupLanesDBID.Int64 = int64(groupDB.ID)
			laneAssocEnd_DB.Group_GroupLanesDBID.Valid = true
			laneAssocEnd_DB.Group_GroupLanesDBID_Index.Int64 = int64(idx)
			laneAssocEnd_DB.Group_GroupLanesDBID_Index.Valid = true
			if q := backRepoGroup.db.Save(laneAssocEnd_DB); q.Error != nil {
				return q.Error
			}
		}

		query := backRepoGroup.db.Save(&groupDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Group intance %s", group.Name))
		return err
	}

	return
}

// BackRepoGroup.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One is the creation of instance in the stage
//
// NOTE: the is supposed to have been reset before
//
func (backRepoGroup *BackRepoGroupStruct) CheckoutPhaseOne() (Error error) {

	groupDBArray := make([]GroupDB, 0)
	query := backRepoGroup.db.Find(&groupDBArray)
	if query.Error != nil {
		return query.Error
	}

	// copy orm objects to the the map
	for _, groupDB := range groupDBArray {
		backRepoGroup.CheckoutPhaseOneInstance(&groupDB)
	}

	return
}

// CheckoutPhaseOneInstance takes a groupDB that has been found in the DB, updates the backRepo and stages the
// models version of the groupDB
func (backRepoGroup *BackRepoGroupStruct) CheckoutPhaseOneInstance(groupDB *GroupDB) (Error error) {

	group, ok := (*backRepoGroup.Map_GroupDBID_GroupPtr)[groupDB.ID]
	if !ok {
		group = new(models.Group)

		(*backRepoGroup.Map_GroupDBID_GroupPtr)[groupDB.ID] = group
		(*backRepoGroup.Map_GroupPtr_GroupDBID)[group] = groupDB.ID

		// append model store with the new element
		group.Stage()
	}
	groupDB.CopyBasicFieldsToGroup(group)

	// preserve pointer to aclassDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_GroupDBID_GroupDB)[groupDB hold variable pointers
	groupDB_Data := *groupDB
	preservedPtrToGroup := &groupDB_Data
	(*backRepoGroup.Map_GroupDBID_GroupDB)[groupDB.ID] = preservedPtrToGroup

	return
}

// BackRepoGroup.CheckoutPhaseTwo Checkouts all staged instances of Group to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGroup *BackRepoGroupStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, groupDB := range *backRepoGroup.Map_GroupDBID_GroupDB {
		backRepoGroup.CheckoutPhaseTwoInstance(backRepo, groupDB)
	}
	return
}

// BackRepoGroup.CheckoutPhaseTwoInstance Checkouts staged instances of Group to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGroup *BackRepoGroupStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, groupDB *GroupDB) (Error error) {

	group := (*backRepoGroup.Map_GroupDBID_GroupPtr)[groupDB.ID]
	_ = group // sometimes, there is no code generated. This lines voids the "unused variable" compilation error

	// insertion point for checkout of pointer encoding
	// This loop redeem group.GroupLanes in the stage from the encode in the back repo
	// It parses all LaneDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	group.GroupLanes = group.GroupLanes[:0]
	// 2. loop all instances in the type in the association end
	for _, laneDB_AssocEnd := range *backRepo.BackRepoLane.Map_LaneDBID_LaneDB {
		// 3. Does the ID encoding at the end and the ID at the start matches ?
		if laneDB_AssocEnd.Group_GroupLanesDBID.Int64 == int64(groupDB.ID) {
			// 4. fetch the associated instance in the stage
			lane_AssocEnd := (*backRepo.BackRepoLane.Map_LaneDBID_LanePtr)[laneDB_AssocEnd.ID]
			// 5. append it the association slice
			group.GroupLanes = append(group.GroupLanes, lane_AssocEnd)
		}
	}

	// sort the array according to the order
	sort.Slice(group.GroupLanes, func(i, j int) bool {
		laneDB_i_ID := (*backRepo.BackRepoLane.Map_LanePtr_LaneDBID)[group.GroupLanes[i]]
		laneDB_j_ID := (*backRepo.BackRepoLane.Map_LanePtr_LaneDBID)[group.GroupLanes[j]]

		laneDB_i := (*backRepo.BackRepoLane.Map_LaneDBID_LaneDB)[laneDB_i_ID]
		laneDB_j := (*backRepo.BackRepoLane.Map_LaneDBID_LaneDB)[laneDB_j_ID]

		return laneDB_i.Group_GroupLanesDBID_Index.Int64 < laneDB_j.Group_GroupLanesDBID_Index.Int64
	})

	return
}

// CommitGroup allows commit of a single group (if already staged)
func (backRepo *BackRepoStruct) CommitGroup(group *models.Group) {
	backRepo.BackRepoGroup.CommitPhaseOneInstance(group)
	if id, ok := (*backRepo.BackRepoGroup.Map_GroupPtr_GroupDBID)[group]; ok {
		backRepo.BackRepoGroup.CommitPhaseTwoInstance(backRepo, id, group)
	}
}

// CommitGroup allows checkout of a single group (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutGroup(group *models.Group) {
	// check if the group is staged
	if _, ok := (*backRepo.BackRepoGroup.Map_GroupPtr_GroupDBID)[group]; ok {

		if id, ok := (*backRepo.BackRepoGroup.Map_GroupPtr_GroupDBID)[group]; ok {
			var groupDB GroupDB
			groupDB.ID = id

			if err := backRepo.BackRepoGroup.db.First(&groupDB, id).Error; err != nil {
				log.Panicln("CheckoutGroup : Problem with getting object with id:", id)
			}
			backRepo.BackRepoGroup.CheckoutPhaseOneInstance(&groupDB)
			backRepo.BackRepoGroup.CheckoutPhaseTwoInstance(backRepo, &groupDB)
		}
	}
}

// CopyBasicFieldsToGroupDB is used to copy basic fields between the Stage or the CRUD to the back repo
func (groupDB *GroupDB) CopyBasicFieldsFromGroup(group *models.Group) {
	// insertion point for fields commit
	groupDB.Name_Data.String = group.Name
	groupDB.Name_Data.Valid = true

}

// CopyBasicFieldsToGroupDB is used to copy basic fields between the Stage or the CRUD to the back repo
func (groupDB *GroupDB) CopyBasicFieldsToGroup(group *models.Group) {

	// insertion point for checkout of basic fields (back repo to stage)
	group.Name = groupDB.Name_Data.String
}

// Backup generates a json file from a slice of all GroupDB instances in the backrepo
func (backRepoGroup *BackRepoGroupStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "GroupDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	var forBackup []*GroupDB
	for _, groupDB := range *backRepoGroup.Map_GroupDBID_GroupDB {
		forBackup = append(forBackup, groupDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Panic("Cannot json Group ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Panic("Cannot write the json Group file", err.Error())
	}
}

func (backRepoGroup *BackRepoGroupStruct) Restore(dirPath string) {

	filename := filepath.Join(dirPath, "GroupDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Panic("Cannot restore/open the json Group file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*GroupDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_GroupDBID_GroupDB
	for _, groupDB := range forRestore {

		groupDB_ID := groupDB.ID
		groupDB.ID = 0
		query := backRepoGroup.db.Create(groupDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		if groupDB_ID != groupDB.ID {
			log.Panicf("ID of Group restore ID %d, name %s, has wrong ID %d in DB after create",
				groupDB_ID, groupDB.Name_Data.String, groupDB.ID)
		}
	}

	if err != nil {
		log.Panic("Cannot restore/unmarshall json Group file", err.Error())
	}
}
