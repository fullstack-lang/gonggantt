// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"errors"
	"fmt"
	"log"
	"time"

	"github.com/jinzhu/gorm"
	"github.com/fullstack-lang/gonggantt/go/models"
)

// dummy variable to have the import database/sql wihthout compile failure id no sql is used
var dummy_Lane sql.NullBool
var __Lane_time__dummyDeclaration time.Duration

// LaneAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model laneAPI
type LaneAPI struct {
	models.Lane

	// insertion for fields declaration
	// Declation for basic field laneDB.Name {{BasicKind}} (to be completed)
	Name_Data sql.NullString

	// Declation for basic field laneDB.Order {{BasicKind}} (to be completed)
	Order_Data sql.NullInt64

	// Implementation of a reverse ID for field Gantt{}.Lanes []*Lane
	Gantt_LanesDBID sql.NullInt64

	// end of insertion
}

// LaneDB describes a lane in the database
//
// It incorporates all fields : from the model, from the generated field for the API and the GORM ID
//
// swagger:model laneDB
type LaneDB struct {
	gorm.Model

	LaneAPI
}

// LaneDBs arrays laneDBs
// swagger:response laneDBsResponse
type LaneDBs []LaneDB

// LaneDBResponse provides response
// swagger:response laneDBResponse
type LaneDBResponse struct {
	LaneDB
}

type BackRepoLaneStruct struct {
	// stores LaneDB according to their gorm ID
	Map_LaneDBID_LaneDB *map[uint]*LaneDB

	// stores LaneDB ID according to Lane address
	Map_LanePtr_LaneDBID *map[*models.Lane]uint

	// stores Lane according to their gorm ID
	Map_LaneDBID_LanePtr *map[uint]*models.Lane

	db *gorm.DB
}

// BackRepoLane.Init set up the BackRepo of the Lane
func (backRepoLane *BackRepoLaneStruct) Init(db *gorm.DB) (Error error) {

	if backRepoLane.Map_LaneDBID_LanePtr != nil {
		err := errors.New("In Init, backRepoLane.Map_LaneDBID_LanePtr should be nil")
		return err
	}

	if backRepoLane.Map_LaneDBID_LaneDB != nil {
		err := errors.New("In Init, backRepoLane.Map_LaneDBID_LaneDB should be nil")
		return err
	}

	if backRepoLane.Map_LanePtr_LaneDBID != nil {
		err := errors.New("In Init, backRepoLane.Map_LanePtr_LaneDBID should be nil")
		return err
	}

	tmp := make(map[uint]*models.Lane, 0)
	backRepoLane.Map_LaneDBID_LanePtr = &tmp

	tmpDB := make(map[uint]*LaneDB, 0)
	backRepoLane.Map_LaneDBID_LaneDB = &tmpDB

	tmpID := make(map[*models.Lane]uint, 0)
	backRepoLane.Map_LanePtr_LaneDBID = &tmpID

	backRepoLane.db = db
	return
}

// BackRepoLane.CommitPhaseOne commits all staged instances of Lane to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoLane *BackRepoLaneStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for lane := range stage.Lanes {
		backRepoLane.CommitPhaseOneInstance(lane)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, lane := range *backRepoLane.Map_LaneDBID_LanePtr {
		if _, ok := stage.Lanes[lane]; !ok {
			backRepoLane.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoLane.CommitDeleteInstance commits deletion of Lane to the BackRepo
func (backRepoLane *BackRepoLaneStruct) CommitDeleteInstance(id uint) (Error error) {

	lane := (*backRepoLane.Map_LaneDBID_LanePtr)[id]

	// lane is not staged anymore, remove laneDB
	laneDB := (*backRepoLane.Map_LaneDBID_LaneDB)[id]
	query := backRepoLane.db.Unscoped().Delete(&laneDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete((*backRepoLane.Map_LanePtr_LaneDBID), lane)
	delete((*backRepoLane.Map_LaneDBID_LanePtr), id)
	delete((*backRepoLane.Map_LaneDBID_LaneDB), id)

	return
}

// BackRepoLane.CommitPhaseOneInstance commits lane staged instances of Lane to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoLane *BackRepoLaneStruct) CommitPhaseOneInstance(lane *models.Lane) (Error error) {

	// check if the lane is not commited yet
	if _, ok := (*backRepoLane.Map_LanePtr_LaneDBID)[lane]; ok {
		return
	}

	// initiate lane
	var laneDB LaneDB
	laneDB.Lane = *lane

	query := backRepoLane.db.Create(&laneDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	(*backRepoLane.Map_LanePtr_LaneDBID)[lane] = laneDB.ID
	(*backRepoLane.Map_LaneDBID_LanePtr)[laneDB.ID] = lane
	(*backRepoLane.Map_LaneDBID_LaneDB)[laneDB.ID] = &laneDB

	return
}

// BackRepoLane.CommitPhaseTwo commits all staged instances of Lane to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoLane *BackRepoLaneStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, lane := range *backRepoLane.Map_LaneDBID_LanePtr {
		backRepoLane.CommitPhaseTwoInstance(backRepo, idx, lane)
	}

	return
}

// BackRepoLane.CommitPhaseTwoInstance commits {{structname }} of models.Lane to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoLane *BackRepoLaneStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, lane *models.Lane) (Error error) {

	// fetch matching laneDB
	if laneDB, ok := (*backRepoLane.Map_LaneDBID_LaneDB)[idx]; ok {

		{
			{
				// insertion point for fields commit
				laneDB.Name_Data.String = lane.Name
				laneDB.Name_Data.Valid = true

				laneDB.Order_Data.Int64 = int64(lane.Order)
				laneDB.Order_Data.Valid = true

				// commit a slice of pointer translates to update reverse pointer to Bar, i.e.
				for _, bar := range lane.Bars {
					if barDBID, ok := (*backRepo.BackRepoBar.Map_BarPtr_BarDBID)[bar]; ok {
						if barDB, ok := (*backRepo.BackRepoBar.Map_BarDBID_BarDB)[barDBID]; ok {
							barDB.Lane_BarsDBID.Int64 = int64(laneDB.ID)
							barDB.Lane_BarsDBID.Valid = true
							if q := backRepoLane.db.Save(&barDB); q.Error != nil {
								return q.Error
							}
						}
					}
				}

			}
		}
		query := backRepoLane.db.Save(&laneDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Lane intance %s", lane.Name))
		return err
	}

	return
}

// BackRepoLane.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One is the creation of instance in the stage
//
// NOTE: the is supposed to have been reset before
//
func (backRepoLane *BackRepoLaneStruct) CheckoutPhaseOne() (Error error) {

	laneDBArray := make([]LaneDB, 0)
	query := backRepoLane.db.Find(&laneDBArray)
	if query.Error != nil {
		return query.Error
	}

	// copy orm objects to the the map
	for _, laneDB := range laneDBArray {
		backRepoLane.CheckoutPhaseOneInstance(&laneDB)
	}

	return
}

// CheckoutPhaseOneInstance takes a laneDB that has been found in the DB, updates the backRepo and stages the
// models version of the laneDB
func (backRepoLane *BackRepoLaneStruct) CheckoutPhaseOneInstance(laneDB *LaneDB) (Error error) {

	// if absent, create entries in the backRepoLane maps.
	laneWithNewFieldValues := laneDB.Lane
	if _, ok := (*backRepoLane.Map_LaneDBID_LanePtr)[laneDB.ID]; !ok {

		(*backRepoLane.Map_LaneDBID_LanePtr)[laneDB.ID] = &laneWithNewFieldValues
		(*backRepoLane.Map_LanePtr_LaneDBID)[&laneWithNewFieldValues] = laneDB.ID

		// append model store with the new element
		laneWithNewFieldValues.Stage()
	}
	laneDBWithNewFieldValues := *laneDB
	(*backRepoLane.Map_LaneDBID_LaneDB)[laneDB.ID] = &laneDBWithNewFieldValues

	return
}

// BackRepoLane.CheckoutPhaseTwo Checkouts all staged instances of Lane to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoLane *BackRepoLaneStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, laneDB := range *backRepoLane.Map_LaneDBID_LaneDB {
		backRepoLane.CheckoutPhaseTwoInstance(backRepo, laneDB)
	}
	return
}

// BackRepoLane.CheckoutPhaseTwoInstance Checkouts staged instances of Lane to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoLane *BackRepoLaneStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, laneDB *LaneDB) (Error error) {

	lane := (*backRepoLane.Map_LaneDBID_LanePtr)[laneDB.ID]
	_ = lane // sometimes, there is no code generated. This lines voids the "unused variable" compilation error
	{
		{
			// insertion point for checkout, i.e. update of fields of stage instance from fields of back repo instances
			//
			lane.Name = laneDB.Name_Data.String

			lane.Order = int(laneDB.Order_Data.Int64)

			// parse all BarDB and redeem the array of poiners to Lane
			// first reset the slice
			lane.Bars = lane.Bars[:0]
			for _, BarDB := range *backRepo.BackRepoBar.Map_BarDBID_BarDB {
				if BarDB.Lane_BarsDBID.Int64 == int64(laneDB.ID) {
					Bar := (*backRepo.BackRepoBar.Map_BarDBID_BarPtr)[BarDB.ID]
					lane.Bars = append(lane.Bars, Bar)
				}
			}

		}
	}
	return
}

// CommitLane allows commit of a single lane (if already staged)
func (backRepo *BackRepoStruct) CommitLane(lane *models.Lane) {
	backRepo.BackRepoLane.CommitPhaseOneInstance(lane)
	if id, ok := (*backRepo.BackRepoLane.Map_LanePtr_LaneDBID)[lane]; ok {
		backRepo.BackRepoLane.CommitPhaseTwoInstance(backRepo, id, lane)
	}
}

// CommitLane allows checkout of a single lane (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutLane(lane *models.Lane) {
	// check if the lane is staged
	if _, ok := (*backRepo.BackRepoLane.Map_LanePtr_LaneDBID)[lane]; ok {

		if id, ok := (*backRepo.BackRepoLane.Map_LanePtr_LaneDBID)[lane]; ok {
			var laneDB LaneDB
			laneDB.ID = id

			if err := backRepo.BackRepoLane.db.First(&laneDB, id).Error; err != nil {
				log.Panicln("CheckoutLane : Problem with getting object with id:", id)
			}
			backRepo.BackRepoLane.CheckoutPhaseOneInstance(&laneDB)
			backRepo.BackRepoLane.CheckoutPhaseTwoInstance(backRepo, &laneDB)
		}
	}
}
