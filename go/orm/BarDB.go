// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"github.com/jinzhu/gorm"

	"github.com/fullstack-lang/gonggantt/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Bar sql.NullBool
var __Bar_time__dummyDeclaration time.Duration
var dummy_Bar_sort sort.Float64Slice

// BarAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model barAPI
type BarAPI struct {
	gorm.Model

	models.Bar

	// encoding of pointers
	BarPointersEnconding
}

// BarPointersEnconding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type BarPointersEnconding struct {
	// insertion for pointer fields encoding declaration
	// Implementation of a reverse ID for field Lane{}.Bars []*Bar
	Lane_BarsDBID sql.NullInt64

	// implementation of the index of the withing the slice
	Lane_BarsDBID_Index sql.NullInt64
}

// BarDB describes a bar in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model barDB
type BarDB struct {
	gorm.Model

	// insertion for basic fields declaration
	// Declation for basic field barDB.Name {{BasicKind}} (to be completed)
	Name_Data sql.NullString

	// Declation for basic field barDB.Start
	Start_Data sql.NullTime

	// Declation for basic field barDB.End
	End_Data sql.NullTime

	// Declation for basic field barDB.OptionnalColor {{BasicKind}} (to be completed)
	OptionnalColor_Data sql.NullString

	// Declation for basic field barDB.OptionnalStroke {{BasicKind}} (to be completed)
	OptionnalStroke_Data sql.NullString

	// encoding of pointers
	BarPointersEnconding
}

// BarDBs arrays barDBs
// swagger:response barDBsResponse
type BarDBs []BarDB

// BarDBResponse provides response
// swagger:response barDBResponse
type BarDBResponse struct {
	BarDB
}

type BackRepoBarStruct struct {
	// stores BarDB according to their gorm ID
	Map_BarDBID_BarDB *map[uint]*BarDB

	// stores BarDB ID according to Bar address
	Map_BarPtr_BarDBID *map[*models.Bar]uint

	// stores Bar according to their gorm ID
	Map_BarDBID_BarPtr *map[uint]*models.Bar

	db *gorm.DB
}

func (backRepoBar *BackRepoBarStruct) GetDB() *gorm.DB {
	return backRepoBar.db
}

// GetBarDBFromBarPtr is a handy function to access the back repo instance from the stage instance
func (backRepoBar *BackRepoBarStruct) GetBarDBFromBarPtr(bar *models.Bar) (barDB *BarDB) {
	id := (*backRepoBar.Map_BarPtr_BarDBID)[bar]
	barDB = (*backRepoBar.Map_BarDBID_BarDB)[id]
	return
}

// BackRepoBar.Init set up the BackRepo of the Bar
func (backRepoBar *BackRepoBarStruct) Init(db *gorm.DB) (Error error) {

	if backRepoBar.Map_BarDBID_BarPtr != nil {
		err := errors.New("In Init, backRepoBar.Map_BarDBID_BarPtr should be nil")
		return err
	}

	if backRepoBar.Map_BarDBID_BarDB != nil {
		err := errors.New("In Init, backRepoBar.Map_BarDBID_BarDB should be nil")
		return err
	}

	if backRepoBar.Map_BarPtr_BarDBID != nil {
		err := errors.New("In Init, backRepoBar.Map_BarPtr_BarDBID should be nil")
		return err
	}

	tmp := make(map[uint]*models.Bar, 0)
	backRepoBar.Map_BarDBID_BarPtr = &tmp

	tmpDB := make(map[uint]*BarDB, 0)
	backRepoBar.Map_BarDBID_BarDB = &tmpDB

	tmpID := make(map[*models.Bar]uint, 0)
	backRepoBar.Map_BarPtr_BarDBID = &tmpID

	backRepoBar.db = db
	return
}

// BackRepoBar.CommitPhaseOne commits all staged instances of Bar to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoBar *BackRepoBarStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for bar := range stage.Bars {
		backRepoBar.CommitPhaseOneInstance(bar)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, bar := range *backRepoBar.Map_BarDBID_BarPtr {
		if _, ok := stage.Bars[bar]; !ok {
			backRepoBar.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoBar.CommitDeleteInstance commits deletion of Bar to the BackRepo
func (backRepoBar *BackRepoBarStruct) CommitDeleteInstance(id uint) (Error error) {

	bar := (*backRepoBar.Map_BarDBID_BarPtr)[id]

	// bar is not staged anymore, remove barDB
	barDB := (*backRepoBar.Map_BarDBID_BarDB)[id]
	query := backRepoBar.db.Unscoped().Delete(&barDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete((*backRepoBar.Map_BarPtr_BarDBID), bar)
	delete((*backRepoBar.Map_BarDBID_BarPtr), id)
	delete((*backRepoBar.Map_BarDBID_BarDB), id)

	return
}

// BackRepoBar.CommitPhaseOneInstance commits bar staged instances of Bar to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoBar *BackRepoBarStruct) CommitPhaseOneInstance(bar *models.Bar) (Error error) {

	// check if the bar is not commited yet
	if _, ok := (*backRepoBar.Map_BarPtr_BarDBID)[bar]; ok {
		return
	}

	// initiate bar
	var barDB BarDB
	barDB.CopyBasicFieldsFromBar(bar)

	query := backRepoBar.db.Create(&barDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	(*backRepoBar.Map_BarPtr_BarDBID)[bar] = barDB.ID
	(*backRepoBar.Map_BarDBID_BarPtr)[barDB.ID] = bar
	(*backRepoBar.Map_BarDBID_BarDB)[barDB.ID] = &barDB

	return
}

// BackRepoBar.CommitPhaseTwo commits all staged instances of Bar to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBar *BackRepoBarStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, bar := range *backRepoBar.Map_BarDBID_BarPtr {
		backRepoBar.CommitPhaseTwoInstance(backRepo, idx, bar)
	}

	return
}

// BackRepoBar.CommitPhaseTwoInstance commits {{structname }} of models.Bar to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBar *BackRepoBarStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, bar *models.Bar) (Error error) {

	// fetch matching barDB
	if barDB, ok := (*backRepoBar.Map_BarDBID_BarDB)[idx]; ok {

		barDB.CopyBasicFieldsFromBar(bar)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoBar.db.Save(&barDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Bar intance %s", bar.Name))
		return err
	}

	return
}

// BackRepoBar.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One is the creation of instance in the stage
//
// NOTE: the is supposed to have been reset before
//
func (backRepoBar *BackRepoBarStruct) CheckoutPhaseOne() (Error error) {

	barDBArray := make([]BarDB, 0)
	query := backRepoBar.db.Find(&barDBArray)
	if query.Error != nil {
		return query.Error
	}

	// copy orm objects to the the map
	for _, barDB := range barDBArray {
		backRepoBar.CheckoutPhaseOneInstance(&barDB)
	}

	return
}

// CheckoutPhaseOneInstance takes a barDB that has been found in the DB, updates the backRepo and stages the
// models version of the barDB
func (backRepoBar *BackRepoBarStruct) CheckoutPhaseOneInstance(barDB *BarDB) (Error error) {

	bar, ok := (*backRepoBar.Map_BarDBID_BarPtr)[barDB.ID]
	if !ok {
		bar = new(models.Bar)

		(*backRepoBar.Map_BarDBID_BarPtr)[barDB.ID] = bar
		(*backRepoBar.Map_BarPtr_BarDBID)[bar] = barDB.ID

		// append model store with the new element
		bar.Stage()
	}
	barDB.CopyBasicFieldsToBar(bar)

	// preserve pointer to aclassDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_BarDBID_BarDB)[barDB hold variable pointers
	barDB_Data := *barDB
	preservedPtrToBar := &barDB_Data
	(*backRepoBar.Map_BarDBID_BarDB)[barDB.ID] = preservedPtrToBar

	return
}

// BackRepoBar.CheckoutPhaseTwo Checkouts all staged instances of Bar to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBar *BackRepoBarStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, barDB := range *backRepoBar.Map_BarDBID_BarDB {
		backRepoBar.CheckoutPhaseTwoInstance(backRepo, barDB)
	}
	return
}

// BackRepoBar.CheckoutPhaseTwoInstance Checkouts staged instances of Bar to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBar *BackRepoBarStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, barDB *BarDB) (Error error) {

	bar := (*backRepoBar.Map_BarDBID_BarPtr)[barDB.ID]
	_ = bar // sometimes, there is no code generated. This lines voids the "unused variable" compilation error

	// insertion point for checkout of pointer encoding
	return
}

// CommitBar allows commit of a single bar (if already staged)
func (backRepo *BackRepoStruct) CommitBar(bar *models.Bar) {
	backRepo.BackRepoBar.CommitPhaseOneInstance(bar)
	if id, ok := (*backRepo.BackRepoBar.Map_BarPtr_BarDBID)[bar]; ok {
		backRepo.BackRepoBar.CommitPhaseTwoInstance(backRepo, id, bar)
	}
}

// CommitBar allows checkout of a single bar (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutBar(bar *models.Bar) {
	// check if the bar is staged
	if _, ok := (*backRepo.BackRepoBar.Map_BarPtr_BarDBID)[bar]; ok {

		if id, ok := (*backRepo.BackRepoBar.Map_BarPtr_BarDBID)[bar]; ok {
			var barDB BarDB
			barDB.ID = id

			if err := backRepo.BackRepoBar.db.First(&barDB, id).Error; err != nil {
				log.Panicln("CheckoutBar : Problem with getting object with id:", id)
			}
			backRepo.BackRepoBar.CheckoutPhaseOneInstance(&barDB)
			backRepo.BackRepoBar.CheckoutPhaseTwoInstance(backRepo, &barDB)
		}
	}
}

// CopyBasicFieldsToBarDB is used to copy basic fields between the Stage or the CRUD to the back repo
func (barDB *BarDB) CopyBasicFieldsFromBar(bar *models.Bar) {
	// insertion point for fields commit
	barDB.Name_Data.String = bar.Name
	barDB.Name_Data.Valid = true

	barDB.Start_Data.Time = bar.Start
	barDB.Start_Data.Valid = true

	barDB.End_Data.Time = bar.End
	barDB.End_Data.Valid = true

	barDB.OptionnalColor_Data.String = bar.OptionnalColor
	barDB.OptionnalColor_Data.Valid = true

	barDB.OptionnalStroke_Data.String = bar.OptionnalStroke
	barDB.OptionnalStroke_Data.Valid = true

}

// CopyBasicFieldsToBarDB is used to copy basic fields between the Stage or the CRUD to the back repo
func (barDB *BarDB) CopyBasicFieldsToBar(bar *models.Bar) {

	// insertion point for checkout of basic fields (back repo to stage)
	bar.Name = barDB.Name_Data.String
	bar.Start = barDB.Start_Data.Time
	bar.End = barDB.End_Data.Time
	bar.OptionnalColor = barDB.OptionnalColor_Data.String
	bar.OptionnalStroke = barDB.OptionnalStroke_Data.String
}

// Backup generates a json file from a slice of all BarDB instances in the backrepo
func (backRepoBar *BackRepoBarStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "BarDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	var forBackup []*BarDB
	for _, barDB := range *backRepoBar.Map_BarDBID_BarDB {
		forBackup = append(forBackup, barDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Panic("Cannot json Bar ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Panic("Cannot write the json Bar file", err.Error())
	}
}

func (backRepoBar *BackRepoBarStruct) Restore(dirPath string) {

	filename := filepath.Join(dirPath, "BarDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Panic("Cannot restore/open the json Bar file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*BarDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_BarDBID_BarDB
	for _, barDB := range forRestore {

		barDB_ID := barDB.ID
		barDB.ID = 0
		query := backRepoBar.db.Create(barDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		if barDB_ID != barDB.ID {
			log.Panicf("ID of Bar restore ID %d, name %s, has wrong ID %d in DB after create",
				barDB_ID, barDB.Name_Data.String, barDB.ID)
		}
	}

	if err != nil {
		log.Panic("Cannot restore/unmarshall json Bar file", err.Error())
	}
}
