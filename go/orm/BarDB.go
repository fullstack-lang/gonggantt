// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"errors"
	"fmt"
	"log"
	"sort"
	"time"

	"github.com/jinzhu/gorm"

	"github.com/fullstack-lang/gonggantt/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Bar sql.NullBool
var __Bar_time__dummyDeclaration time.Duration
var dummy_Bar_sort sort.Float64Slice

// BarAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model barAPI
type BarAPI struct {
	models.Bar

	// insertion for fields declaration
	// Declation for basic field barDB.Name {{BasicKind}} (to be completed)
	Name_Data sql.NullString

	// Declation for basic field barDB.Start
	Start_Data sql.NullTime

	// Declation for basic field barDB.End
	End_Data sql.NullTime

	// Declation for basic field barDB.OptionnalColor {{BasicKind}} (to be completed)
	OptionnalColor_Data sql.NullString

	// Declation for basic field barDB.OptionnalStroke {{BasicKind}} (to be completed)
	OptionnalStroke_Data sql.NullString

	// Implementation of a reverse ID for field Lane{}.Bars []*Bar
	Lane_BarsDBID sql.NullInt64
	Lane_BarsDBID_Index sql.NullInt64

	// end of insertion
}

// BarDB describes a bar in the database
//
// It incorporates all fields : from the model, from the generated field for the API and the GORM ID
//
// swagger:model barDB
type BarDB struct {
	gorm.Model

	BarAPI
}

// BarDBs arrays barDBs
// swagger:response barDBsResponse
type BarDBs []BarDB

// BarDBResponse provides response
// swagger:response barDBResponse
type BarDBResponse struct {
	BarDB
}

type BackRepoBarStruct struct {
	// stores BarDB according to their gorm ID
	Map_BarDBID_BarDB *map[uint]*BarDB

	// stores BarDB ID according to Bar address
	Map_BarPtr_BarDBID *map[*models.Bar]uint

	// stores Bar according to their gorm ID
	Map_BarDBID_BarPtr *map[uint]*models.Bar

	db *gorm.DB
}

// BackRepoBar.Init set up the BackRepo of the Bar
func (backRepoBar *BackRepoBarStruct) Init(db *gorm.DB) (Error error) {

	if backRepoBar.Map_BarDBID_BarPtr != nil {
		err := errors.New("In Init, backRepoBar.Map_BarDBID_BarPtr should be nil")
		return err
	}

	if backRepoBar.Map_BarDBID_BarDB != nil {
		err := errors.New("In Init, backRepoBar.Map_BarDBID_BarDB should be nil")
		return err
	}

	if backRepoBar.Map_BarPtr_BarDBID != nil {
		err := errors.New("In Init, backRepoBar.Map_BarPtr_BarDBID should be nil")
		return err
	}

	tmp := make(map[uint]*models.Bar, 0)
	backRepoBar.Map_BarDBID_BarPtr = &tmp

	tmpDB := make(map[uint]*BarDB, 0)
	backRepoBar.Map_BarDBID_BarDB = &tmpDB

	tmpID := make(map[*models.Bar]uint, 0)
	backRepoBar.Map_BarPtr_BarDBID = &tmpID

	backRepoBar.db = db
	return
}

// BackRepoBar.CommitPhaseOne commits all staged instances of Bar to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoBar *BackRepoBarStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for bar := range stage.Bars {
		backRepoBar.CommitPhaseOneInstance(bar)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, bar := range *backRepoBar.Map_BarDBID_BarPtr {
		if _, ok := stage.Bars[bar]; !ok {
			backRepoBar.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoBar.CommitDeleteInstance commits deletion of Bar to the BackRepo
func (backRepoBar *BackRepoBarStruct) CommitDeleteInstance(id uint) (Error error) {

	bar := (*backRepoBar.Map_BarDBID_BarPtr)[id]

	// bar is not staged anymore, remove barDB
	barDB := (*backRepoBar.Map_BarDBID_BarDB)[id]
	query := backRepoBar.db.Unscoped().Delete(&barDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete((*backRepoBar.Map_BarPtr_BarDBID), bar)
	delete((*backRepoBar.Map_BarDBID_BarPtr), id)
	delete((*backRepoBar.Map_BarDBID_BarDB), id)

	return
}

// BackRepoBar.CommitPhaseOneInstance commits bar staged instances of Bar to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoBar *BackRepoBarStruct) CommitPhaseOneInstance(bar *models.Bar) (Error error) {

	// check if the bar is not commited yet
	if _, ok := (*backRepoBar.Map_BarPtr_BarDBID)[bar]; ok {
		return
	}

	// initiate bar
	var barDB BarDB
	barDB.Bar = *bar

	query := backRepoBar.db.Create(&barDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	(*backRepoBar.Map_BarPtr_BarDBID)[bar] = barDB.ID
	(*backRepoBar.Map_BarDBID_BarPtr)[barDB.ID] = bar
	(*backRepoBar.Map_BarDBID_BarDB)[barDB.ID] = &barDB

	return
}

// BackRepoBar.CommitPhaseTwo commits all staged instances of Bar to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBar *BackRepoBarStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, bar := range *backRepoBar.Map_BarDBID_BarPtr {
		backRepoBar.CommitPhaseTwoInstance(backRepo, idx, bar)
	}

	return
}

// BackRepoBar.CommitPhaseTwoInstance commits {{structname }} of models.Bar to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBar *BackRepoBarStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, bar *models.Bar) (Error error) {

	// fetch matching barDB
	if barDB, ok := (*backRepoBar.Map_BarDBID_BarDB)[idx]; ok {

		{
			{
				// insertion point for fields commit
				barDB.Name_Data.String = bar.Name
				barDB.Name_Data.Valid = true

				barDB.Start_Data.Time = bar.Start
				barDB.Start_Data.Valid = true

				barDB.End_Data.Time = bar.End
				barDB.End_Data.Valid = true

				barDB.OptionnalColor_Data.String = bar.OptionnalColor
				barDB.OptionnalColor_Data.Valid = true

				barDB.OptionnalStroke_Data.String = bar.OptionnalStroke
				barDB.OptionnalStroke_Data.Valid = true

			}
		}
		query := backRepoBar.db.Save(&barDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Bar intance %s", bar.Name))
		return err
	}

	return
}

// BackRepoBar.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One is the creation of instance in the stage
//
// NOTE: the is supposed to have been reset before
//
func (backRepoBar *BackRepoBarStruct) CheckoutPhaseOne() (Error error) {

	barDBArray := make([]BarDB, 0)
	query := backRepoBar.db.Find(&barDBArray)
	if query.Error != nil {
		return query.Error
	}

	// copy orm objects to the the map
	for _, barDB := range barDBArray {
		backRepoBar.CheckoutPhaseOneInstance(&barDB)
	}

	return
}

// CheckoutPhaseOneInstance takes a barDB that has been found in the DB, updates the backRepo and stages the
// models version of the barDB
func (backRepoBar *BackRepoBarStruct) CheckoutPhaseOneInstance(barDB *BarDB) (Error error) {

	// if absent, create entries in the backRepoBar maps.
	barWithNewFieldValues := barDB.Bar
	if _, ok := (*backRepoBar.Map_BarDBID_BarPtr)[barDB.ID]; !ok {

		(*backRepoBar.Map_BarDBID_BarPtr)[barDB.ID] = &barWithNewFieldValues
		(*backRepoBar.Map_BarPtr_BarDBID)[&barWithNewFieldValues] = barDB.ID

		// append model store with the new element
		barWithNewFieldValues.Stage()
	}
	barDBWithNewFieldValues := *barDB
	(*backRepoBar.Map_BarDBID_BarDB)[barDB.ID] = &barDBWithNewFieldValues

	return
}

// BackRepoBar.CheckoutPhaseTwo Checkouts all staged instances of Bar to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBar *BackRepoBarStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, barDB := range *backRepoBar.Map_BarDBID_BarDB {
		backRepoBar.CheckoutPhaseTwoInstance(backRepo, barDB)
	}
	return
}

// BackRepoBar.CheckoutPhaseTwoInstance Checkouts staged instances of Bar to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBar *BackRepoBarStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, barDB *BarDB) (Error error) {

	bar := (*backRepoBar.Map_BarDBID_BarPtr)[barDB.ID]
	_ = bar // sometimes, there is no code generated. This lines voids the "unused variable" compilation error
	{
		{
			// insertion point for checkout, i.e. update of fields of stage instance from fields of back repo instances
			//
			bar.Name = barDB.Name_Data.String

			bar.Start = barDB.Start_Data.Time

			bar.End = barDB.End_Data.Time

			bar.OptionnalColor = barDB.OptionnalColor_Data.String

			bar.OptionnalStroke = barDB.OptionnalStroke_Data.String

		}
	}
	return
}

// CommitBar allows commit of a single bar (if already staged)
func (backRepo *BackRepoStruct) CommitBar(bar *models.Bar) {
	backRepo.BackRepoBar.CommitPhaseOneInstance(bar)
	if id, ok := (*backRepo.BackRepoBar.Map_BarPtr_BarDBID)[bar]; ok {
		backRepo.BackRepoBar.CommitPhaseTwoInstance(backRepo, id, bar)
	}
}

// CommitBar allows checkout of a single bar (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutBar(bar *models.Bar) {
	// check if the bar is staged
	if _, ok := (*backRepo.BackRepoBar.Map_BarPtr_BarDBID)[bar]; ok {

		if id, ok := (*backRepo.BackRepoBar.Map_BarPtr_BarDBID)[bar]; ok {
			var barDB BarDB
			barDB.ID = id

			if err := backRepo.BackRepoBar.db.First(&barDB, id).Error; err != nil {
				log.Panicln("CheckoutBar : Problem with getting object with id:", id)
			}
			backRepo.BackRepoBar.CheckoutPhaseOneInstance(&barDB)
			backRepo.BackRepoBar.CheckoutPhaseTwoInstance(backRepo, &barDB)
		}
	}
}
