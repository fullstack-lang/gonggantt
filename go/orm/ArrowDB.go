// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gonggantt/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Arrow_sql sql.NullBool
var dummy_Arrow_time time.Duration
var dummy_Arrow_sort sort.Float64Slice

// ArrowAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model arrowAPI
type ArrowAPI struct {
	gorm.Model

	models.Arrow

	// encoding of pointers
	ArrowPointersEnconding
}

// ArrowPointersEnconding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type ArrowPointersEnconding struct {
	// insertion for pointer fields encoding declaration
	// field From is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	FromID sql.NullInt64

	// field To is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	ToID sql.NullInt64

	// Implementation of a reverse ID for field Gantt{}.Arrows []*Arrow
	Gantt_ArrowsDBID sql.NullInt64

	// implementation of the index of the withing the slice
	Gantt_ArrowsDBID_Index sql.NullInt64
}

// ArrowDB describes a arrow in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model arrowDB
type ArrowDB struct {
	gorm.Model

	// insertion for basic fields declaration
	// Declation for basic field arrowDB.Name {{BasicKind}} (to be completed)
	Name_Data sql.NullString

	// Declation for basic field arrowDB.OptionnalColor {{BasicKind}} (to be completed)
	OptionnalColor_Data sql.NullString

	// Declation for basic field arrowDB.OptionnalStroke {{BasicKind}} (to be completed)
	OptionnalStroke_Data sql.NullString

	// encoding of pointers
	ArrowPointersEnconding
}

// ArrowDBs arrays arrowDBs
// swagger:response arrowDBsResponse
type ArrowDBs []ArrowDB

// ArrowDBResponse provides response
// swagger:response arrowDBResponse
type ArrowDBResponse struct {
	ArrowDB
}

// ArrowWOP is a Arrow without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type ArrowWOP struct {
	ID int

	// insertion for WOP basic fields

	Name string

	OptionnalColor string

	OptionnalStroke string
	// insertion for WOP pointer fields
}

var Arrow_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"OptionnalColor",
	"OptionnalStroke",
}

type BackRepoArrowStruct struct {
	// stores ArrowDB according to their gorm ID
	Map_ArrowDBID_ArrowDB *map[uint]*ArrowDB

	// stores ArrowDB ID according to Arrow address
	Map_ArrowPtr_ArrowDBID *map[*models.Arrow]uint

	// stores Arrow according to their gorm ID
	Map_ArrowDBID_ArrowPtr *map[uint]*models.Arrow

	db *gorm.DB
}

func (backRepoArrow *BackRepoArrowStruct) GetDB() *gorm.DB {
	return backRepoArrow.db
}

// GetArrowDBFromArrowPtr is a handy function to access the back repo instance from the stage instance
func (backRepoArrow *BackRepoArrowStruct) GetArrowDBFromArrowPtr(arrow *models.Arrow) (arrowDB *ArrowDB) {
	id := (*backRepoArrow.Map_ArrowPtr_ArrowDBID)[arrow]
	arrowDB = (*backRepoArrow.Map_ArrowDBID_ArrowDB)[id]
	return
}

// BackRepoArrow.Init set up the BackRepo of the Arrow
func (backRepoArrow *BackRepoArrowStruct) Init(db *gorm.DB) (Error error) {

	if backRepoArrow.Map_ArrowDBID_ArrowPtr != nil {
		err := errors.New("In Init, backRepoArrow.Map_ArrowDBID_ArrowPtr should be nil")
		return err
	}

	if backRepoArrow.Map_ArrowDBID_ArrowDB != nil {
		err := errors.New("In Init, backRepoArrow.Map_ArrowDBID_ArrowDB should be nil")
		return err
	}

	if backRepoArrow.Map_ArrowPtr_ArrowDBID != nil {
		err := errors.New("In Init, backRepoArrow.Map_ArrowPtr_ArrowDBID should be nil")
		return err
	}

	tmp := make(map[uint]*models.Arrow, 0)
	backRepoArrow.Map_ArrowDBID_ArrowPtr = &tmp

	tmpDB := make(map[uint]*ArrowDB, 0)
	backRepoArrow.Map_ArrowDBID_ArrowDB = &tmpDB

	tmpID := make(map[*models.Arrow]uint, 0)
	backRepoArrow.Map_ArrowPtr_ArrowDBID = &tmpID

	backRepoArrow.db = db
	return
}

// BackRepoArrow.CommitPhaseOne commits all staged instances of Arrow to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoArrow *BackRepoArrowStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for arrow := range stage.Arrows {
		backRepoArrow.CommitPhaseOneInstance(arrow)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, arrow := range *backRepoArrow.Map_ArrowDBID_ArrowPtr {
		if _, ok := stage.Arrows[arrow]; !ok {
			backRepoArrow.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoArrow.CommitDeleteInstance commits deletion of Arrow to the BackRepo
func (backRepoArrow *BackRepoArrowStruct) CommitDeleteInstance(id uint) (Error error) {

	arrow := (*backRepoArrow.Map_ArrowDBID_ArrowPtr)[id]

	// arrow is not staged anymore, remove arrowDB
	arrowDB := (*backRepoArrow.Map_ArrowDBID_ArrowDB)[id]
	query := backRepoArrow.db.Unscoped().Delete(&arrowDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete((*backRepoArrow.Map_ArrowPtr_ArrowDBID), arrow)
	delete((*backRepoArrow.Map_ArrowDBID_ArrowPtr), id)
	delete((*backRepoArrow.Map_ArrowDBID_ArrowDB), id)

	return
}

// BackRepoArrow.CommitPhaseOneInstance commits arrow staged instances of Arrow to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoArrow *BackRepoArrowStruct) CommitPhaseOneInstance(arrow *models.Arrow) (Error error) {

	// check if the arrow is not commited yet
	if _, ok := (*backRepoArrow.Map_ArrowPtr_ArrowDBID)[arrow]; ok {
		return
	}

	// initiate arrow
	var arrowDB ArrowDB
	arrowDB.CopyBasicFieldsFromArrow(arrow)

	query := backRepoArrow.db.Create(&arrowDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	(*backRepoArrow.Map_ArrowPtr_ArrowDBID)[arrow] = arrowDB.ID
	(*backRepoArrow.Map_ArrowDBID_ArrowPtr)[arrowDB.ID] = arrow
	(*backRepoArrow.Map_ArrowDBID_ArrowDB)[arrowDB.ID] = &arrowDB

	return
}

// BackRepoArrow.CommitPhaseTwo commits all staged instances of Arrow to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoArrow *BackRepoArrowStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, arrow := range *backRepoArrow.Map_ArrowDBID_ArrowPtr {
		backRepoArrow.CommitPhaseTwoInstance(backRepo, idx, arrow)
	}

	return
}

// BackRepoArrow.CommitPhaseTwoInstance commits {{structname }} of models.Arrow to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoArrow *BackRepoArrowStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, arrow *models.Arrow) (Error error) {

	// fetch matching arrowDB
	if arrowDB, ok := (*backRepoArrow.Map_ArrowDBID_ArrowDB)[idx]; ok {

		arrowDB.CopyBasicFieldsFromArrow(arrow)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value arrow.From translates to updating the arrow.FromID
		arrowDB.FromID.Valid = true // allow for a 0 value (nil association)
		if arrow.From != nil {
			if FromId, ok := (*backRepo.BackRepoBar.Map_BarPtr_BarDBID)[arrow.From]; ok {
				arrowDB.FromID.Int64 = int64(FromId)
				arrowDB.FromID.Valid = true
			}
		}

		// commit pointer value arrow.To translates to updating the arrow.ToID
		arrowDB.ToID.Valid = true // allow for a 0 value (nil association)
		if arrow.To != nil {
			if ToId, ok := (*backRepo.BackRepoBar.Map_BarPtr_BarDBID)[arrow.To]; ok {
				arrowDB.ToID.Int64 = int64(ToId)
				arrowDB.ToID.Valid = true
			}
		}

		query := backRepoArrow.db.Save(&arrowDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Arrow intance %s", arrow.Name))
		return err
	}

	return
}

// BackRepoArrow.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for pahse two)
//
func (backRepoArrow *BackRepoArrowStruct) CheckoutPhaseOne() (Error error) {

	arrowDBArray := make([]ArrowDB, 0)
	query := backRepoArrow.db.Find(&arrowDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	arrowInstancesToBeRemovedFromTheStage := make(map[*models.Arrow]struct{})
	for key, value := range models.Stage.Arrows {
		arrowInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, arrowDB := range arrowDBArray {
		backRepoArrow.CheckoutPhaseOneInstance(&arrowDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		arrow, ok := (*backRepoArrow.Map_ArrowDBID_ArrowPtr)[arrowDB.ID]
		if ok {
			delete(arrowInstancesToBeRemovedFromTheStage, arrow)
		}
	}

	// remove from stage and back repo's 3 maps all arrows that are not in the checkout
	for arrow := range arrowInstancesToBeRemovedFromTheStage {
		arrow.Unstage()

		// remove instance from the back repo 3 maps
		arrowID := (*backRepoArrow.Map_ArrowPtr_ArrowDBID)[arrow]
		delete((*backRepoArrow.Map_ArrowPtr_ArrowDBID), arrow)
		delete((*backRepoArrow.Map_ArrowDBID_ArrowDB), arrowID)
		delete((*backRepoArrow.Map_ArrowDBID_ArrowPtr), arrowID)
	}

	return
}

// CheckoutPhaseOneInstance takes a arrowDB that has been found in the DB, updates the backRepo and stages the
// models version of the arrowDB
func (backRepoArrow *BackRepoArrowStruct) CheckoutPhaseOneInstance(arrowDB *ArrowDB) (Error error) {

	arrow, ok := (*backRepoArrow.Map_ArrowDBID_ArrowPtr)[arrowDB.ID]
	if !ok {
		arrow = new(models.Arrow)

		(*backRepoArrow.Map_ArrowDBID_ArrowPtr)[arrowDB.ID] = arrow
		(*backRepoArrow.Map_ArrowPtr_ArrowDBID)[arrow] = arrowDB.ID

		// append model store with the new element
		arrow.Name = arrowDB.Name_Data.String
		arrow.Stage()
	}
	arrowDB.CopyBasicFieldsToArrow(arrow)

	// preserve pointer to arrowDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_ArrowDBID_ArrowDB)[arrowDB hold variable pointers
	arrowDB_Data := *arrowDB
	preservedPtrToArrow := &arrowDB_Data
	(*backRepoArrow.Map_ArrowDBID_ArrowDB)[arrowDB.ID] = preservedPtrToArrow

	return
}

// BackRepoArrow.CheckoutPhaseTwo Checkouts all staged instances of Arrow to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoArrow *BackRepoArrowStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, arrowDB := range *backRepoArrow.Map_ArrowDBID_ArrowDB {
		backRepoArrow.CheckoutPhaseTwoInstance(backRepo, arrowDB)
	}
	return
}

// BackRepoArrow.CheckoutPhaseTwoInstance Checkouts staged instances of Arrow to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoArrow *BackRepoArrowStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, arrowDB *ArrowDB) (Error error) {

	arrow := (*backRepoArrow.Map_ArrowDBID_ArrowPtr)[arrowDB.ID]
	_ = arrow // sometimes, there is no code generated. This lines voids the "unused variable" compilation error

	// insertion point for checkout of pointer encoding
	// From field
	if arrowDB.FromID.Int64 != 0 {
		arrow.From = (*backRepo.BackRepoBar.Map_BarDBID_BarPtr)[uint(arrowDB.FromID.Int64)]
	}
	// To field
	if arrowDB.ToID.Int64 != 0 {
		arrow.To = (*backRepo.BackRepoBar.Map_BarDBID_BarPtr)[uint(arrowDB.ToID.Int64)]
	}
	return
}

// CommitArrow allows commit of a single arrow (if already staged)
func (backRepo *BackRepoStruct) CommitArrow(arrow *models.Arrow) {
	backRepo.BackRepoArrow.CommitPhaseOneInstance(arrow)
	if id, ok := (*backRepo.BackRepoArrow.Map_ArrowPtr_ArrowDBID)[arrow]; ok {
		backRepo.BackRepoArrow.CommitPhaseTwoInstance(backRepo, id, arrow)
	}
}

// CommitArrow allows checkout of a single arrow (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutArrow(arrow *models.Arrow) {
	// check if the arrow is staged
	if _, ok := (*backRepo.BackRepoArrow.Map_ArrowPtr_ArrowDBID)[arrow]; ok {

		if id, ok := (*backRepo.BackRepoArrow.Map_ArrowPtr_ArrowDBID)[arrow]; ok {
			var arrowDB ArrowDB
			arrowDB.ID = id

			if err := backRepo.BackRepoArrow.db.First(&arrowDB, id).Error; err != nil {
				log.Panicln("CheckoutArrow : Problem with getting object with id:", id)
			}
			backRepo.BackRepoArrow.CheckoutPhaseOneInstance(&arrowDB)
			backRepo.BackRepoArrow.CheckoutPhaseTwoInstance(backRepo, &arrowDB)
		}
	}
}

// CopyBasicFieldsFromArrow
func (arrowDB *ArrowDB) CopyBasicFieldsFromArrow(arrow *models.Arrow) {
	// insertion point for fields commit
	arrowDB.Name_Data.String = arrow.Name
	arrowDB.Name_Data.Valid = true

	arrowDB.OptionnalColor_Data.String = arrow.OptionnalColor
	arrowDB.OptionnalColor_Data.Valid = true

	arrowDB.OptionnalStroke_Data.String = arrow.OptionnalStroke
	arrowDB.OptionnalStroke_Data.Valid = true

}

// CopyBasicFieldsFromArrowWOP
func (arrowDB *ArrowDB) CopyBasicFieldsFromArrowWOP(arrow *ArrowWOP) {
	// insertion point for fields commit
	arrowDB.Name_Data.String = arrow.Name
	arrowDB.Name_Data.Valid = true

	arrowDB.OptionnalColor_Data.String = arrow.OptionnalColor
	arrowDB.OptionnalColor_Data.Valid = true

	arrowDB.OptionnalStroke_Data.String = arrow.OptionnalStroke
	arrowDB.OptionnalStroke_Data.Valid = true

}

// CopyBasicFieldsToArrow
func (arrowDB *ArrowDB) CopyBasicFieldsToArrow(arrow *models.Arrow) {
	// insertion point for checkout of basic fields (back repo to stage)
	arrow.Name = arrowDB.Name_Data.String
	arrow.OptionnalColor = arrowDB.OptionnalColor_Data.String
	arrow.OptionnalStroke = arrowDB.OptionnalStroke_Data.String
}

// CopyBasicFieldsToArrowWOP
func (arrowDB *ArrowDB) CopyBasicFieldsToArrowWOP(arrow *ArrowWOP) {
	arrow.ID = int(arrowDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	arrow.Name = arrowDB.Name_Data.String
	arrow.OptionnalColor = arrowDB.OptionnalColor_Data.String
	arrow.OptionnalStroke = arrowDB.OptionnalStroke_Data.String
}

// Backup generates a json file from a slice of all ArrowDB instances in the backrepo
func (backRepoArrow *BackRepoArrowStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "ArrowDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*ArrowDB, 0)
	for _, arrowDB := range *backRepoArrow.Map_ArrowDBID_ArrowDB {
		forBackup = append(forBackup, arrowDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Panic("Cannot json Arrow ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Panic("Cannot write the json Arrow file", err.Error())
	}
}

// Backup generates a json file from a slice of all ArrowDB instances in the backrepo
func (backRepoArrow *BackRepoArrowStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*ArrowDB, 0)
	for _, arrowDB := range *backRepoArrow.Map_ArrowDBID_ArrowDB {
		forBackup = append(forBackup, arrowDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Arrow")
	if err != nil {
		log.Panic("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Arrow_Fields, -1)
	for _, arrowDB := range forBackup {

		var arrowWOP ArrowWOP
		arrowDB.CopyBasicFieldsToArrowWOP(&arrowWOP)

		row := sh.AddRow()
		row.WriteStruct(&arrowWOP, -1)
	}
}

// RestorePhaseOne read the file "ArrowDB.json" in dirPath that stores an array
// of ArrowDB and stores it in the database
// the map BackRepoArrowid_atBckpTime_newID is updated accordingly
func (backRepoArrow *BackRepoArrowStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoArrowid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "ArrowDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Panic("Cannot restore/open the json Arrow file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*ArrowDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_ArrowDBID_ArrowDB
	for _, arrowDB := range forRestore {

		arrowDB_ID_atBackupTime := arrowDB.ID
		arrowDB.ID = 0
		query := backRepoArrow.db.Create(arrowDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		(*backRepoArrow.Map_ArrowDBID_ArrowDB)[arrowDB.ID] = arrowDB
		BackRepoArrowid_atBckpTime_newID[arrowDB_ID_atBackupTime] = arrowDB.ID
	}

	if err != nil {
		log.Panic("Cannot restore/unmarshall json Arrow file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Arrow>id_atBckpTime_newID
// to compute new index
func (backRepoArrow *BackRepoArrowStruct) RestorePhaseTwo() {

	for _, arrowDB := range *backRepoArrow.Map_ArrowDBID_ArrowDB {

		// next line of code is to avert unused variable compilation error
		_ = arrowDB

		// insertion point for reindexing pointers encoding
		// reindexing From field
		if arrowDB.FromID.Int64 != 0 {
			arrowDB.FromID.Int64 = int64(BackRepoBarid_atBckpTime_newID[uint(arrowDB.FromID.Int64)])
			arrowDB.FromID.Valid = true
		}

		// reindexing To field
		if arrowDB.ToID.Int64 != 0 {
			arrowDB.ToID.Int64 = int64(BackRepoBarid_atBckpTime_newID[uint(arrowDB.ToID.Int64)])
			arrowDB.ToID.Valid = true
		}

		// This reindex arrow.Arrows
		if arrowDB.Gantt_ArrowsDBID.Int64 != 0 {
			arrowDB.Gantt_ArrowsDBID.Int64 =
				int64(BackRepoGanttid_atBckpTime_newID[uint(arrowDB.Gantt_ArrowsDBID.Int64)])
		}

		// update databse with new index encoding
		query := backRepoArrow.db.Model(arrowDB).Updates(*arrowDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
	}

}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoArrowid_atBckpTime_newID map[uint]uint
