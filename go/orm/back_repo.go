// generated by genORMTranslation.go
package orm

import (
	"bufio"
	"bytes"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"

	"gorm.io/gorm"

	"github.com/fullstack-lang/gonggantt/go/models"

	"github.com/tealeg/xlsx/v3"
)

// BackRepoStruct supports callback functions
type BackRepoStruct struct {
	// insertion point for per struct back repo declarations
	BackRepoArrow BackRepoArrowStruct

	BackRepoBar BackRepoBarStruct

	BackRepoGantt BackRepoGanttStruct

	BackRepoGroup BackRepoGroupStruct

	BackRepoLane BackRepoLaneStruct

	BackRepoLaneUse BackRepoLaneUseStruct

	BackRepoMilestone BackRepoMilestoneStruct

	CommitFromBackNb uint // this ng is updated at the BackRepo level but also at the BackRepo<GongStruct> level

	PushFromFrontNb uint // records increments from push from front

	stage *models.StageStruct
}

func (backRepo *BackRepoStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepo.stage
	return
}

func (backRepo *BackRepoStruct) GetLastCommitFromBackNb() uint {
	return backRepo.CommitFromBackNb
}

func (backRepo *BackRepoStruct) GetLastPushFromFrontNb() uint {
	return backRepo.PushFromFrontNb
}

func (backRepo *BackRepoStruct) IncrementCommitFromBackNb() uint {
	if backRepo.stage.OnInitCommitCallback != nil {
		backRepo.stage.OnInitCommitCallback.BeforeCommit(backRepo.stage)
	}
	if backRepo.stage.OnInitCommitFromBackCallback != nil {
		backRepo.stage.OnInitCommitFromBackCallback.BeforeCommit(backRepo.stage)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
	return backRepo.CommitFromBackNb
}

func (backRepo *BackRepoStruct) IncrementPushFromFrontNb() uint {
	if backRepo.stage.OnInitCommitCallback != nil {
		backRepo.stage.OnInitCommitCallback.BeforeCommit(backRepo.stage)
	}
	if backRepo.stage.OnInitCommitFromFrontCallback != nil {
		backRepo.stage.OnInitCommitFromFrontCallback.BeforeCommit(backRepo.stage)
	}
	backRepo.PushFromFrontNb = backRepo.PushFromFrontNb + 1
	return backRepo.CommitFromBackNb
}

// Init the BackRepoStruct inner variables and link to the database
func (backRepo *BackRepoStruct) init(stage *models.StageStruct, db *gorm.DB) {
	// insertion point for per struct back repo declarations
	backRepo.BackRepoArrow.Init(stage, db)
	backRepo.BackRepoBar.Init(stage, db)
	backRepo.BackRepoGantt.Init(stage, db)
	backRepo.BackRepoGroup.Init(stage, db)
	backRepo.BackRepoLane.Init(stage, db)
	backRepo.BackRepoLaneUse.Init(stage, db)
	backRepo.BackRepoMilestone.Init(stage, db)

	stage.BackRepo = backRepo
	backRepo.stage = stage
}

// Commit the BackRepoStruct inner variables and link to the database
func (backRepo *BackRepoStruct) Commit(stage *models.StageStruct) {
	// insertion point for per struct back repo phase one commit
	backRepo.BackRepoArrow.CommitPhaseOne(stage)
	backRepo.BackRepoBar.CommitPhaseOne(stage)
	backRepo.BackRepoGantt.CommitPhaseOne(stage)
	backRepo.BackRepoGroup.CommitPhaseOne(stage)
	backRepo.BackRepoLane.CommitPhaseOne(stage)
	backRepo.BackRepoLaneUse.CommitPhaseOne(stage)
	backRepo.BackRepoMilestone.CommitPhaseOne(stage)

	// insertion point for per struct back repo phase two commit
	backRepo.BackRepoArrow.CommitPhaseTwo(backRepo)
	backRepo.BackRepoBar.CommitPhaseTwo(backRepo)
	backRepo.BackRepoGantt.CommitPhaseTwo(backRepo)
	backRepo.BackRepoGroup.CommitPhaseTwo(backRepo)
	backRepo.BackRepoLane.CommitPhaseTwo(backRepo)
	backRepo.BackRepoLaneUse.CommitPhaseTwo(backRepo)
	backRepo.BackRepoMilestone.CommitPhaseTwo(backRepo)

	backRepo.IncrementCommitFromBackNb()
}

// Checkout the database into the stage
func (backRepo *BackRepoStruct) Checkout(stage *models.StageStruct) {
	// insertion point for per struct back repo phase one commit
	backRepo.BackRepoArrow.CheckoutPhaseOne()
	backRepo.BackRepoBar.CheckoutPhaseOne()
	backRepo.BackRepoGantt.CheckoutPhaseOne()
	backRepo.BackRepoGroup.CheckoutPhaseOne()
	backRepo.BackRepoLane.CheckoutPhaseOne()
	backRepo.BackRepoLaneUse.CheckoutPhaseOne()
	backRepo.BackRepoMilestone.CheckoutPhaseOne()

	// insertion point for per struct back repo phase two commit
	backRepo.BackRepoArrow.CheckoutPhaseTwo(backRepo)
	backRepo.BackRepoBar.CheckoutPhaseTwo(backRepo)
	backRepo.BackRepoGantt.CheckoutPhaseTwo(backRepo)
	backRepo.BackRepoGroup.CheckoutPhaseTwo(backRepo)
	backRepo.BackRepoLane.CheckoutPhaseTwo(backRepo)
	backRepo.BackRepoLaneUse.CheckoutPhaseTwo(backRepo)
	backRepo.BackRepoMilestone.CheckoutPhaseTwo(backRepo)
}

var BackRepo BackRepoStruct

func GetLastCommitFromBackNb() uint {
	return BackRepo.GetLastCommitFromBackNb()
}

func GetLastPushFromFrontNb() uint {
	return BackRepo.GetLastPushFromFrontNb()
}

// Backup the BackRepoStruct
func (backRepo *BackRepoStruct) Backup(stage *models.StageStruct, dirPath string) {
	os.MkdirAll(dirPath, os.ModePerm)

	// insertion point for per struct backup
	backRepo.BackRepoArrow.Backup(dirPath)
	backRepo.BackRepoBar.Backup(dirPath)
	backRepo.BackRepoGantt.Backup(dirPath)
	backRepo.BackRepoGroup.Backup(dirPath)
	backRepo.BackRepoLane.Backup(dirPath)
	backRepo.BackRepoLaneUse.Backup(dirPath)
	backRepo.BackRepoMilestone.Backup(dirPath)
}

// Backup in XL the BackRepoStruct
func (backRepo *BackRepoStruct) BackupXL(stage *models.StageStruct, dirPath string) {
	os.MkdirAll(dirPath, os.ModePerm)

	// open an existing file
	file := xlsx.NewFile()

	// insertion point for per struct backup
	backRepo.BackRepoArrow.BackupXL(file)
	backRepo.BackRepoBar.BackupXL(file)
	backRepo.BackRepoGantt.BackupXL(file)
	backRepo.BackRepoGroup.BackupXL(file)
	backRepo.BackRepoLane.BackupXL(file)
	backRepo.BackRepoLaneUse.BackupXL(file)
	backRepo.BackRepoMilestone.BackupXL(file)

	var b bytes.Buffer
	writer := bufio.NewWriter(&b)
	file.Write(writer)
	theBytes := b.Bytes()

	filename := filepath.Join(dirPath, "bckp.xlsx")
	err := ioutil.WriteFile(filename, theBytes, 0644)
	if err != nil {
		log.Panic("Cannot write the XL file", err.Error())
	}
}

// Restore the database into the back repo
func (backRepo *BackRepoStruct) Restore(stage *models.StageStruct, dirPath string) {
	backRepo.stage.Commit()
	backRepo.stage.Reset()
	backRepo.stage.Checkout()

	//
	// restauration first phase (create DB instance with new IDs)
	//

	// insertion point for per struct backup
	backRepo.BackRepoArrow.RestorePhaseOne(dirPath)
	backRepo.BackRepoBar.RestorePhaseOne(dirPath)
	backRepo.BackRepoGantt.RestorePhaseOne(dirPath)
	backRepo.BackRepoGroup.RestorePhaseOne(dirPath)
	backRepo.BackRepoLane.RestorePhaseOne(dirPath)
	backRepo.BackRepoLaneUse.RestorePhaseOne(dirPath)
	backRepo.BackRepoMilestone.RestorePhaseOne(dirPath)

	//
	// restauration second phase (reindex pointers with the new ID)
	//

	// insertion point for per struct backup
	backRepo.BackRepoArrow.RestorePhaseTwo()
	backRepo.BackRepoBar.RestorePhaseTwo()
	backRepo.BackRepoGantt.RestorePhaseTwo()
	backRepo.BackRepoGroup.RestorePhaseTwo()
	backRepo.BackRepoLane.RestorePhaseTwo()
	backRepo.BackRepoLaneUse.RestorePhaseTwo()
	backRepo.BackRepoMilestone.RestorePhaseTwo()

	backRepo.stage.Checkout()
}

// Restore the database into the back repo
func (backRepo *BackRepoStruct) RestoreXL(stage *models.StageStruct, dirPath string) {

	// clean the stage
	backRepo.stage.Reset()

	// commit the cleaned stage
	backRepo.stage.Commit()

	// open an existing file
	filename := filepath.Join(dirPath, "bckp.xlsx")
	file, err := xlsx.OpenFile(filename)
	_ = file

	if err != nil {
		log.Panic("Cannot read the XL file", err.Error())
	}

	//
	// restauration first phase (create DB instance with new IDs)
	//

	// insertion point for per struct backup
	backRepo.BackRepoArrow.RestoreXLPhaseOne(file)
	backRepo.BackRepoBar.RestoreXLPhaseOne(file)
	backRepo.BackRepoGantt.RestoreXLPhaseOne(file)
	backRepo.BackRepoGroup.RestoreXLPhaseOne(file)
	backRepo.BackRepoLane.RestoreXLPhaseOne(file)
	backRepo.BackRepoLaneUse.RestoreXLPhaseOne(file)
	backRepo.BackRepoMilestone.RestoreXLPhaseOne(file)

	// commit the restored stage
	backRepo.stage.Commit()
}
