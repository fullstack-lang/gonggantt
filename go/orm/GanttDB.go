// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"errors"
	"fmt"
	"log"
	"time"

	"github.com/jinzhu/gorm"
	"github.com/fullstack-lang/gonggantt/go/models"
)

// dummy variable to have the import database/sql wihthout compile failure id no sql is used
var dummy_Gantt sql.NullBool
var __Gantt_time__dummyDeclaration time.Duration

// GanttAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model ganttAPI
type GanttAPI struct {
	models.Gantt

	// insertion for fields declaration
	// Declation for basic field ganttDB.Name {{BasicKind}} (to be completed)
	Name_Data sql.NullString

	// Declation for basic field ganttDB.Start
	Start_Data sql.NullTime

	// Declation for basic field ganttDB.End
	End_Data sql.NullTime

	// end of insertion
}

// GanttDB describes a gantt in the database
//
// It incorporates all fields : from the model, from the generated field for the API and the GORM ID
//
// swagger:model ganttDB
type GanttDB struct {
	gorm.Model

	GanttAPI
}

// GanttDBs arrays ganttDBs
// swagger:response ganttDBsResponse
type GanttDBs []GanttDB

// GanttDBResponse provides response
// swagger:response ganttDBResponse
type GanttDBResponse struct {
	GanttDB
}

type BackRepoGanttStruct struct {
	// stores GanttDB according to their gorm ID
	Map_GanttDBID_GanttDB *map[uint]*GanttDB

	// stores GanttDB ID according to Gantt address
	Map_GanttPtr_GanttDBID *map[*models.Gantt]uint

	// stores Gantt according to their gorm ID
	Map_GanttDBID_GanttPtr *map[uint]*models.Gantt

	db *gorm.DB
}

// BackRepoGantt.Init set up the BackRepo of the Gantt
func (backRepoGantt *BackRepoGanttStruct) Init(db *gorm.DB) (Error error) {

	if backRepoGantt.Map_GanttDBID_GanttPtr != nil {
		err := errors.New("In Init, backRepoGantt.Map_GanttDBID_GanttPtr should be nil")
		return err
	}

	if backRepoGantt.Map_GanttDBID_GanttDB != nil {
		err := errors.New("In Init, backRepoGantt.Map_GanttDBID_GanttDB should be nil")
		return err
	}

	if backRepoGantt.Map_GanttPtr_GanttDBID != nil {
		err := errors.New("In Init, backRepoGantt.Map_GanttPtr_GanttDBID should be nil")
		return err
	}

	tmp := make(map[uint]*models.Gantt, 0)
	backRepoGantt.Map_GanttDBID_GanttPtr = &tmp

	tmpDB := make(map[uint]*GanttDB, 0)
	backRepoGantt.Map_GanttDBID_GanttDB = &tmpDB

	tmpID := make(map[*models.Gantt]uint, 0)
	backRepoGantt.Map_GanttPtr_GanttDBID = &tmpID

	backRepoGantt.db = db
	return
}

// BackRepoGantt.CommitPhaseOne commits all staged instances of Gantt to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoGantt *BackRepoGanttStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for gantt := range stage.Gantts {
		backRepoGantt.CommitPhaseOneInstance(gantt)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, gantt := range *backRepoGantt.Map_GanttDBID_GanttPtr {
		if _, ok := stage.Gantts[gantt]; !ok {
			backRepoGantt.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoGantt.CommitDeleteInstance commits deletion of Gantt to the BackRepo
func (backRepoGantt *BackRepoGanttStruct) CommitDeleteInstance(id uint) (Error error) {

	gantt := (*backRepoGantt.Map_GanttDBID_GanttPtr)[id]

	// gantt is not staged anymore, remove ganttDB
	ganttDB := (*backRepoGantt.Map_GanttDBID_GanttDB)[id]
	query := backRepoGantt.db.Unscoped().Delete(&ganttDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete((*backRepoGantt.Map_GanttPtr_GanttDBID), gantt)
	delete((*backRepoGantt.Map_GanttDBID_GanttPtr), id)
	delete((*backRepoGantt.Map_GanttDBID_GanttDB), id)

	return
}

// BackRepoGantt.CommitPhaseOneInstance commits gantt staged instances of Gantt to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoGantt *BackRepoGanttStruct) CommitPhaseOneInstance(gantt *models.Gantt) (Error error) {

	// check if the gantt is not commited yet
	if _, ok := (*backRepoGantt.Map_GanttPtr_GanttDBID)[gantt]; ok {
		return
	}

	// initiate gantt
	var ganttDB GanttDB
	ganttDB.Gantt = *gantt

	query := backRepoGantt.db.Create(&ganttDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	(*backRepoGantt.Map_GanttPtr_GanttDBID)[gantt] = ganttDB.ID
	(*backRepoGantt.Map_GanttDBID_GanttPtr)[ganttDB.ID] = gantt
	(*backRepoGantt.Map_GanttDBID_GanttDB)[ganttDB.ID] = &ganttDB

	return
}

// BackRepoGantt.CommitPhaseTwo commits all staged instances of Gantt to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGantt *BackRepoGanttStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, gantt := range *backRepoGantt.Map_GanttDBID_GanttPtr {
		backRepoGantt.CommitPhaseTwoInstance(backRepo, idx, gantt)
	}

	return
}

// BackRepoGantt.CommitPhaseTwoInstance commits {{structname }} of models.Gantt to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGantt *BackRepoGanttStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, gantt *models.Gantt) (Error error) {

	// fetch matching ganttDB
	if ganttDB, ok := (*backRepoGantt.Map_GanttDBID_GanttDB)[idx]; ok {

		{
			{
				// insertion point for fields commit
				ganttDB.Name_Data.String = gantt.Name
				ganttDB.Name_Data.Valid = true

				ganttDB.Start_Data.Time = gantt.Start
				ganttDB.Start_Data.Valid = true

				ganttDB.End_Data.Time = gantt.End
				ganttDB.End_Data.Valid = true

				// commit a slice of pointer translates to update reverse pointer to Lane, i.e.
				for _, lane := range gantt.Lanes {
					if laneDBID, ok := (*backRepo.BackRepoLane.Map_LanePtr_LaneDBID)[lane]; ok {
						if laneDB, ok := (*backRepo.BackRepoLane.Map_LaneDBID_LaneDB)[laneDBID]; ok {
							laneDB.Gantt_LanesDBID.Int64 = int64(ganttDB.ID)
							laneDB.Gantt_LanesDBID.Valid = true
							if q := backRepoGantt.db.Save(&laneDB); q.Error != nil {
								return q.Error
							}
						}
					}
				}

			}
		}
		query := backRepoGantt.db.Save(&ganttDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Gantt intance %s", gantt.Name))
		return err
	}

	return
}

// BackRepoGantt.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One is the creation of instance in the stage
//
// NOTE: the is supposed to have been reset before
//
func (backRepoGantt *BackRepoGanttStruct) CheckoutPhaseOne() (Error error) {

	ganttDBArray := make([]GanttDB, 0)
	query := backRepoGantt.db.Find(&ganttDBArray)
	if query.Error != nil {
		return query.Error
	}

	// copy orm objects to the the map
	for _, ganttDB := range ganttDBArray {
		backRepoGantt.CheckoutPhaseOneInstance(&ganttDB)
	}

	return
}

// CheckoutPhaseOneInstance takes a ganttDB that has been found in the DB, updates the backRepo and stages the
// models version of the ganttDB
func (backRepoGantt *BackRepoGanttStruct) CheckoutPhaseOneInstance(ganttDB *GanttDB) (Error error) {

	// if absent, create entries in the backRepoGantt maps.
	ganttWithNewFieldValues := ganttDB.Gantt
	if _, ok := (*backRepoGantt.Map_GanttDBID_GanttPtr)[ganttDB.ID]; !ok {

		(*backRepoGantt.Map_GanttDBID_GanttPtr)[ganttDB.ID] = &ganttWithNewFieldValues
		(*backRepoGantt.Map_GanttPtr_GanttDBID)[&ganttWithNewFieldValues] = ganttDB.ID

		// append model store with the new element
		ganttWithNewFieldValues.Stage()
	}
	ganttDBWithNewFieldValues := *ganttDB
	(*backRepoGantt.Map_GanttDBID_GanttDB)[ganttDB.ID] = &ganttDBWithNewFieldValues

	return
}

// BackRepoGantt.CheckoutPhaseTwo Checkouts all staged instances of Gantt to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGantt *BackRepoGanttStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, ganttDB := range *backRepoGantt.Map_GanttDBID_GanttDB {
		backRepoGantt.CheckoutPhaseTwoInstance(backRepo, ganttDB)
	}
	return
}

// BackRepoGantt.CheckoutPhaseTwoInstance Checkouts staged instances of Gantt to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGantt *BackRepoGanttStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, ganttDB *GanttDB) (Error error) {

	gantt := (*backRepoGantt.Map_GanttDBID_GanttPtr)[ganttDB.ID]
	_ = gantt // sometimes, there is no code generated. This lines voids the "unused variable" compilation error
	{
		{
			// insertion point for checkout, i.e. update of fields of stage instance from fields of back repo instances
			//
			gantt.Name = ganttDB.Name_Data.String

			gantt.Start = ganttDB.Start_Data.Time

			gantt.End = ganttDB.End_Data.Time

			// parse all LaneDB and redeem the array of poiners to Gantt
			// first reset the slice
			gantt.Lanes = gantt.Lanes[:0]
			for _, LaneDB := range *backRepo.BackRepoLane.Map_LaneDBID_LaneDB {
				if LaneDB.Gantt_LanesDBID.Int64 == int64(ganttDB.ID) {
					Lane := (*backRepo.BackRepoLane.Map_LaneDBID_LanePtr)[LaneDB.ID]
					gantt.Lanes = append(gantt.Lanes, Lane)
				}
			}

		}
	}
	return
}

// CommitGantt allows commit of a single gantt (if already staged)
func (backRepo *BackRepoStruct) CommitGantt(gantt *models.Gantt) {
	backRepo.BackRepoGantt.CommitPhaseOneInstance(gantt)
	if id, ok := (*backRepo.BackRepoGantt.Map_GanttPtr_GanttDBID)[gantt]; ok {
		backRepo.BackRepoGantt.CommitPhaseTwoInstance(backRepo, id, gantt)
	}
}

// CommitGantt allows checkout of a single gantt (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutGantt(gantt *models.Gantt) {
	// check if the gantt is staged
	if _, ok := (*backRepo.BackRepoGantt.Map_GanttPtr_GanttDBID)[gantt]; ok {

		if id, ok := (*backRepo.BackRepoGantt.Map_GanttPtr_GanttDBID)[gantt]; ok {
			var ganttDB GanttDB
			ganttDB.ID = id

			if err := backRepo.BackRepoGantt.db.First(&ganttDB, id).Error; err != nil {
				log.Panicln("CheckoutGantt : Problem with getting object with id:", id)
			}
			backRepo.BackRepoGantt.CheckoutPhaseOneInstance(&ganttDB)
			backRepo.BackRepoGantt.CheckoutPhaseTwoInstance(backRepo, &ganttDB)
		}
	}
}
