// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"github.com/jinzhu/gorm"

	"github.com/fullstack-lang/gonggantt/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Gantt sql.NullBool
var __Gantt_time__dummyDeclaration time.Duration
var dummy_Gantt_sort sort.Float64Slice

// GanttAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model ganttAPI
type GanttAPI struct {
	gorm.Model

	models.Gantt

	// encoding of pointers
	GanttPointersEnconding
}

// GanttPointersEnconding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type GanttPointersEnconding struct {
	// insertion for pointer fields encoding declaration
}

// GanttDB describes a gantt in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model ganttDB
type GanttDB struct {
	gorm.Model

	// insertion for basic fields declaration
	// Declation for basic field ganttDB.Name {{BasicKind}} (to be completed)
	Name_Data sql.NullString

	// Declation for basic field ganttDB.Start
	Start_Data sql.NullTime

	// Declation for basic field ganttDB.End
	End_Data sql.NullTime

	// Declation for basic field ganttDB.LaneHeight {{BasicKind}} (to be completed)
	LaneHeight_Data sql.NullFloat64

	// Declation for basic field ganttDB.RatioBarToLaneHeight {{BasicKind}} (to be completed)
	RatioBarToLaneHeight_Data sql.NullFloat64

	// Declation for basic field ganttDB.YTopMargin {{BasicKind}} (to be completed)
	YTopMargin_Data sql.NullFloat64

	// Declation for basic field ganttDB.XLeftText {{BasicKind}} (to be completed)
	XLeftText_Data sql.NullFloat64

	// Declation for basic field ganttDB.TextHeight {{BasicKind}} (to be completed)
	TextHeight_Data sql.NullFloat64

	// Declation for basic field ganttDB.XLeftLanes {{BasicKind}} (to be completed)
	XLeftLanes_Data sql.NullFloat64

	// Declation for basic field ganttDB.XRightMargin {{BasicKind}} (to be completed)
	XRightMargin_Data sql.NullFloat64

	// Declation for basic field ganttDB.TimeLine_Color {{BasicKind}} (to be completed)
	TimeLine_Color_Data sql.NullString

	// Declation for basic field ganttDB.TimeLine_FillOpacity {{BasicKind}} (to be completed)
	TimeLine_FillOpacity_Data sql.NullFloat64

	// Declation for basic field ganttDB.TimeLine_Stroke {{BasicKind}} (to be completed)
	TimeLine_Stroke_Data sql.NullString

	// Declation for basic field ganttDB.TimeLine_StrokeWidth {{BasicKind}} (to be completed)
	TimeLine_StrokeWidth_Data sql.NullFloat64

	// Declation for basic field ganttDB.Group_Stroke {{BasicKind}} (to be completed)
	Group_Stroke_Data sql.NullString

	// Declation for basic field ganttDB.Group_StrokeWidth {{BasicKind}} (to be completed)
	Group_StrokeWidth_Data sql.NullFloat64

	// Declation for basic field ganttDB.Group_StrokeDashArray {{BasicKind}} (to be completed)
	Group_StrokeDashArray_Data sql.NullString

	// Declation for basic field ganttDB.DateYOffset {{BasicKind}} (to be completed)
	DateYOffset_Data sql.NullFloat64

	// Declation for basic field ganttDB.AlignOnStartEndOnYearStart bool (to be completed)
	// provide the sql storage for the boolan
	AlignOnStartEndOnYearStart_Data sql.NullBool

	// encoding of pointers
	GanttPointersEnconding
}

// GanttDBs arrays ganttDBs
// swagger:response ganttDBsResponse
type GanttDBs []GanttDB

// GanttDBResponse provides response
// swagger:response ganttDBResponse
type GanttDBResponse struct {
	GanttDB
}

type BackRepoGanttStruct struct {
	// stores GanttDB according to their gorm ID
	Map_GanttDBID_GanttDB *map[uint]*GanttDB

	// stores GanttDB ID according to Gantt address
	Map_GanttPtr_GanttDBID *map[*models.Gantt]uint

	// stores Gantt according to their gorm ID
	Map_GanttDBID_GanttPtr *map[uint]*models.Gantt

	db *gorm.DB
}

// GetGanttDBFromGanttPtr is a handy function to access the back repo instance from the stage instance
func (backRepoGantt *BackRepoGanttStruct) GetGanttDBFromGanttPtr(gantt *models.Gantt) (ganttDB *GanttDB) {
	id := (*backRepoGantt.Map_GanttPtr_GanttDBID)[gantt]
	ganttDB = (*backRepoGantt.Map_GanttDBID_GanttDB)[id]
	return
}

// BackRepoGantt.Init set up the BackRepo of the Gantt
func (backRepoGantt *BackRepoGanttStruct) Init(db *gorm.DB) (Error error) {

	if backRepoGantt.Map_GanttDBID_GanttPtr != nil {
		err := errors.New("In Init, backRepoGantt.Map_GanttDBID_GanttPtr should be nil")
		return err
	}

	if backRepoGantt.Map_GanttDBID_GanttDB != nil {
		err := errors.New("In Init, backRepoGantt.Map_GanttDBID_GanttDB should be nil")
		return err
	}

	if backRepoGantt.Map_GanttPtr_GanttDBID != nil {
		err := errors.New("In Init, backRepoGantt.Map_GanttPtr_GanttDBID should be nil")
		return err
	}

	tmp := make(map[uint]*models.Gantt, 0)
	backRepoGantt.Map_GanttDBID_GanttPtr = &tmp

	tmpDB := make(map[uint]*GanttDB, 0)
	backRepoGantt.Map_GanttDBID_GanttDB = &tmpDB

	tmpID := make(map[*models.Gantt]uint, 0)
	backRepoGantt.Map_GanttPtr_GanttDBID = &tmpID

	backRepoGantt.db = db
	return
}

// BackRepoGantt.CommitPhaseOne commits all staged instances of Gantt to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoGantt *BackRepoGanttStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for gantt := range stage.Gantts {
		backRepoGantt.CommitPhaseOneInstance(gantt)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, gantt := range *backRepoGantt.Map_GanttDBID_GanttPtr {
		if _, ok := stage.Gantts[gantt]; !ok {
			backRepoGantt.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoGantt.CommitDeleteInstance commits deletion of Gantt to the BackRepo
func (backRepoGantt *BackRepoGanttStruct) CommitDeleteInstance(id uint) (Error error) {

	gantt := (*backRepoGantt.Map_GanttDBID_GanttPtr)[id]

	// gantt is not staged anymore, remove ganttDB
	ganttDB := (*backRepoGantt.Map_GanttDBID_GanttDB)[id]
	query := backRepoGantt.db.Unscoped().Delete(&ganttDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete((*backRepoGantt.Map_GanttPtr_GanttDBID), gantt)
	delete((*backRepoGantt.Map_GanttDBID_GanttPtr), id)
	delete((*backRepoGantt.Map_GanttDBID_GanttDB), id)

	return
}

// BackRepoGantt.CommitPhaseOneInstance commits gantt staged instances of Gantt to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoGantt *BackRepoGanttStruct) CommitPhaseOneInstance(gantt *models.Gantt) (Error error) {

	// check if the gantt is not commited yet
	if _, ok := (*backRepoGantt.Map_GanttPtr_GanttDBID)[gantt]; ok {
		return
	}

	// initiate gantt
	var ganttDB GanttDB
	ganttDB.CopyBasicFieldsFromGantt(gantt)

	query := backRepoGantt.db.Create(&ganttDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	(*backRepoGantt.Map_GanttPtr_GanttDBID)[gantt] = ganttDB.ID
	(*backRepoGantt.Map_GanttDBID_GanttPtr)[ganttDB.ID] = gantt
	(*backRepoGantt.Map_GanttDBID_GanttDB)[ganttDB.ID] = &ganttDB

	return
}

// BackRepoGantt.CommitPhaseTwo commits all staged instances of Gantt to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGantt *BackRepoGanttStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, gantt := range *backRepoGantt.Map_GanttDBID_GanttPtr {
		backRepoGantt.CommitPhaseTwoInstance(backRepo, idx, gantt)
	}

	return
}

// BackRepoGantt.CommitPhaseTwoInstance commits {{structname }} of models.Gantt to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGantt *BackRepoGanttStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, gantt *models.Gantt) (Error error) {

	// fetch matching ganttDB
	if ganttDB, ok := (*backRepoGantt.Map_GanttDBID_GanttDB)[idx]; ok {

		ganttDB.CopyBasicFieldsFromGantt(gantt)

		// insertion point for translating pointers encodings into actual pointers
		// This loop encodes the slice of pointers gantt.Lanes into the back repo.
		// Each back repo instance at the end of the association encode the ID of the association start
		// into a dedicated field for coding the association. The back repo instance is then saved to the db
		for idx, laneAssocEnd := range gantt.Lanes {

			// get the back repo instance at the association end
			laneAssocEnd_DB :=
				backRepo.BackRepoLane.GetLaneDBFromLanePtr( laneAssocEnd)

			// encode reverse pointer in the association end back repo instance
			laneAssocEnd_DB.Gantt_LanesDBID.Int64 = int64(ganttDB.ID)
			laneAssocEnd_DB.Gantt_LanesDBID.Valid = true
			laneAssocEnd_DB.Gantt_LanesDBID_Index.Int64 = int64(idx)
			laneAssocEnd_DB.Gantt_LanesDBID_Index.Valid = true
			if q := backRepoGantt.db.Save(laneAssocEnd_DB); q.Error != nil {
				return q.Error
			}
		}

		// This loop encodes the slice of pointers gantt.Milestones into the back repo.
		// Each back repo instance at the end of the association encode the ID of the association start
		// into a dedicated field for coding the association. The back repo instance is then saved to the db
		for idx, milestoneAssocEnd := range gantt.Milestones {

			// get the back repo instance at the association end
			milestoneAssocEnd_DB :=
				backRepo.BackRepoMilestone.GetMilestoneDBFromMilestonePtr( milestoneAssocEnd)

			// encode reverse pointer in the association end back repo instance
			milestoneAssocEnd_DB.Gantt_MilestonesDBID.Int64 = int64(ganttDB.ID)
			milestoneAssocEnd_DB.Gantt_MilestonesDBID.Valid = true
			milestoneAssocEnd_DB.Gantt_MilestonesDBID_Index.Int64 = int64(idx)
			milestoneAssocEnd_DB.Gantt_MilestonesDBID_Index.Valid = true
			if q := backRepoGantt.db.Save(milestoneAssocEnd_DB); q.Error != nil {
				return q.Error
			}
		}

		// This loop encodes the slice of pointers gantt.Groups into the back repo.
		// Each back repo instance at the end of the association encode the ID of the association start
		// into a dedicated field for coding the association. The back repo instance is then saved to the db
		for idx, groupAssocEnd := range gantt.Groups {

			// get the back repo instance at the association end
			groupAssocEnd_DB :=
				backRepo.BackRepoGroup.GetGroupDBFromGroupPtr( groupAssocEnd)

			// encode reverse pointer in the association end back repo instance
			groupAssocEnd_DB.Gantt_GroupsDBID.Int64 = int64(ganttDB.ID)
			groupAssocEnd_DB.Gantt_GroupsDBID.Valid = true
			groupAssocEnd_DB.Gantt_GroupsDBID_Index.Int64 = int64(idx)
			groupAssocEnd_DB.Gantt_GroupsDBID_Index.Valid = true
			if q := backRepoGantt.db.Save(groupAssocEnd_DB); q.Error != nil {
				return q.Error
			}
		}

		query := backRepoGantt.db.Save(&ganttDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Gantt intance %s", gantt.Name))
		return err
	}

	return
}

// BackRepoGantt.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One is the creation of instance in the stage
//
// NOTE: the is supposed to have been reset before
//
func (backRepoGantt *BackRepoGanttStruct) CheckoutPhaseOne() (Error error) {

	ganttDBArray := make([]GanttDB, 0)
	query := backRepoGantt.db.Find(&ganttDBArray)
	if query.Error != nil {
		return query.Error
	}

	// copy orm objects to the the map
	for _, ganttDB := range ganttDBArray {
		backRepoGantt.CheckoutPhaseOneInstance(&ganttDB)
	}

	return
}

// CheckoutPhaseOneInstance takes a ganttDB that has been found in the DB, updates the backRepo and stages the
// models version of the ganttDB
func (backRepoGantt *BackRepoGanttStruct) CheckoutPhaseOneInstance(ganttDB *GanttDB) (Error error) {

	gantt, ok := (*backRepoGantt.Map_GanttDBID_GanttPtr)[ganttDB.ID]
	if !ok {
		gantt = new(models.Gantt)

		(*backRepoGantt.Map_GanttDBID_GanttPtr)[ganttDB.ID] = gantt
		(*backRepoGantt.Map_GanttPtr_GanttDBID)[gantt] = ganttDB.ID

		// append model store with the new element
		gantt.Stage()
	}
	ganttDB.CopyBasicFieldsToGantt(gantt)

	// preserve pointer to aclassDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_GanttDBID_GanttDB)[ganttDB hold variable pointers
	ganttDB_Data := *ganttDB
	preservedPtrToGantt := &ganttDB_Data
	(*backRepoGantt.Map_GanttDBID_GanttDB)[ganttDB.ID] = preservedPtrToGantt

	return
}

// BackRepoGantt.CheckoutPhaseTwo Checkouts all staged instances of Gantt to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGantt *BackRepoGanttStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, ganttDB := range *backRepoGantt.Map_GanttDBID_GanttDB {
		backRepoGantt.CheckoutPhaseTwoInstance(backRepo, ganttDB)
	}
	return
}

// BackRepoGantt.CheckoutPhaseTwoInstance Checkouts staged instances of Gantt to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGantt *BackRepoGanttStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, ganttDB *GanttDB) (Error error) {

	gantt := (*backRepoGantt.Map_GanttDBID_GanttPtr)[ganttDB.ID]
	_ = gantt // sometimes, there is no code generated. This lines voids the "unused variable" compilation error

	// insertion point for checkout of pointer encoding
	// This loop redeem gantt.Lanes in the stage from the encode in the back repo
	// It parses all LaneDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	gantt.Lanes = gantt.Lanes[:0]
	// 2. loop all instances in the type in the association end
	for _, laneDB_AssocEnd := range *backRepo.BackRepoLane.Map_LaneDBID_LaneDB {
		// 3. Does the ID encoding at the end and the ID at the start matches ?
		if laneDB_AssocEnd.Gantt_LanesDBID.Int64 == int64(ganttDB.ID) {
			// 4. fetch the associated instance in the stage
			lane_AssocEnd := (*backRepo.BackRepoLane.Map_LaneDBID_LanePtr)[laneDB_AssocEnd.ID]
			// 5. append it the association slice
			gantt.Lanes = append(gantt.Lanes, lane_AssocEnd)
		}
	}

	// sort the array according to the order
	sort.Slice(gantt.Lanes, func(i, j int) bool {
		laneDB_i_ID := (*backRepo.BackRepoLane.Map_LanePtr_LaneDBID)[gantt.Lanes[i]]
		laneDB_j_ID := (*backRepo.BackRepoLane.Map_LanePtr_LaneDBID)[gantt.Lanes[j]]

		laneDB_i := (*backRepo.BackRepoLane.Map_LaneDBID_LaneDB)[laneDB_i_ID]
		laneDB_j := (*backRepo.BackRepoLane.Map_LaneDBID_LaneDB)[laneDB_j_ID]

		return laneDB_i.Gantt_LanesDBID_Index.Int64 < laneDB_j.Gantt_LanesDBID_Index.Int64
	})

	// This loop redeem gantt.Milestones in the stage from the encode in the back repo
	// It parses all MilestoneDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	gantt.Milestones = gantt.Milestones[:0]
	// 2. loop all instances in the type in the association end
	for _, milestoneDB_AssocEnd := range *backRepo.BackRepoMilestone.Map_MilestoneDBID_MilestoneDB {
		// 3. Does the ID encoding at the end and the ID at the start matches ?
		if milestoneDB_AssocEnd.Gantt_MilestonesDBID.Int64 == int64(ganttDB.ID) {
			// 4. fetch the associated instance in the stage
			milestone_AssocEnd := (*backRepo.BackRepoMilestone.Map_MilestoneDBID_MilestonePtr)[milestoneDB_AssocEnd.ID]
			// 5. append it the association slice
			gantt.Milestones = append(gantt.Milestones, milestone_AssocEnd)
		}
	}

	// sort the array according to the order
	sort.Slice(gantt.Milestones, func(i, j int) bool {
		milestoneDB_i_ID := (*backRepo.BackRepoMilestone.Map_MilestonePtr_MilestoneDBID)[gantt.Milestones[i]]
		milestoneDB_j_ID := (*backRepo.BackRepoMilestone.Map_MilestonePtr_MilestoneDBID)[gantt.Milestones[j]]

		milestoneDB_i := (*backRepo.BackRepoMilestone.Map_MilestoneDBID_MilestoneDB)[milestoneDB_i_ID]
		milestoneDB_j := (*backRepo.BackRepoMilestone.Map_MilestoneDBID_MilestoneDB)[milestoneDB_j_ID]

		return milestoneDB_i.Gantt_MilestonesDBID_Index.Int64 < milestoneDB_j.Gantt_MilestonesDBID_Index.Int64
	})

	// This loop redeem gantt.Groups in the stage from the encode in the back repo
	// It parses all GroupDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	gantt.Groups = gantt.Groups[:0]
	// 2. loop all instances in the type in the association end
	for _, groupDB_AssocEnd := range *backRepo.BackRepoGroup.Map_GroupDBID_GroupDB {
		// 3. Does the ID encoding at the end and the ID at the start matches ?
		if groupDB_AssocEnd.Gantt_GroupsDBID.Int64 == int64(ganttDB.ID) {
			// 4. fetch the associated instance in the stage
			group_AssocEnd := (*backRepo.BackRepoGroup.Map_GroupDBID_GroupPtr)[groupDB_AssocEnd.ID]
			// 5. append it the association slice
			gantt.Groups = append(gantt.Groups, group_AssocEnd)
		}
	}

	// sort the array according to the order
	sort.Slice(gantt.Groups, func(i, j int) bool {
		groupDB_i_ID := (*backRepo.BackRepoGroup.Map_GroupPtr_GroupDBID)[gantt.Groups[i]]
		groupDB_j_ID := (*backRepo.BackRepoGroup.Map_GroupPtr_GroupDBID)[gantt.Groups[j]]

		groupDB_i := (*backRepo.BackRepoGroup.Map_GroupDBID_GroupDB)[groupDB_i_ID]
		groupDB_j := (*backRepo.BackRepoGroup.Map_GroupDBID_GroupDB)[groupDB_j_ID]

		return groupDB_i.Gantt_GroupsDBID_Index.Int64 < groupDB_j.Gantt_GroupsDBID_Index.Int64
	})

	return
}

// CommitGantt allows commit of a single gantt (if already staged)
func (backRepo *BackRepoStruct) CommitGantt(gantt *models.Gantt) {
	backRepo.BackRepoGantt.CommitPhaseOneInstance(gantt)
	if id, ok := (*backRepo.BackRepoGantt.Map_GanttPtr_GanttDBID)[gantt]; ok {
		backRepo.BackRepoGantt.CommitPhaseTwoInstance(backRepo, id, gantt)
	}
}

// CommitGantt allows checkout of a single gantt (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutGantt(gantt *models.Gantt) {
	// check if the gantt is staged
	if _, ok := (*backRepo.BackRepoGantt.Map_GanttPtr_GanttDBID)[gantt]; ok {

		if id, ok := (*backRepo.BackRepoGantt.Map_GanttPtr_GanttDBID)[gantt]; ok {
			var ganttDB GanttDB
			ganttDB.ID = id

			if err := backRepo.BackRepoGantt.db.First(&ganttDB, id).Error; err != nil {
				log.Panicln("CheckoutGantt : Problem with getting object with id:", id)
			}
			backRepo.BackRepoGantt.CheckoutPhaseOneInstance(&ganttDB)
			backRepo.BackRepoGantt.CheckoutPhaseTwoInstance(backRepo, &ganttDB)
		}
	}
}

// CopyBasicFieldsToGanttDB is used to copy basic fields between the Stage or the CRUD to the back repo
func (ganttDB *GanttDB) CopyBasicFieldsFromGantt(gantt *models.Gantt) {
	// insertion point for fields commit
	ganttDB.Name_Data.String = gantt.Name
	ganttDB.Name_Data.Valid = true

	ganttDB.Start_Data.Time = gantt.Start
	ganttDB.Start_Data.Valid = true

	ganttDB.End_Data.Time = gantt.End
	ganttDB.End_Data.Valid = true

	ganttDB.LaneHeight_Data.Float64 = gantt.LaneHeight
	ganttDB.LaneHeight_Data.Valid = true

	ganttDB.RatioBarToLaneHeight_Data.Float64 = gantt.RatioBarToLaneHeight
	ganttDB.RatioBarToLaneHeight_Data.Valid = true

	ganttDB.YTopMargin_Data.Float64 = gantt.YTopMargin
	ganttDB.YTopMargin_Data.Valid = true

	ganttDB.XLeftText_Data.Float64 = gantt.XLeftText
	ganttDB.XLeftText_Data.Valid = true

	ganttDB.TextHeight_Data.Float64 = gantt.TextHeight
	ganttDB.TextHeight_Data.Valid = true

	ganttDB.XLeftLanes_Data.Float64 = gantt.XLeftLanes
	ganttDB.XLeftLanes_Data.Valid = true

	ganttDB.XRightMargin_Data.Float64 = gantt.XRightMargin
	ganttDB.XRightMargin_Data.Valid = true

	ganttDB.TimeLine_Color_Data.String = gantt.TimeLine_Color
	ganttDB.TimeLine_Color_Data.Valid = true

	ganttDB.TimeLine_FillOpacity_Data.Float64 = gantt.TimeLine_FillOpacity
	ganttDB.TimeLine_FillOpacity_Data.Valid = true

	ganttDB.TimeLine_Stroke_Data.String = gantt.TimeLine_Stroke
	ganttDB.TimeLine_Stroke_Data.Valid = true

	ganttDB.TimeLine_StrokeWidth_Data.Float64 = gantt.TimeLine_StrokeWidth
	ganttDB.TimeLine_StrokeWidth_Data.Valid = true

	ganttDB.Group_Stroke_Data.String = gantt.Group_Stroke
	ganttDB.Group_Stroke_Data.Valid = true

	ganttDB.Group_StrokeWidth_Data.Float64 = gantt.Group_StrokeWidth
	ganttDB.Group_StrokeWidth_Data.Valid = true

	ganttDB.Group_StrokeDashArray_Data.String = gantt.Group_StrokeDashArray
	ganttDB.Group_StrokeDashArray_Data.Valid = true

	ganttDB.DateYOffset_Data.Float64 = gantt.DateYOffset
	ganttDB.DateYOffset_Data.Valid = true

	ganttDB.AlignOnStartEndOnYearStart_Data.Bool = gantt.AlignOnStartEndOnYearStart
	ganttDB.AlignOnStartEndOnYearStart_Data.Valid = true

}

// CopyBasicFieldsToGanttDB is used to copy basic fields between the Stage or the CRUD to the back repo
func (ganttDB *GanttDB) CopyBasicFieldsToGantt(gantt *models.Gantt) {

	// insertion point for checkout of basic fields (back repo to stage)
	gantt.Name = ganttDB.Name_Data.String
	gantt.Start = ganttDB.Start_Data.Time
	gantt.End = ganttDB.End_Data.Time
	gantt.LaneHeight = ganttDB.LaneHeight_Data.Float64
	gantt.RatioBarToLaneHeight = ganttDB.RatioBarToLaneHeight_Data.Float64
	gantt.YTopMargin = ganttDB.YTopMargin_Data.Float64
	gantt.XLeftText = ganttDB.XLeftText_Data.Float64
	gantt.TextHeight = ganttDB.TextHeight_Data.Float64
	gantt.XLeftLanes = ganttDB.XLeftLanes_Data.Float64
	gantt.XRightMargin = ganttDB.XRightMargin_Data.Float64
	gantt.TimeLine_Color = ganttDB.TimeLine_Color_Data.String
	gantt.TimeLine_FillOpacity = ganttDB.TimeLine_FillOpacity_Data.Float64
	gantt.TimeLine_Stroke = ganttDB.TimeLine_Stroke_Data.String
	gantt.TimeLine_StrokeWidth = ganttDB.TimeLine_StrokeWidth_Data.Float64
	gantt.Group_Stroke = ganttDB.Group_Stroke_Data.String
	gantt.Group_StrokeWidth = ganttDB.Group_StrokeWidth_Data.Float64
	gantt.Group_StrokeDashArray = ganttDB.Group_StrokeDashArray_Data.String
	gantt.DateYOffset = ganttDB.DateYOffset_Data.Float64
	gantt.AlignOnStartEndOnYearStart = ganttDB.AlignOnStartEndOnYearStart_Data.Bool
}

// Backup generates a json file from a slice of all GanttDB instances in the backrepo
func (backRepoGantt *BackRepoGanttStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "GanttDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	var forBackup []*GanttDB
	for _, ganttDB := range *backRepoGantt.Map_GanttDBID_GanttDB {
		forBackup = append(forBackup, ganttDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Panic("Cannot json Gantt ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Panic("Cannot write the json Gantt file", err.Error())
	}
}

func (backRepoGantt *BackRepoGanttStruct) Restore(dirPath string) {

	filename := filepath.Join(dirPath, "GanttDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Panic("Cannot restore/open the json Gantt file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*GanttDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_GanttDBID_GanttDB
	for _, ganttDB := range forRestore {

		ganttDB_ID := ganttDB.ID
		ganttDB.ID = 0
		query := backRepoGantt.db.Create(ganttDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		if ganttDB_ID != ganttDB.ID {
			log.Panicf("ID of Gantt restore ID %d, name %s, has wrong ID %d in DB after create",
				ganttDB_ID, ganttDB.Name_Data.String, ganttDB.ID)
		}
	}

	if err != nil {
		log.Panic("Cannot restore/unmarshall json Gantt file", err.Error())
	}
}
