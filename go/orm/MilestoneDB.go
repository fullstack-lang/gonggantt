// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"errors"
	"fmt"
	"log"
	"time"

	"github.com/jinzhu/gorm"
	"github.com/fullstack-lang/gonggantt/go/models"
)

// dummy variable to have the import database/sql wihthout compile failure id no sql is used
var dummy_Milestone sql.NullBool
var __Milestone_time__dummyDeclaration time.Duration

// MilestoneAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model milestoneAPI
type MilestoneAPI struct {
	models.Milestone

	// insertion for fields declaration
	// Declation for basic field milestoneDB.Name {{BasicKind}} (to be completed)
	Name_Data sql.NullString

	// Declation for basic field milestoneDB.Date
	Date_Data sql.NullTime

	// Implementation of a reverse ID for field Gantt{}.Milestones []*Milestone
	Gantt_MilestonesDBID sql.NullInt64

	// end of insertion
}

// MilestoneDB describes a milestone in the database
//
// It incorporates all fields : from the model, from the generated field for the API and the GORM ID
//
// swagger:model milestoneDB
type MilestoneDB struct {
	gorm.Model

	MilestoneAPI
}

// MilestoneDBs arrays milestoneDBs
// swagger:response milestoneDBsResponse
type MilestoneDBs []MilestoneDB

// MilestoneDBResponse provides response
// swagger:response milestoneDBResponse
type MilestoneDBResponse struct {
	MilestoneDB
}

type BackRepoMilestoneStruct struct {
	// stores MilestoneDB according to their gorm ID
	Map_MilestoneDBID_MilestoneDB *map[uint]*MilestoneDB

	// stores MilestoneDB ID according to Milestone address
	Map_MilestonePtr_MilestoneDBID *map[*models.Milestone]uint

	// stores Milestone according to their gorm ID
	Map_MilestoneDBID_MilestonePtr *map[uint]*models.Milestone

	db *gorm.DB
}

// BackRepoMilestone.Init set up the BackRepo of the Milestone
func (backRepoMilestone *BackRepoMilestoneStruct) Init(db *gorm.DB) (Error error) {

	if backRepoMilestone.Map_MilestoneDBID_MilestonePtr != nil {
		err := errors.New("In Init, backRepoMilestone.Map_MilestoneDBID_MilestonePtr should be nil")
		return err
	}

	if backRepoMilestone.Map_MilestoneDBID_MilestoneDB != nil {
		err := errors.New("In Init, backRepoMilestone.Map_MilestoneDBID_MilestoneDB should be nil")
		return err
	}

	if backRepoMilestone.Map_MilestonePtr_MilestoneDBID != nil {
		err := errors.New("In Init, backRepoMilestone.Map_MilestonePtr_MilestoneDBID should be nil")
		return err
	}

	tmp := make(map[uint]*models.Milestone, 0)
	backRepoMilestone.Map_MilestoneDBID_MilestonePtr = &tmp

	tmpDB := make(map[uint]*MilestoneDB, 0)
	backRepoMilestone.Map_MilestoneDBID_MilestoneDB = &tmpDB

	tmpID := make(map[*models.Milestone]uint, 0)
	backRepoMilestone.Map_MilestonePtr_MilestoneDBID = &tmpID

	backRepoMilestone.db = db
	return
}

// BackRepoMilestone.CommitPhaseOne commits all staged instances of Milestone to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoMilestone *BackRepoMilestoneStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for milestone := range stage.Milestones {
		backRepoMilestone.CommitPhaseOneInstance(milestone)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, milestone := range *backRepoMilestone.Map_MilestoneDBID_MilestonePtr {
		if _, ok := stage.Milestones[milestone]; !ok {
			backRepoMilestone.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoMilestone.CommitDeleteInstance commits deletion of Milestone to the BackRepo
func (backRepoMilestone *BackRepoMilestoneStruct) CommitDeleteInstance(id uint) (Error error) {

	milestone := (*backRepoMilestone.Map_MilestoneDBID_MilestonePtr)[id]

	// milestone is not staged anymore, remove milestoneDB
	milestoneDB := (*backRepoMilestone.Map_MilestoneDBID_MilestoneDB)[id]
	query := backRepoMilestone.db.Unscoped().Delete(&milestoneDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete((*backRepoMilestone.Map_MilestonePtr_MilestoneDBID), milestone)
	delete((*backRepoMilestone.Map_MilestoneDBID_MilestonePtr), id)
	delete((*backRepoMilestone.Map_MilestoneDBID_MilestoneDB), id)

	return
}

// BackRepoMilestone.CommitPhaseOneInstance commits milestone staged instances of Milestone to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoMilestone *BackRepoMilestoneStruct) CommitPhaseOneInstance(milestone *models.Milestone) (Error error) {

	// check if the milestone is not commited yet
	if _, ok := (*backRepoMilestone.Map_MilestonePtr_MilestoneDBID)[milestone]; ok {
		return
	}

	// initiate milestone
	var milestoneDB MilestoneDB
	milestoneDB.Milestone = *milestone

	query := backRepoMilestone.db.Create(&milestoneDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	(*backRepoMilestone.Map_MilestonePtr_MilestoneDBID)[milestone] = milestoneDB.ID
	(*backRepoMilestone.Map_MilestoneDBID_MilestonePtr)[milestoneDB.ID] = milestone
	(*backRepoMilestone.Map_MilestoneDBID_MilestoneDB)[milestoneDB.ID] = &milestoneDB

	return
}

// BackRepoMilestone.CommitPhaseTwo commits all staged instances of Milestone to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMilestone *BackRepoMilestoneStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, milestone := range *backRepoMilestone.Map_MilestoneDBID_MilestonePtr {
		backRepoMilestone.CommitPhaseTwoInstance(backRepo, idx, milestone)
	}

	return
}

// BackRepoMilestone.CommitPhaseTwoInstance commits {{structname }} of models.Milestone to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMilestone *BackRepoMilestoneStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, milestone *models.Milestone) (Error error) {

	// fetch matching milestoneDB
	if milestoneDB, ok := (*backRepoMilestone.Map_MilestoneDBID_MilestoneDB)[idx]; ok {

		{
			{
				// insertion point for fields commit
				milestoneDB.Name_Data.String = milestone.Name
				milestoneDB.Name_Data.Valid = true

				milestoneDB.Date_Data.Time = milestone.Date
				milestoneDB.Date_Data.Valid = true

				// commit a slice of pointer translates to update reverse pointer to Lane, i.e.
				for _, lane := range milestone.DiamonfAndTextAnchors {
					if laneDBID, ok := (*backRepo.BackRepoLane.Map_LanePtr_LaneDBID)[lane]; ok {
						if laneDB, ok := (*backRepo.BackRepoLane.Map_LaneDBID_LaneDB)[laneDBID]; ok {
							laneDB.Milestone_DiamonfAndTextAnchorsDBID.Int64 = int64(milestoneDB.ID)
							laneDB.Milestone_DiamonfAndTextAnchorsDBID.Valid = true
							if q := backRepoMilestone.db.Save(&laneDB); q.Error != nil {
								return q.Error
							}
						}
					}
				}

			}
		}
		query := backRepoMilestone.db.Save(&milestoneDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Milestone intance %s", milestone.Name))
		return err
	}

	return
}

// BackRepoMilestone.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One is the creation of instance in the stage
//
// NOTE: the is supposed to have been reset before
//
func (backRepoMilestone *BackRepoMilestoneStruct) CheckoutPhaseOne() (Error error) {

	milestoneDBArray := make([]MilestoneDB, 0)
	query := backRepoMilestone.db.Find(&milestoneDBArray)
	if query.Error != nil {
		return query.Error
	}

	// copy orm objects to the the map
	for _, milestoneDB := range milestoneDBArray {
		backRepoMilestone.CheckoutPhaseOneInstance(&milestoneDB)
	}

	return
}

// CheckoutPhaseOneInstance takes a milestoneDB that has been found in the DB, updates the backRepo and stages the
// models version of the milestoneDB
func (backRepoMilestone *BackRepoMilestoneStruct) CheckoutPhaseOneInstance(milestoneDB *MilestoneDB) (Error error) {

	// if absent, create entries in the backRepoMilestone maps.
	milestoneWithNewFieldValues := milestoneDB.Milestone
	if _, ok := (*backRepoMilestone.Map_MilestoneDBID_MilestonePtr)[milestoneDB.ID]; !ok {

		(*backRepoMilestone.Map_MilestoneDBID_MilestonePtr)[milestoneDB.ID] = &milestoneWithNewFieldValues
		(*backRepoMilestone.Map_MilestonePtr_MilestoneDBID)[&milestoneWithNewFieldValues] = milestoneDB.ID

		// append model store with the new element
		milestoneWithNewFieldValues.Stage()
	}
	milestoneDBWithNewFieldValues := *milestoneDB
	(*backRepoMilestone.Map_MilestoneDBID_MilestoneDB)[milestoneDB.ID] = &milestoneDBWithNewFieldValues

	return
}

// BackRepoMilestone.CheckoutPhaseTwo Checkouts all staged instances of Milestone to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMilestone *BackRepoMilestoneStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, milestoneDB := range *backRepoMilestone.Map_MilestoneDBID_MilestoneDB {
		backRepoMilestone.CheckoutPhaseTwoInstance(backRepo, milestoneDB)
	}
	return
}

// BackRepoMilestone.CheckoutPhaseTwoInstance Checkouts staged instances of Milestone to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMilestone *BackRepoMilestoneStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, milestoneDB *MilestoneDB) (Error error) {

	milestone := (*backRepoMilestone.Map_MilestoneDBID_MilestonePtr)[milestoneDB.ID]
	_ = milestone // sometimes, there is no code generated. This lines voids the "unused variable" compilation error
	{
		{
			// insertion point for checkout, i.e. update of fields of stage instance from fields of back repo instances
			//
			milestone.Name = milestoneDB.Name_Data.String

			milestone.Date = milestoneDB.Date_Data.Time

			// parse all LaneDB and redeem the array of poiners to Milestone
			// first reset the slice
			milestone.DiamonfAndTextAnchors = milestone.DiamonfAndTextAnchors[:0]
			for _, LaneDB := range *backRepo.BackRepoLane.Map_LaneDBID_LaneDB {
				if LaneDB.Milestone_DiamonfAndTextAnchorsDBID.Int64 == int64(milestoneDB.ID) {
					Lane := (*backRepo.BackRepoLane.Map_LaneDBID_LanePtr)[LaneDB.ID]
					milestone.DiamonfAndTextAnchors = append(milestone.DiamonfAndTextAnchors, Lane)
				}
			}

		}
	}
	return
}

// CommitMilestone allows commit of a single milestone (if already staged)
func (backRepo *BackRepoStruct) CommitMilestone(milestone *models.Milestone) {
	backRepo.BackRepoMilestone.CommitPhaseOneInstance(milestone)
	if id, ok := (*backRepo.BackRepoMilestone.Map_MilestonePtr_MilestoneDBID)[milestone]; ok {
		backRepo.BackRepoMilestone.CommitPhaseTwoInstance(backRepo, id, milestone)
	}
}

// CommitMilestone allows checkout of a single milestone (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutMilestone(milestone *models.Milestone) {
	// check if the milestone is staged
	if _, ok := (*backRepo.BackRepoMilestone.Map_MilestonePtr_MilestoneDBID)[milestone]; ok {

		if id, ok := (*backRepo.BackRepoMilestone.Map_MilestonePtr_MilestoneDBID)[milestone]; ok {
			var milestoneDB MilestoneDB
			milestoneDB.ID = id

			if err := backRepo.BackRepoMilestone.db.First(&milestoneDB, id).Error; err != nil {
				log.Panicln("CheckoutMilestone : Problem with getting object with id:", id)
			}
			backRepo.BackRepoMilestone.CheckoutPhaseOneInstance(&milestoneDB)
			backRepo.BackRepoMilestone.CheckoutPhaseTwoInstance(backRepo, &milestoneDB)
		}
	}
}
