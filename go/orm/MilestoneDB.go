// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gonggantt/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Milestone_sql sql.NullBool
var dummy_Milestone_time time.Duration
var dummy_Milestone_sort sort.Float64Slice

// MilestoneAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model milestoneAPI
type MilestoneAPI struct {
	gorm.Model

	models.Milestone

	// encoding of pointers
	MilestonePointersEnconding
}

// MilestonePointersEnconding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type MilestonePointersEnconding struct {
	// insertion for pointer fields encoding declaration

	// Implementation of a reverse ID for field Gantt{}.Milestones []*Milestone
	Gantt_MilestonesDBID sql.NullInt64

	// implementation of the index of the withing the slice
	Gantt_MilestonesDBID_Index sql.NullInt64
}

// MilestoneDB describes a milestone in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model milestoneDB
type MilestoneDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field milestoneDB.Name {{BasicKind}} (to be completed)
	Name_Data sql.NullString

	// Declation for basic field milestoneDB.Date
	Date_Data sql.NullTime

	// Declation for basic field milestoneDB.DisplayVerticalBar bool (to be completed)
	// provide the sql storage for the boolan
	DisplayVerticalBar_Data sql.NullBool
	// encoding of pointers
	MilestonePointersEnconding
}

// MilestoneDBs arrays milestoneDBs
// swagger:response milestoneDBsResponse
type MilestoneDBs []MilestoneDB

// MilestoneDBResponse provides response
// swagger:response milestoneDBResponse
type MilestoneDBResponse struct {
	MilestoneDB
}

// MilestoneWOP is a Milestone without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type MilestoneWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Date time.Time `xlsx:"2"`

	DisplayVerticalBar bool `xlsx:"3"`
	// insertion for WOP pointer fields
}

var Milestone_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Date",
	"DisplayVerticalBar",
}

type BackRepoMilestoneStruct struct {
	// stores MilestoneDB according to their gorm ID
	Map_MilestoneDBID_MilestoneDB *map[uint]*MilestoneDB

	// stores MilestoneDB ID according to Milestone address
	Map_MilestonePtr_MilestoneDBID *map[*models.Milestone]uint

	// stores Milestone according to their gorm ID
	Map_MilestoneDBID_MilestonePtr *map[uint]*models.Milestone

	db *gorm.DB
}

func (backRepoMilestone *BackRepoMilestoneStruct) GetDB() *gorm.DB {
	return backRepoMilestone.db
}

// GetMilestoneDBFromMilestonePtr is a handy function to access the back repo instance from the stage instance
func (backRepoMilestone *BackRepoMilestoneStruct) GetMilestoneDBFromMilestonePtr(milestone *models.Milestone) (milestoneDB *MilestoneDB) {
	id := (*backRepoMilestone.Map_MilestonePtr_MilestoneDBID)[milestone]
	milestoneDB = (*backRepoMilestone.Map_MilestoneDBID_MilestoneDB)[id]
	return
}

// BackRepoMilestone.Init set up the BackRepo of the Milestone
func (backRepoMilestone *BackRepoMilestoneStruct) Init(db *gorm.DB) (Error error) {

	if backRepoMilestone.Map_MilestoneDBID_MilestonePtr != nil {
		err := errors.New("In Init, backRepoMilestone.Map_MilestoneDBID_MilestonePtr should be nil")
		return err
	}

	if backRepoMilestone.Map_MilestoneDBID_MilestoneDB != nil {
		err := errors.New("In Init, backRepoMilestone.Map_MilestoneDBID_MilestoneDB should be nil")
		return err
	}

	if backRepoMilestone.Map_MilestonePtr_MilestoneDBID != nil {
		err := errors.New("In Init, backRepoMilestone.Map_MilestonePtr_MilestoneDBID should be nil")
		return err
	}

	tmp := make(map[uint]*models.Milestone, 0)
	backRepoMilestone.Map_MilestoneDBID_MilestonePtr = &tmp

	tmpDB := make(map[uint]*MilestoneDB, 0)
	backRepoMilestone.Map_MilestoneDBID_MilestoneDB = &tmpDB

	tmpID := make(map[*models.Milestone]uint, 0)
	backRepoMilestone.Map_MilestonePtr_MilestoneDBID = &tmpID

	backRepoMilestone.db = db
	return
}

// BackRepoMilestone.CommitPhaseOne commits all staged instances of Milestone to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoMilestone *BackRepoMilestoneStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for milestone := range stage.Milestones {
		backRepoMilestone.CommitPhaseOneInstance(milestone)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, milestone := range *backRepoMilestone.Map_MilestoneDBID_MilestonePtr {
		if _, ok := stage.Milestones[milestone]; !ok {
			backRepoMilestone.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoMilestone.CommitDeleteInstance commits deletion of Milestone to the BackRepo
func (backRepoMilestone *BackRepoMilestoneStruct) CommitDeleteInstance(id uint) (Error error) {

	milestone := (*backRepoMilestone.Map_MilestoneDBID_MilestonePtr)[id]

	// milestone is not staged anymore, remove milestoneDB
	milestoneDB := (*backRepoMilestone.Map_MilestoneDBID_MilestoneDB)[id]
	query := backRepoMilestone.db.Unscoped().Delete(&milestoneDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete((*backRepoMilestone.Map_MilestonePtr_MilestoneDBID), milestone)
	delete((*backRepoMilestone.Map_MilestoneDBID_MilestonePtr), id)
	delete((*backRepoMilestone.Map_MilestoneDBID_MilestoneDB), id)

	return
}

// BackRepoMilestone.CommitPhaseOneInstance commits milestone staged instances of Milestone to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoMilestone *BackRepoMilestoneStruct) CommitPhaseOneInstance(milestone *models.Milestone) (Error error) {

	// check if the milestone is not commited yet
	if _, ok := (*backRepoMilestone.Map_MilestonePtr_MilestoneDBID)[milestone]; ok {
		return
	}

	// initiate milestone
	var milestoneDB MilestoneDB
	milestoneDB.CopyBasicFieldsFromMilestone(milestone)

	query := backRepoMilestone.db.Create(&milestoneDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	(*backRepoMilestone.Map_MilestonePtr_MilestoneDBID)[milestone] = milestoneDB.ID
	(*backRepoMilestone.Map_MilestoneDBID_MilestonePtr)[milestoneDB.ID] = milestone
	(*backRepoMilestone.Map_MilestoneDBID_MilestoneDB)[milestoneDB.ID] = &milestoneDB

	return
}

// BackRepoMilestone.CommitPhaseTwo commits all staged instances of Milestone to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMilestone *BackRepoMilestoneStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, milestone := range *backRepoMilestone.Map_MilestoneDBID_MilestonePtr {
		backRepoMilestone.CommitPhaseTwoInstance(backRepo, idx, milestone)
	}

	return
}

// BackRepoMilestone.CommitPhaseTwoInstance commits {{structname }} of models.Milestone to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMilestone *BackRepoMilestoneStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, milestone *models.Milestone) (Error error) {

	// fetch matching milestoneDB
	if milestoneDB, ok := (*backRepoMilestone.Map_MilestoneDBID_MilestoneDB)[idx]; ok {

		milestoneDB.CopyBasicFieldsFromMilestone(milestone)

		// insertion point for translating pointers encodings into actual pointers
		// This loop encodes the slice of pointers milestone.LanesToDisplayMilestoneUse into the back repo.
		// Each back repo instance at the end of the association encode the ID of the association start
		// into a dedicated field for coding the association. The back repo instance is then saved to the db
		for idx, laneuseAssocEnd := range milestone.LanesToDisplayMilestoneUse {

			// get the back repo instance at the association end
			laneuseAssocEnd_DB :=
				backRepo.BackRepoLaneUse.GetLaneUseDBFromLaneUsePtr(laneuseAssocEnd)

			// encode reverse pointer in the association end back repo instance
			laneuseAssocEnd_DB.Milestone_LanesToDisplayMilestoneUseDBID.Int64 = int64(milestoneDB.ID)
			laneuseAssocEnd_DB.Milestone_LanesToDisplayMilestoneUseDBID.Valid = true
			laneuseAssocEnd_DB.Milestone_LanesToDisplayMilestoneUseDBID_Index.Int64 = int64(idx)
			laneuseAssocEnd_DB.Milestone_LanesToDisplayMilestoneUseDBID_Index.Valid = true
			if q := backRepoMilestone.db.Save(laneuseAssocEnd_DB); q.Error != nil {
				return q.Error
			}
		}

		query := backRepoMilestone.db.Save(&milestoneDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Milestone intance %s", milestone.Name))
		return err
	}

	return
}

// BackRepoMilestone.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for pahse two)
//
func (backRepoMilestone *BackRepoMilestoneStruct) CheckoutPhaseOne() (Error error) {

	milestoneDBArray := make([]MilestoneDB, 0)
	query := backRepoMilestone.db.Find(&milestoneDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	milestoneInstancesToBeRemovedFromTheStage := make(map[*models.Milestone]struct{})
	for key, value := range models.Stage.Milestones {
		milestoneInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, milestoneDB := range milestoneDBArray {
		backRepoMilestone.CheckoutPhaseOneInstance(&milestoneDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		milestone, ok := (*backRepoMilestone.Map_MilestoneDBID_MilestonePtr)[milestoneDB.ID]
		if ok {
			delete(milestoneInstancesToBeRemovedFromTheStage, milestone)
		}
	}

	// remove from stage and back repo's 3 maps all milestones that are not in the checkout
	for milestone := range milestoneInstancesToBeRemovedFromTheStage {
		milestone.Unstage()

		// remove instance from the back repo 3 maps
		milestoneID := (*backRepoMilestone.Map_MilestonePtr_MilestoneDBID)[milestone]
		delete((*backRepoMilestone.Map_MilestonePtr_MilestoneDBID), milestone)
		delete((*backRepoMilestone.Map_MilestoneDBID_MilestoneDB), milestoneID)
		delete((*backRepoMilestone.Map_MilestoneDBID_MilestonePtr), milestoneID)
	}

	return
}

// CheckoutPhaseOneInstance takes a milestoneDB that has been found in the DB, updates the backRepo and stages the
// models version of the milestoneDB
func (backRepoMilestone *BackRepoMilestoneStruct) CheckoutPhaseOneInstance(milestoneDB *MilestoneDB) (Error error) {

	milestone, ok := (*backRepoMilestone.Map_MilestoneDBID_MilestonePtr)[milestoneDB.ID]
	if !ok {
		milestone = new(models.Milestone)

		(*backRepoMilestone.Map_MilestoneDBID_MilestonePtr)[milestoneDB.ID] = milestone
		(*backRepoMilestone.Map_MilestonePtr_MilestoneDBID)[milestone] = milestoneDB.ID

		// append model store with the new element
		milestone.Name = milestoneDB.Name_Data.String
		milestone.Stage()
	}
	milestoneDB.CopyBasicFieldsToMilestone(milestone)

	// preserve pointer to milestoneDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_MilestoneDBID_MilestoneDB)[milestoneDB hold variable pointers
	milestoneDB_Data := *milestoneDB
	preservedPtrToMilestone := &milestoneDB_Data
	(*backRepoMilestone.Map_MilestoneDBID_MilestoneDB)[milestoneDB.ID] = preservedPtrToMilestone

	return
}

// BackRepoMilestone.CheckoutPhaseTwo Checkouts all staged instances of Milestone to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMilestone *BackRepoMilestoneStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, milestoneDB := range *backRepoMilestone.Map_MilestoneDBID_MilestoneDB {
		backRepoMilestone.CheckoutPhaseTwoInstance(backRepo, milestoneDB)
	}
	return
}

// BackRepoMilestone.CheckoutPhaseTwoInstance Checkouts staged instances of Milestone to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMilestone *BackRepoMilestoneStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, milestoneDB *MilestoneDB) (Error error) {

	milestone := (*backRepoMilestone.Map_MilestoneDBID_MilestonePtr)[milestoneDB.ID]
	_ = milestone // sometimes, there is no code generated. This lines voids the "unused variable" compilation error

	// insertion point for checkout of pointer encoding
	// This loop redeem milestone.LanesToDisplayMilestoneUse in the stage from the encode in the back repo
	// It parses all LaneUseDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	milestone.LanesToDisplayMilestoneUse = milestone.LanesToDisplayMilestoneUse[:0]
	// 2. loop all instances in the type in the association end
	for _, laneuseDB_AssocEnd := range *backRepo.BackRepoLaneUse.Map_LaneUseDBID_LaneUseDB {
		// 3. Does the ID encoding at the end and the ID at the start matches ?
		if laneuseDB_AssocEnd.Milestone_LanesToDisplayMilestoneUseDBID.Int64 == int64(milestoneDB.ID) {
			// 4. fetch the associated instance in the stage
			laneuse_AssocEnd := (*backRepo.BackRepoLaneUse.Map_LaneUseDBID_LaneUsePtr)[laneuseDB_AssocEnd.ID]
			// 5. append it the association slice
			milestone.LanesToDisplayMilestoneUse = append(milestone.LanesToDisplayMilestoneUse, laneuse_AssocEnd)
		}
	}

	// sort the array according to the order
	sort.Slice(milestone.LanesToDisplayMilestoneUse, func(i, j int) bool {
		laneuseDB_i_ID := (*backRepo.BackRepoLaneUse.Map_LaneUsePtr_LaneUseDBID)[milestone.LanesToDisplayMilestoneUse[i]]
		laneuseDB_j_ID := (*backRepo.BackRepoLaneUse.Map_LaneUsePtr_LaneUseDBID)[milestone.LanesToDisplayMilestoneUse[j]]

		laneuseDB_i := (*backRepo.BackRepoLaneUse.Map_LaneUseDBID_LaneUseDB)[laneuseDB_i_ID]
		laneuseDB_j := (*backRepo.BackRepoLaneUse.Map_LaneUseDBID_LaneUseDB)[laneuseDB_j_ID]

		return laneuseDB_i.Milestone_LanesToDisplayMilestoneUseDBID_Index.Int64 < laneuseDB_j.Milestone_LanesToDisplayMilestoneUseDBID_Index.Int64
	})

	return
}

// CommitMilestone allows commit of a single milestone (if already staged)
func (backRepo *BackRepoStruct) CommitMilestone(milestone *models.Milestone) {
	backRepo.BackRepoMilestone.CommitPhaseOneInstance(milestone)
	if id, ok := (*backRepo.BackRepoMilestone.Map_MilestonePtr_MilestoneDBID)[milestone]; ok {
		backRepo.BackRepoMilestone.CommitPhaseTwoInstance(backRepo, id, milestone)
	}
}

// CommitMilestone allows checkout of a single milestone (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutMilestone(milestone *models.Milestone) {
	// check if the milestone is staged
	if _, ok := (*backRepo.BackRepoMilestone.Map_MilestonePtr_MilestoneDBID)[milestone]; ok {

		if id, ok := (*backRepo.BackRepoMilestone.Map_MilestonePtr_MilestoneDBID)[milestone]; ok {
			var milestoneDB MilestoneDB
			milestoneDB.ID = id

			if err := backRepo.BackRepoMilestone.db.First(&milestoneDB, id).Error; err != nil {
				log.Panicln("CheckoutMilestone : Problem with getting object with id:", id)
			}
			backRepo.BackRepoMilestone.CheckoutPhaseOneInstance(&milestoneDB)
			backRepo.BackRepoMilestone.CheckoutPhaseTwoInstance(backRepo, &milestoneDB)
		}
	}
}

// CopyBasicFieldsFromMilestone
func (milestoneDB *MilestoneDB) CopyBasicFieldsFromMilestone(milestone *models.Milestone) {
	// insertion point for fields commit

	milestoneDB.Name_Data.String = milestone.Name
	milestoneDB.Name_Data.Valid = true

	milestoneDB.Date_Data.Time = milestone.Date
	milestoneDB.Date_Data.Valid = true

	milestoneDB.DisplayVerticalBar_Data.Bool = milestone.DisplayVerticalBar
	milestoneDB.DisplayVerticalBar_Data.Valid = true
}

// CopyBasicFieldsFromMilestoneWOP
func (milestoneDB *MilestoneDB) CopyBasicFieldsFromMilestoneWOP(milestone *MilestoneWOP) {
	// insertion point for fields commit

	milestoneDB.Name_Data.String = milestone.Name
	milestoneDB.Name_Data.Valid = true

	milestoneDB.Date_Data.Time = milestone.Date
	milestoneDB.Date_Data.Valid = true

	milestoneDB.DisplayVerticalBar_Data.Bool = milestone.DisplayVerticalBar
	milestoneDB.DisplayVerticalBar_Data.Valid = true
}

// CopyBasicFieldsToMilestone
func (milestoneDB *MilestoneDB) CopyBasicFieldsToMilestone(milestone *models.Milestone) {
	// insertion point for checkout of basic fields (back repo to stage)
	milestone.Name = milestoneDB.Name_Data.String
	milestone.Date = milestoneDB.Date_Data.Time
	milestone.DisplayVerticalBar = milestoneDB.DisplayVerticalBar_Data.Bool
}

// CopyBasicFieldsToMilestoneWOP
func (milestoneDB *MilestoneDB) CopyBasicFieldsToMilestoneWOP(milestone *MilestoneWOP) {
	milestone.ID = int(milestoneDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	milestone.Name = milestoneDB.Name_Data.String
	milestone.Date = milestoneDB.Date_Data.Time
	milestone.DisplayVerticalBar = milestoneDB.DisplayVerticalBar_Data.Bool
}

// Backup generates a json file from a slice of all MilestoneDB instances in the backrepo
func (backRepoMilestone *BackRepoMilestoneStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "MilestoneDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*MilestoneDB, 0)
	for _, milestoneDB := range *backRepoMilestone.Map_MilestoneDBID_MilestoneDB {
		forBackup = append(forBackup, milestoneDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Panic("Cannot json Milestone ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Panic("Cannot write the json Milestone file", err.Error())
	}
}

// Backup generates a json file from a slice of all MilestoneDB instances in the backrepo
func (backRepoMilestone *BackRepoMilestoneStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*MilestoneDB, 0)
	for _, milestoneDB := range *backRepoMilestone.Map_MilestoneDBID_MilestoneDB {
		forBackup = append(forBackup, milestoneDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Milestone")
	if err != nil {
		log.Panic("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Milestone_Fields, -1)
	for _, milestoneDB := range forBackup {

		var milestoneWOP MilestoneWOP
		milestoneDB.CopyBasicFieldsToMilestoneWOP(&milestoneWOP)

		row := sh.AddRow()
		row.WriteStruct(&milestoneWOP, -1)
	}
}

// RestoreXL from the "Milestone" sheet all MilestoneDB instances
func (backRepoMilestone *BackRepoMilestoneStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoMilestoneid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Milestone"]
	_ = sh
	if !ok {
		log.Panic(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoMilestone.rowVisitorMilestone)
	if err != nil {
		log.Panic("Err=", err)
	}
}

func (backRepoMilestone *BackRepoMilestoneStruct) rowVisitorMilestone(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var milestoneWOP MilestoneWOP
		row.ReadStruct(&milestoneWOP)

		// add the unmarshalled struct to the stage
		milestoneDB := new(MilestoneDB)
		milestoneDB.CopyBasicFieldsFromMilestoneWOP(&milestoneWOP)

		milestoneDB_ID_atBackupTime := milestoneDB.ID
		milestoneDB.ID = 0
		query := backRepoMilestone.db.Create(milestoneDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		(*backRepoMilestone.Map_MilestoneDBID_MilestoneDB)[milestoneDB.ID] = milestoneDB
		BackRepoMilestoneid_atBckpTime_newID[milestoneDB_ID_atBackupTime] = milestoneDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "MilestoneDB.json" in dirPath that stores an array
// of MilestoneDB and stores it in the database
// the map BackRepoMilestoneid_atBckpTime_newID is updated accordingly
func (backRepoMilestone *BackRepoMilestoneStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoMilestoneid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "MilestoneDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Panic("Cannot restore/open the json Milestone file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*MilestoneDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_MilestoneDBID_MilestoneDB
	for _, milestoneDB := range forRestore {

		milestoneDB_ID_atBackupTime := milestoneDB.ID
		milestoneDB.ID = 0
		query := backRepoMilestone.db.Create(milestoneDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		(*backRepoMilestone.Map_MilestoneDBID_MilestoneDB)[milestoneDB.ID] = milestoneDB
		BackRepoMilestoneid_atBckpTime_newID[milestoneDB_ID_atBackupTime] = milestoneDB.ID
	}

	if err != nil {
		log.Panic("Cannot restore/unmarshall json Milestone file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Milestone>id_atBckpTime_newID
// to compute new index
func (backRepoMilestone *BackRepoMilestoneStruct) RestorePhaseTwo() {

	for _, milestoneDB := range *backRepoMilestone.Map_MilestoneDBID_MilestoneDB {

		// next line of code is to avert unused variable compilation error
		_ = milestoneDB

		// insertion point for reindexing pointers encoding
		// This reindex milestone.Milestones
		if milestoneDB.Gantt_MilestonesDBID.Int64 != 0 {
			milestoneDB.Gantt_MilestonesDBID.Int64 =
				int64(BackRepoGanttid_atBckpTime_newID[uint(milestoneDB.Gantt_MilestonesDBID.Int64)])
		}

		// update databse with new index encoding
		query := backRepoMilestone.db.Model(milestoneDB).Updates(*milestoneDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
	}

}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoMilestoneid_atBckpTime_newID map[uint]uint
